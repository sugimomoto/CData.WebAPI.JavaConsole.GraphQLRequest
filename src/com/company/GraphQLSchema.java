// Generated from graphql_java_gen gem

package com.company;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.shopify.graphql.support.AbstractResponse;
import com.shopify.graphql.support.Arguments;
import com.shopify.graphql.support.Error;
import com.shopify.graphql.support.Query;
import com.shopify.graphql.support.SchemaViolationError;
import com.shopify.graphql.support.TopLevelResponse;

import com.shopify.graphql.support.ID;

import java.math.BigDecimal;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class GraphQLSchema {
    public static query_rootQuery query(query_rootQueryDefinition queryDef) {
        StringBuilder queryString = new StringBuilder("{");
        query_rootQuery query = new query_rootQuery(queryString);
        queryDef.define(query);
        queryString.append('}');
        return query;
    }

    public static class QueryResponse {
        private TopLevelResponse response;
        private query_root data;

        public QueryResponse(TopLevelResponse response) throws SchemaViolationError {
            this.response = response;
            this.data = response.getData() != null ? new query_root(response.getData()) : null;
        }

        public query_root getData() {
            return data;
        }

        public List<Error> getErrors() {
            return response.getErrors();
        }

        public String toJson() {
            return new Gson().toJson(response);
        }

        public String prettyPrintJson() {
            final Gson gson = new GsonBuilder().setPrettyPrinting().create();
            return gson.toJson(response);
        }

        public static QueryResponse fromJson(String json) throws SchemaViolationError {
            final TopLevelResponse response = new Gson().fromJson(json, TopLevelResponse.class);
            return new QueryResponse(response);
        }
    }

    public static mutation_rootQuery mutation(mutation_rootQueryDefinition queryDef) {
        StringBuilder queryString = new StringBuilder("mutation{");
        mutation_rootQuery query = new mutation_rootQuery(queryString);
        queryDef.define(query);
        queryString.append('}');
        return query;
    }

    public static class MutationResponse {
        private TopLevelResponse response;
        private mutation_root data;

        public MutationResponse(TopLevelResponse response) throws SchemaViolationError {
            this.response = response;
            this.data = response.getData() != null ? new mutation_root(response.getData()) : null;
        }

        public mutation_root getData() {
            return data;
        }

        public List<Error> getErrors() {
            return response.getErrors();
        }

        public String toJson() {
            return new Gson().toJson(response);
        }

        public String prettyPrintJson() {
            final Gson gson = new GsonBuilder().setPrettyPrinting().create();
            return gson.toJson(response);
        }

        public static MutationResponse fromJson(String json) throws SchemaViolationError {
            final TopLevelResponse response = new Gson().fromJson(json, TopLevelResponse.class);
            return new MutationResponse(response);
        }
    }

    public static class Int_comparison_exp implements Serializable {
        private Integer Eq;

        private Integer Gt;

        private Integer Gte;

        private List<Integer> In;

        private Boolean IsNull;

        private Integer Lt;

        private Integer Lte;

        private Integer Neq;

        private List<Integer> Nin;

        public Integer getEq() {
            return Eq;
        }

        public Int_comparison_exp setEq(Integer Eq) {
            this.Eq = Eq;
            return this;
        }

        public Integer getGt() {
            return Gt;
        }

        public Int_comparison_exp setGt(Integer Gt) {
            this.Gt = Gt;
            return this;
        }

        public Integer getGte() {
            return Gte;
        }

        public Int_comparison_exp setGte(Integer Gte) {
            this.Gte = Gte;
            return this;
        }

        public List<Integer> getIn() {
            return In;
        }

        public Int_comparison_exp setIn(List<Integer> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public Int_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public Integer getLt() {
            return Lt;
        }

        public Int_comparison_exp setLt(Integer Lt) {
            this.Lt = Lt;
            return this;
        }

        public Integer getLte() {
            return Lte;
        }

        public Int_comparison_exp setLte(Integer Lte) {
            this.Lte = Lte;
            return this;
        }

        public Integer getNeq() {
            return Neq;
        }

        public Int_comparison_exp setNeq(Integer Neq) {
            this.Neq = Neq;
            return this;
        }

        public List<Integer> getNin() {
            return Nin;
        }

        public Int_comparison_exp setNin(List<Integer> Nin) {
            this.Nin = Nin;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                _queryBuilder.append(Eq);
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                _queryBuilder.append(Gt);
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                _queryBuilder.append(Gte);
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (Integer item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    _queryBuilder.append(item1);
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                _queryBuilder.append(Lt);
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                _queryBuilder.append(Lte);
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                _queryBuilder.append(Neq);
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (Integer item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    _queryBuilder.append(item1);
                }
                _queryBuilder.append(']');
            }

            _queryBuilder.append('}');
        }
    }

    public static class bpchar_comparison_exp implements Serializable {
        private String Eq;

        private String Gt;

        private String Gte;

        private List<String> In;

        private Boolean IsNull;

        private String Lt;

        private String Lte;

        private String Neq;

        private List<String> Nin;

        public String getEq() {
            return Eq;
        }

        public bpchar_comparison_exp setEq(String Eq) {
            this.Eq = Eq;
            return this;
        }

        public String getGt() {
            return Gt;
        }

        public bpchar_comparison_exp setGt(String Gt) {
            this.Gt = Gt;
            return this;
        }

        public String getGte() {
            return Gte;
        }

        public bpchar_comparison_exp setGte(String Gte) {
            this.Gte = Gte;
            return this;
        }

        public List<String> getIn() {
            return In;
        }

        public bpchar_comparison_exp setIn(List<String> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public bpchar_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public String getLt() {
            return Lt;
        }

        public bpchar_comparison_exp setLt(String Lt) {
            this.Lt = Lt;
            return this;
        }

        public String getLte() {
            return Lte;
        }

        public bpchar_comparison_exp setLte(String Lte) {
            this.Lte = Lte;
            return this;
        }

        public String getNeq() {
            return Neq;
        }

        public bpchar_comparison_exp setNeq(String Neq) {
            this.Neq = Neq;
            return this;
        }

        public List<String> getNin() {
            return Nin;
        }

        public bpchar_comparison_exp setNin(List<String> Nin) {
            this.Nin = Nin;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                Query.appendQuotedString(_queryBuilder, Eq.toString());
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                Query.appendQuotedString(_queryBuilder, Gt.toString());
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                Query.appendQuotedString(_queryBuilder, Gte.toString());
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                Query.appendQuotedString(_queryBuilder, Lt.toString());
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                Query.appendQuotedString(_queryBuilder, Lte.toString());
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                Query.appendQuotedString(_queryBuilder, Neq.toString());
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            _queryBuilder.append('}');
        }
    }

    public static class bytea_comparison_exp implements Serializable {
        private String Eq;

        private String Gt;

        private String Gte;

        private List<String> In;

        private Boolean IsNull;

        private String Lt;

        private String Lte;

        private String Neq;

        private List<String> Nin;

        public String getEq() {
            return Eq;
        }

        public bytea_comparison_exp setEq(String Eq) {
            this.Eq = Eq;
            return this;
        }

        public String getGt() {
            return Gt;
        }

        public bytea_comparison_exp setGt(String Gt) {
            this.Gt = Gt;
            return this;
        }

        public String getGte() {
            return Gte;
        }

        public bytea_comparison_exp setGte(String Gte) {
            this.Gte = Gte;
            return this;
        }

        public List<String> getIn() {
            return In;
        }

        public bytea_comparison_exp setIn(List<String> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public bytea_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public String getLt() {
            return Lt;
        }

        public bytea_comparison_exp setLt(String Lt) {
            this.Lt = Lt;
            return this;
        }

        public String getLte() {
            return Lte;
        }

        public bytea_comparison_exp setLte(String Lte) {
            this.Lte = Lte;
            return this;
        }

        public String getNeq() {
            return Neq;
        }

        public bytea_comparison_exp setNeq(String Neq) {
            this.Neq = Neq;
            return this;
        }

        public List<String> getNin() {
            return Nin;
        }

        public bytea_comparison_exp setNin(List<String> Nin) {
            this.Nin = Nin;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                Query.appendQuotedString(_queryBuilder, Eq.toString());
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                Query.appendQuotedString(_queryBuilder, Gt.toString());
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                Query.appendQuotedString(_queryBuilder, Gte.toString());
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                Query.appendQuotedString(_queryBuilder, Lt.toString());
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                Query.appendQuotedString(_queryBuilder, Lte.toString());
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                Query.appendQuotedString(_queryBuilder, Neq.toString());
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            _queryBuilder.append('}');
        }
    }

    public interface categoriesQueryDefinition {
        void define(categoriesQuery _queryBuilder);
    }

    /**
    * columns and relationships of "categories"
    */
    public static class categoriesQuery extends Query<categoriesQuery> {
        categoriesQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categoriesQuery categoryId() {
            startField("category_id");

            return this;
        }

        public categoriesQuery categoryName() {
            startField("category_name");

            return this;
        }

        public categoriesQuery description() {
            startField("description");

            return this;
        }

        public categoriesQuery picture() {
            startField("picture");

            return this;
        }
    }

    /**
    * columns and relationships of "categories"
    */
    public static class categories extends AbstractResponse<categories> {
        public categories() {
        }

        public categories(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "category_name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "picture": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public categories setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public String getCategoryName() {
            return (String) get("category_name");
        }

        public categories setCategoryName(String arg) {
            optimisticData.put(getKey("category_name"), arg);
            return this;
        }

        public String getDescription() {
            return (String) get("description");
        }

        public categories setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        public String getPicture() {
            return (String) get("picture");
        }

        public categories setPicture(String arg) {
            optimisticData.put(getKey("picture"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "category_name": return false;

                case "description": return false;

                case "picture": return false;

                default: return false;
            }
        }
    }

    public interface categories_aggregateQueryDefinition {
        void define(categories_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "categories"
    */
    public static class categories_aggregateQuery extends Query<categories_aggregateQuery> {
        categories_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_aggregateQuery aggregate(categories_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new categories_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregateQuery nodes(categoriesQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new categoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "categories"
    */
    public static class categories_aggregate extends AbstractResponse<categories_aggregate> {
        public categories_aggregate() {
        }

        public categories_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        categories_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<categories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new categories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_aggregate";
        }

        public categories_aggregate_fields getAggregate() {
            return (categories_aggregate_fields) get("aggregate");
        }

        public categories_aggregate setAggregate(categories_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<categories> getNodes() {
            return (List<categories>) get("nodes");
        }

        public categories_aggregate setNodes(List<categories> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface categories_aggregate_fieldsQueryDefinition {
        void define(categories_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "categories"
    */
    public static class categories_aggregate_fieldsQuery extends Query<categories_aggregate_fieldsQuery> {
        categories_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_aggregate_fieldsQuery avg(categories_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new categories_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<categories_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public categories_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public categories_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public categories_aggregate_fieldsQuery max(categories_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new categories_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery min(categories_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new categories_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery stddev(categories_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new categories_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery stddevPop(categories_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new categories_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery stddevSamp(categories_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new categories_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery sum(categories_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new categories_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery varPop(categories_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new categories_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery varSamp(categories_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new categories_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public categories_aggregate_fieldsQuery variance(categories_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new categories_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "categories"
    */
    public static class categories_aggregate_fields extends AbstractResponse<categories_aggregate_fields> {
        public categories_aggregate_fields() {
        }

        public categories_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        categories_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        categories_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        categories_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        categories_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        categories_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        categories_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        categories_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        categories_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        categories_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        categories_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_aggregate_fields";
        }

        public categories_avg_fields getAvg() {
            return (categories_avg_fields) get("avg");
        }

        public categories_aggregate_fields setAvg(categories_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public categories_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public categories_max_fields getMax() {
            return (categories_max_fields) get("max");
        }

        public categories_aggregate_fields setMax(categories_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public categories_min_fields getMin() {
            return (categories_min_fields) get("min");
        }

        public categories_aggregate_fields setMin(categories_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public categories_stddev_fields getStddev() {
            return (categories_stddev_fields) get("stddev");
        }

        public categories_aggregate_fields setStddev(categories_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public categories_stddev_pop_fields getStddevPop() {
            return (categories_stddev_pop_fields) get("stddev_pop");
        }

        public categories_aggregate_fields setStddevPop(categories_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public categories_stddev_samp_fields getStddevSamp() {
            return (categories_stddev_samp_fields) get("stddev_samp");
        }

        public categories_aggregate_fields setStddevSamp(categories_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public categories_sum_fields getSum() {
            return (categories_sum_fields) get("sum");
        }

        public categories_aggregate_fields setSum(categories_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public categories_var_pop_fields getVarPop() {
            return (categories_var_pop_fields) get("var_pop");
        }

        public categories_aggregate_fields setVarPop(categories_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public categories_var_samp_fields getVarSamp() {
            return (categories_var_samp_fields) get("var_samp");
        }

        public categories_aggregate_fields setVarSamp(categories_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public categories_variance_fields getVariance() {
            return (categories_variance_fields) get("variance");
        }

        public categories_aggregate_fields setVariance(categories_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class categories_aggregate_order_by implements Serializable {
        private categories_avg_order_by avg;

        private order_by count;

        private categories_max_order_by max;

        private categories_min_order_by min;

        private categories_stddev_order_by stddev;

        private categories_stddev_pop_order_by stddevPop;

        private categories_stddev_samp_order_by stddevSamp;

        private categories_sum_order_by sum;

        private categories_var_pop_order_by varPop;

        private categories_var_samp_order_by varSamp;

        private categories_variance_order_by variance;

        public categories_avg_order_by getAvg() {
            return avg;
        }

        public categories_aggregate_order_by setAvg(categories_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public categories_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public categories_max_order_by getMax() {
            return max;
        }

        public categories_aggregate_order_by setMax(categories_max_order_by max) {
            this.max = max;
            return this;
        }

        public categories_min_order_by getMin() {
            return min;
        }

        public categories_aggregate_order_by setMin(categories_min_order_by min) {
            this.min = min;
            return this;
        }

        public categories_stddev_order_by getStddev() {
            return stddev;
        }

        public categories_aggregate_order_by setStddev(categories_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public categories_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public categories_aggregate_order_by setStddevPop(categories_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public categories_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public categories_aggregate_order_by setStddevSamp(categories_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public categories_sum_order_by getSum() {
            return sum;
        }

        public categories_aggregate_order_by setSum(categories_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public categories_var_pop_order_by getVarPop() {
            return varPop;
        }

        public categories_aggregate_order_by setVarPop(categories_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public categories_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public categories_aggregate_order_by setVarSamp(categories_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public categories_variance_order_by getVariance() {
            return variance;
        }

        public categories_aggregate_order_by setVariance(categories_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class categories_arr_rel_insert_input implements Serializable {
        private List<categories_insert_input> data;

        private categories_on_conflict onConflict;

        public categories_arr_rel_insert_input(List<categories_insert_input> data) {
            this.data = data;
        }

        public List<categories_insert_input> getData() {
            return data;
        }

        public categories_arr_rel_insert_input setData(List<categories_insert_input> data) {
            this.data = data;
            return this;
        }

        public categories_on_conflict getOnConflict() {
            return onConflict;
        }

        public categories_arr_rel_insert_input setOnConflict(categories_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (categories_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_avg_fieldsQueryDefinition {
        void define(categories_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class categories_avg_fieldsQuery extends Query<categories_avg_fieldsQuery> {
        categories_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_avg_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class categories_avg_fields extends AbstractResponse<categories_avg_fields> {
        public categories_avg_fields() {
        }

        public categories_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_avg_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public categories_avg_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_avg_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_avg_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class categories_bool_exp implements Serializable {
        private List<categories_bool_exp> And;

        private categories_bool_exp Not;

        private List<categories_bool_exp> Or;

        private Int_comparison_exp categoryId;

        private varchar_comparison_exp categoryName;

        private text_comparison_exp description;

        private bytea_comparison_exp picture;

        public List<categories_bool_exp> getAnd() {
            return And;
        }

        public categories_bool_exp setAnd(List<categories_bool_exp> And) {
            this.And = And;
            return this;
        }

        public categories_bool_exp getNot() {
            return Not;
        }

        public categories_bool_exp setNot(categories_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<categories_bool_exp> getOr() {
            return Or;
        }

        public categories_bool_exp setOr(List<categories_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public Int_comparison_exp getCategoryId() {
            return categoryId;
        }

        public categories_bool_exp setCategoryId(Int_comparison_exp categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public varchar_comparison_exp getCategoryName() {
            return categoryName;
        }

        public categories_bool_exp setCategoryName(varchar_comparison_exp categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public text_comparison_exp getDescription() {
            return description;
        }

        public categories_bool_exp setDescription(text_comparison_exp description) {
            this.description = description;
            return this;
        }

        public bytea_comparison_exp getPicture() {
            return picture;
        }

        public categories_bool_exp setPicture(bytea_comparison_exp picture) {
            this.picture = picture;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (categories_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (categories_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                categoryId.appendTo(_queryBuilder);
            }

            if (categoryName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_name:");
                categoryName.appendTo(_queryBuilder);
            }

            if (description != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("description:");
                description.appendTo(_queryBuilder);
            }

            if (picture != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("picture:");
                picture.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "categories"
    */
    public enum categories_constraint {
        PK_CATEGORIES,

        UNKNOWN_VALUE;

        public static categories_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_categories": {
                    return PK_CATEGORIES;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_CATEGORIES: {
                    return "pk_categories";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class categories_inc_input implements Serializable {
        private Integer categoryId;

        public Integer getCategoryId() {
            return categoryId;
        }

        public categories_inc_input setCategoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId);
            }

            _queryBuilder.append('}');
        }
    }

    public static class categories_insert_input implements Serializable {
        private Integer categoryId;

        private String categoryName;

        private String description;

        private String picture;

        public Integer getCategoryId() {
            return categoryId;
        }

        public categories_insert_input setCategoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public String getCategoryName() {
            return categoryName;
        }

        public categories_insert_input setCategoryName(String categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public String getDescription() {
            return description;
        }

        public categories_insert_input setDescription(String description) {
            this.description = description;
            return this;
        }

        public String getPicture() {
            return picture;
        }

        public categories_insert_input setPicture(String picture) {
            this.picture = picture;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId);
            }

            if (categoryName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_name:");
                Query.appendQuotedString(_queryBuilder, categoryName.toString());
            }

            if (description != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("description:");
                Query.appendQuotedString(_queryBuilder, description.toString());
            }

            if (picture != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("picture:");
                Query.appendQuotedString(_queryBuilder, picture.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_max_fieldsQueryDefinition {
        void define(categories_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class categories_max_fieldsQuery extends Query<categories_max_fieldsQuery> {
        categories_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_max_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public categories_max_fieldsQuery categoryName() {
            startField("category_name");

            return this;
        }

        public categories_max_fieldsQuery description() {
            startField("description");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class categories_max_fields extends AbstractResponse<categories_max_fields> {
        public categories_max_fields() {
        }

        public categories_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "category_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_max_fields";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public categories_max_fields setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public String getCategoryName() {
            return (String) get("category_name");
        }

        public categories_max_fields setCategoryName(String arg) {
            optimisticData.put(getKey("category_name"), arg);
            return this;
        }

        public String getDescription() {
            return (String) get("description");
        }

        public categories_max_fields setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "category_name": return false;

                case "description": return false;

                default: return false;
            }
        }
    }

    public static class categories_max_order_by implements Serializable {
        private order_by categoryId;

        private order_by categoryName;

        private order_by description;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_max_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getCategoryName() {
            return categoryName;
        }

        public categories_max_order_by setCategoryName(order_by categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public order_by getDescription() {
            return description;
        }

        public categories_max_order_by setDescription(order_by description) {
            this.description = description;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (categoryName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_name:");
                _queryBuilder.append(categoryName.toString());
            }

            if (description != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("description:");
                _queryBuilder.append(description.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_min_fieldsQueryDefinition {
        void define(categories_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class categories_min_fieldsQuery extends Query<categories_min_fieldsQuery> {
        categories_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_min_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public categories_min_fieldsQuery categoryName() {
            startField("category_name");

            return this;
        }

        public categories_min_fieldsQuery description() {
            startField("description");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class categories_min_fields extends AbstractResponse<categories_min_fields> {
        public categories_min_fields() {
        }

        public categories_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "category_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "description": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_min_fields";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public categories_min_fields setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public String getCategoryName() {
            return (String) get("category_name");
        }

        public categories_min_fields setCategoryName(String arg) {
            optimisticData.put(getKey("category_name"), arg);
            return this;
        }

        public String getDescription() {
            return (String) get("description");
        }

        public categories_min_fields setDescription(String arg) {
            optimisticData.put(getKey("description"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "category_name": return false;

                case "description": return false;

                default: return false;
            }
        }
    }

    public static class categories_min_order_by implements Serializable {
        private order_by categoryId;

        private order_by categoryName;

        private order_by description;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_min_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getCategoryName() {
            return categoryName;
        }

        public categories_min_order_by setCategoryName(order_by categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public order_by getDescription() {
            return description;
        }

        public categories_min_order_by setDescription(order_by description) {
            this.description = description;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (categoryName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_name:");
                _queryBuilder.append(categoryName.toString());
            }

            if (description != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("description:");
                _queryBuilder.append(description.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_mutation_responseQueryDefinition {
        void define(categories_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "categories"
    */
    public static class categories_mutation_responseQuery extends Query<categories_mutation_responseQuery> {
        categories_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public categories_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public categories_mutation_responseQuery returning(categoriesQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new categoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "categories"
    */
    public static class categories_mutation_response extends AbstractResponse<categories_mutation_response> {
        public categories_mutation_response() {
        }

        public categories_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<categories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new categories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public categories_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<categories> getReturning() {
            return (List<categories>) get("returning");
        }

        public categories_mutation_response setReturning(List<categories> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class categories_obj_rel_insert_input implements Serializable {
        private categories_insert_input data;

        private categories_on_conflict onConflict;

        public categories_obj_rel_insert_input(categories_insert_input data) {
            this.data = data;
        }

        public categories_insert_input getData() {
            return data;
        }

        public categories_obj_rel_insert_input setData(categories_insert_input data) {
            this.data = data;
            return this;
        }

        public categories_on_conflict getOnConflict() {
            return onConflict;
        }

        public categories_obj_rel_insert_input setOnConflict(categories_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class categories_on_conflict implements Serializable {
        private categories_constraint constraint;

        private List<categories_update_column> updateColumns;

        public categories_on_conflict(categories_constraint constraint, List<categories_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public categories_constraint getConstraint() {
            return constraint;
        }

        public categories_on_conflict setConstraint(categories_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<categories_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public categories_on_conflict setUpdateColumns(List<categories_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (categories_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class categories_order_by implements Serializable {
        private order_by categoryId;

        private order_by categoryName;

        private order_by description;

        private order_by picture;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getCategoryName() {
            return categoryName;
        }

        public categories_order_by setCategoryName(order_by categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public order_by getDescription() {
            return description;
        }

        public categories_order_by setDescription(order_by description) {
            this.description = description;
            return this;
        }

        public order_by getPicture() {
            return picture;
        }

        public categories_order_by setPicture(order_by picture) {
            this.picture = picture;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (categoryName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_name:");
                _queryBuilder.append(categoryName.toString());
            }

            if (description != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("description:");
                _queryBuilder.append(description.toString());
            }

            if (picture != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("picture:");
                _queryBuilder.append(picture.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "categories"
    */
    public enum categories_select_column {
        CATEGORY_ID,

        CATEGORY_NAME,

        DESCRIPTION,

        PICTURE,

        UNKNOWN_VALUE;

        public static categories_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "category_id": {
                    return CATEGORY_ID;
                }

                case "category_name": {
                    return CATEGORY_NAME;
                }

                case "description": {
                    return DESCRIPTION;
                }

                case "picture": {
                    return PICTURE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CATEGORY_ID: {
                    return "category_id";
                }

                case CATEGORY_NAME: {
                    return "category_name";
                }

                case DESCRIPTION: {
                    return "description";
                }

                case PICTURE: {
                    return "picture";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class categories_set_input implements Serializable {
        private Integer categoryId;

        private String categoryName;

        private String description;

        private String picture;

        public Integer getCategoryId() {
            return categoryId;
        }

        public categories_set_input setCategoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public String getCategoryName() {
            return categoryName;
        }

        public categories_set_input setCategoryName(String categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public String getDescription() {
            return description;
        }

        public categories_set_input setDescription(String description) {
            this.description = description;
            return this;
        }

        public String getPicture() {
            return picture;
        }

        public categories_set_input setPicture(String picture) {
            this.picture = picture;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId);
            }

            if (categoryName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_name:");
                Query.appendQuotedString(_queryBuilder, categoryName.toString());
            }

            if (description != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("description:");
                Query.appendQuotedString(_queryBuilder, description.toString());
            }

            if (picture != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("picture:");
                Query.appendQuotedString(_queryBuilder, picture.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_stddev_fieldsQueryDefinition {
        void define(categories_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class categories_stddev_fieldsQuery extends Query<categories_stddev_fieldsQuery> {
        categories_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_stddev_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class categories_stddev_fields extends AbstractResponse<categories_stddev_fields> {
        public categories_stddev_fields() {
        }

        public categories_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_stddev_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public categories_stddev_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_stddev_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_stddev_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_stddev_pop_fieldsQueryDefinition {
        void define(categories_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class categories_stddev_pop_fieldsQuery extends Query<categories_stddev_pop_fieldsQuery> {
        categories_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_stddev_pop_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class categories_stddev_pop_fields extends AbstractResponse<categories_stddev_pop_fields> {
        public categories_stddev_pop_fields() {
        }

        public categories_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_stddev_pop_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public categories_stddev_pop_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_stddev_pop_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_stddev_pop_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_stddev_samp_fieldsQueryDefinition {
        void define(categories_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class categories_stddev_samp_fieldsQuery extends Query<categories_stddev_samp_fieldsQuery> {
        categories_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_stddev_samp_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class categories_stddev_samp_fields extends AbstractResponse<categories_stddev_samp_fields> {
        public categories_stddev_samp_fields() {
        }

        public categories_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_stddev_samp_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public categories_stddev_samp_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_stddev_samp_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_stddev_samp_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_sum_fieldsQueryDefinition {
        void define(categories_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class categories_sum_fieldsQuery extends Query<categories_sum_fieldsQuery> {
        categories_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_sum_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class categories_sum_fields extends AbstractResponse<categories_sum_fields> {
        public categories_sum_fields() {
        }

        public categories_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_sum_fields";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public categories_sum_fields setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_sum_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_sum_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "categories"
    */
    public enum categories_update_column {
        CATEGORY_ID,

        CATEGORY_NAME,

        DESCRIPTION,

        PICTURE,

        UNKNOWN_VALUE;

        public static categories_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "category_id": {
                    return CATEGORY_ID;
                }

                case "category_name": {
                    return CATEGORY_NAME;
                }

                case "description": {
                    return DESCRIPTION;
                }

                case "picture": {
                    return PICTURE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CATEGORY_ID: {
                    return "category_id";
                }

                case CATEGORY_NAME: {
                    return "category_name";
                }

                case DESCRIPTION: {
                    return "description";
                }

                case PICTURE: {
                    return "picture";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface categories_var_pop_fieldsQueryDefinition {
        void define(categories_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class categories_var_pop_fieldsQuery extends Query<categories_var_pop_fieldsQuery> {
        categories_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_var_pop_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class categories_var_pop_fields extends AbstractResponse<categories_var_pop_fields> {
        public categories_var_pop_fields() {
        }

        public categories_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_var_pop_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public categories_var_pop_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_var_pop_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_var_pop_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_var_samp_fieldsQueryDefinition {
        void define(categories_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class categories_var_samp_fieldsQuery extends Query<categories_var_samp_fieldsQuery> {
        categories_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_var_samp_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class categories_var_samp_fields extends AbstractResponse<categories_var_samp_fields> {
        public categories_var_samp_fields() {
        }

        public categories_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_var_samp_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public categories_var_samp_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_var_samp_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_var_samp_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface categories_variance_fieldsQueryDefinition {
        void define(categories_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class categories_variance_fieldsQuery extends Query<categories_variance_fieldsQuery> {
        categories_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public categories_variance_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class categories_variance_fields extends AbstractResponse<categories_variance_fields> {
        public categories_variance_fields() {
        }

        public categories_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "categories_variance_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public categories_variance_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                default: return false;
            }
        }
    }

    public static class categories_variance_order_by implements Serializable {
        private order_by categoryId;

        public order_by getCategoryId() {
            return categoryId;
        }

        public categories_variance_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * conflict action
    */
    public enum conflict_action {
        IGNORE,

        UPDATE,

        UNKNOWN_VALUE;

        public static conflict_action fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "ignore": {
                    return IGNORE;
                }

                case "update": {
                    return UPDATE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case IGNORE: {
                    return "ignore";
                }

                case UPDATE: {
                    return "update";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface customer_customer_demoQueryDefinition {
        void define(customer_customer_demoQuery _queryBuilder);
    }

    /**
    * columns and relationships of "customer_customer_demo"
    */
    public static class customer_customer_demoQuery extends Query<customer_customer_demoQuery> {
        customer_customer_demoQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customer_customer_demoQuery customerId() {
            startField("customer_id");

            return this;
        }

        public customer_customer_demoQuery customerTypeId() {
            startField("customer_type_id");

            return this;
        }
    }

    /**
    * columns and relationships of "customer_customer_demo"
    */
    public static class customer_customer_demo extends AbstractResponse<customer_customer_demo> {
        public customer_customer_demo() {
        }

        public customer_customer_demo(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer_id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "customer_type_id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_customer_demo";
        }

        public String getCustomerId() {
            return (String) get("customer_id");
        }

        public customer_customer_demo setCustomerId(String arg) {
            optimisticData.put(getKey("customer_id"), arg);
            return this;
        }

        public String getCustomerTypeId() {
            return (String) get("customer_type_id");
        }

        public customer_customer_demo setCustomerTypeId(String arg) {
            optimisticData.put(getKey("customer_type_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer_id": return false;

                case "customer_type_id": return false;

                default: return false;
            }
        }
    }

    public interface customer_customer_demo_aggregateQueryDefinition {
        void define(customer_customer_demo_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "customer_customer_demo"
    */
    public static class customer_customer_demo_aggregateQuery extends Query<customer_customer_demo_aggregateQuery> {
        customer_customer_demo_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customer_customer_demo_aggregateQuery aggregate(customer_customer_demo_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demo_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public customer_customer_demo_aggregateQuery nodes(customer_customer_demoQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "customer_customer_demo"
    */
    public static class customer_customer_demo_aggregate extends AbstractResponse<customer_customer_demo_aggregate> {
        public customer_customer_demo_aggregate() {
        }

        public customer_customer_demo_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        customer_customer_demo_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_customer_demo_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<customer_customer_demo> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_customer_demo(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_customer_demo_aggregate";
        }

        public customer_customer_demo_aggregate_fields getAggregate() {
            return (customer_customer_demo_aggregate_fields) get("aggregate");
        }

        public customer_customer_demo_aggregate setAggregate(customer_customer_demo_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<customer_customer_demo> getNodes() {
            return (List<customer_customer_demo>) get("nodes");
        }

        public customer_customer_demo_aggregate setNodes(List<customer_customer_demo> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface customer_customer_demo_aggregate_fieldsQueryDefinition {
        void define(customer_customer_demo_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "customer_customer_demo"
    */
    public static class customer_customer_demo_aggregate_fieldsQuery extends Query<customer_customer_demo_aggregate_fieldsQuery> {
        customer_customer_demo_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<customer_customer_demo_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public customer_customer_demo_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public customer_customer_demo_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }
    }

    /**
    * aggregate fields of "customer_customer_demo"
    */
    public static class customer_customer_demo_aggregate_fields extends AbstractResponse<customer_customer_demo_aggregate_fields> {
        public customer_customer_demo_aggregate_fields() {
        }

        public customer_customer_demo_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_customer_demo_aggregate_fields";
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public customer_customer_demo_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "count": return false;

                default: return false;
            }
        }
    }

    public static class customer_customer_demo_aggregate_order_by implements Serializable {
        private order_by count;

        public order_by getCount() {
            return count;
        }

        public customer_customer_demo_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class customer_customer_demo_arr_rel_insert_input implements Serializable {
        private List<customer_customer_demo_insert_input> data;

        private customer_customer_demo_on_conflict onConflict;

        public customer_customer_demo_arr_rel_insert_input(List<customer_customer_demo_insert_input> data) {
            this.data = data;
        }

        public List<customer_customer_demo_insert_input> getData() {
            return data;
        }

        public customer_customer_demo_arr_rel_insert_input setData(List<customer_customer_demo_insert_input> data) {
            this.data = data;
            return this;
        }

        public customer_customer_demo_on_conflict getOnConflict() {
            return onConflict;
        }

        public customer_customer_demo_arr_rel_insert_input setOnConflict(customer_customer_demo_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customer_customer_demo_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customer_customer_demo_bool_exp implements Serializable {
        private List<customer_customer_demo_bool_exp> And;

        private customer_customer_demo_bool_exp Not;

        private List<customer_customer_demo_bool_exp> Or;

        private bpchar_comparison_exp customerId;

        private bpchar_comparison_exp customerTypeId;

        public List<customer_customer_demo_bool_exp> getAnd() {
            return And;
        }

        public customer_customer_demo_bool_exp setAnd(List<customer_customer_demo_bool_exp> And) {
            this.And = And;
            return this;
        }

        public customer_customer_demo_bool_exp getNot() {
            return Not;
        }

        public customer_customer_demo_bool_exp setNot(customer_customer_demo_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<customer_customer_demo_bool_exp> getOr() {
            return Or;
        }

        public customer_customer_demo_bool_exp setOr(List<customer_customer_demo_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public bpchar_comparison_exp getCustomerId() {
            return customerId;
        }

        public customer_customer_demo_bool_exp setCustomerId(bpchar_comparison_exp customerId) {
            this.customerId = customerId;
            return this;
        }

        public bpchar_comparison_exp getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_customer_demo_bool_exp setCustomerTypeId(bpchar_comparison_exp customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (customer_customer_demo_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (customer_customer_demo_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                customerId.appendTo(_queryBuilder);
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                customerTypeId.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "customer_customer_demo"
    */
    public enum customer_customer_demo_constraint {
        PK_CUSTOMER_CUSTOMER_DEMO,

        UNKNOWN_VALUE;

        public static customer_customer_demo_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_customer_customer_demo": {
                    return PK_CUSTOMER_CUSTOMER_DEMO;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_CUSTOMER_CUSTOMER_DEMO: {
                    return "pk_customer_customer_demo";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class customer_customer_demo_insert_input implements Serializable {
        private String customerId;

        private String customerTypeId;

        public String getCustomerId() {
            return customerId;
        }

        public customer_customer_demo_insert_input setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public String getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_customer_demo_insert_input setCustomerTypeId(String customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                Query.appendQuotedString(_queryBuilder, customerId.toString());
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                Query.appendQuotedString(_queryBuilder, customerTypeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface customer_customer_demo_mutation_responseQueryDefinition {
        void define(customer_customer_demo_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "customer_customer_demo"
    */
    public static class customer_customer_demo_mutation_responseQuery extends Query<customer_customer_demo_mutation_responseQuery> {
        customer_customer_demo_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public customer_customer_demo_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public customer_customer_demo_mutation_responseQuery returning(customer_customer_demoQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "customer_customer_demo"
    */
    public static class customer_customer_demo_mutation_response extends AbstractResponse<customer_customer_demo_mutation_response> {
        public customer_customer_demo_mutation_response() {
        }

        public customer_customer_demo_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<customer_customer_demo> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_customer_demo(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_customer_demo_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public customer_customer_demo_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<customer_customer_demo> getReturning() {
            return (List<customer_customer_demo>) get("returning");
        }

        public customer_customer_demo_mutation_response setReturning(List<customer_customer_demo> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class customer_customer_demo_obj_rel_insert_input implements Serializable {
        private customer_customer_demo_insert_input data;

        private customer_customer_demo_on_conflict onConflict;

        public customer_customer_demo_obj_rel_insert_input(customer_customer_demo_insert_input data) {
            this.data = data;
        }

        public customer_customer_demo_insert_input getData() {
            return data;
        }

        public customer_customer_demo_obj_rel_insert_input setData(customer_customer_demo_insert_input data) {
            this.data = data;
            return this;
        }

        public customer_customer_demo_on_conflict getOnConflict() {
            return onConflict;
        }

        public customer_customer_demo_obj_rel_insert_input setOnConflict(customer_customer_demo_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customer_customer_demo_on_conflict implements Serializable {
        private customer_customer_demo_constraint constraint;

        private List<customer_customer_demo_update_column> updateColumns;

        public customer_customer_demo_on_conflict(customer_customer_demo_constraint constraint, List<customer_customer_demo_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public customer_customer_demo_constraint getConstraint() {
            return constraint;
        }

        public customer_customer_demo_on_conflict setConstraint(customer_customer_demo_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<customer_customer_demo_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public customer_customer_demo_on_conflict setUpdateColumns(List<customer_customer_demo_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customer_customer_demo_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class customer_customer_demo_order_by implements Serializable {
        private order_by customerId;

        private order_by customerTypeId;

        public order_by getCustomerId() {
            return customerId;
        }

        public customer_customer_demo_order_by setCustomerId(order_by customerId) {
            this.customerId = customerId;
            return this;
        }

        public order_by getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_customer_demo_order_by setCustomerTypeId(order_by customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                _queryBuilder.append(customerId.toString());
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                _queryBuilder.append(customerTypeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "customer_customer_demo"
    */
    public enum customer_customer_demo_select_column {
        CUSTOMER_ID,

        CUSTOMER_TYPE_ID,

        UNKNOWN_VALUE;

        public static customer_customer_demo_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "customer_id": {
                    return CUSTOMER_ID;
                }

                case "customer_type_id": {
                    return CUSTOMER_TYPE_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CUSTOMER_ID: {
                    return "customer_id";
                }

                case CUSTOMER_TYPE_ID: {
                    return "customer_type_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class customer_customer_demo_set_input implements Serializable {
        private String customerId;

        private String customerTypeId;

        public String getCustomerId() {
            return customerId;
        }

        public customer_customer_demo_set_input setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public String getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_customer_demo_set_input setCustomerTypeId(String customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                Query.appendQuotedString(_queryBuilder, customerId.toString());
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                Query.appendQuotedString(_queryBuilder, customerTypeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "customer_customer_demo"
    */
    public enum customer_customer_demo_update_column {
        CUSTOMER_ID,

        CUSTOMER_TYPE_ID,

        UNKNOWN_VALUE;

        public static customer_customer_demo_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "customer_id": {
                    return CUSTOMER_ID;
                }

                case "customer_type_id": {
                    return CUSTOMER_TYPE_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CUSTOMER_ID: {
                    return "customer_id";
                }

                case CUSTOMER_TYPE_ID: {
                    return "customer_type_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface customer_demographicsQueryDefinition {
        void define(customer_demographicsQuery _queryBuilder);
    }

    /**
    * columns and relationships of "customer_demographics"
    */
    public static class customer_demographicsQuery extends Query<customer_demographicsQuery> {
        customer_demographicsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customer_demographicsQuery customerDesc() {
            startField("customer_desc");

            return this;
        }

        public customer_demographicsQuery customerTypeId() {
            startField("customer_type_id");

            return this;
        }
    }

    /**
    * columns and relationships of "customer_demographics"
    */
    public static class customer_demographics extends AbstractResponse<customer_demographics> {
        public customer_demographics() {
        }

        public customer_demographics(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer_desc": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customer_type_id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_demographics";
        }

        public String getCustomerDesc() {
            return (String) get("customer_desc");
        }

        public customer_demographics setCustomerDesc(String arg) {
            optimisticData.put(getKey("customer_desc"), arg);
            return this;
        }

        public String getCustomerTypeId() {
            return (String) get("customer_type_id");
        }

        public customer_demographics setCustomerTypeId(String arg) {
            optimisticData.put(getKey("customer_type_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer_desc": return false;

                case "customer_type_id": return false;

                default: return false;
            }
        }
    }

    public interface customer_demographics_aggregateQueryDefinition {
        void define(customer_demographics_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "customer_demographics"
    */
    public static class customer_demographics_aggregateQuery extends Query<customer_demographics_aggregateQuery> {
        customer_demographics_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customer_demographics_aggregateQuery aggregate(customer_demographics_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public customer_demographics_aggregateQuery nodes(customer_demographicsQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new customer_demographicsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "customer_demographics"
    */
    public static class customer_demographics_aggregate extends AbstractResponse<customer_demographics_aggregate> {
        public customer_demographics_aggregate() {
        }

        public customer_demographics_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        customer_demographics_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<customer_demographics> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_demographics(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_demographics_aggregate";
        }

        public customer_demographics_aggregate_fields getAggregate() {
            return (customer_demographics_aggregate_fields) get("aggregate");
        }

        public customer_demographics_aggregate setAggregate(customer_demographics_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<customer_demographics> getNodes() {
            return (List<customer_demographics>) get("nodes");
        }

        public customer_demographics_aggregate setNodes(List<customer_demographics> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface customer_demographics_aggregate_fieldsQueryDefinition {
        void define(customer_demographics_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "customer_demographics"
    */
    public static class customer_demographics_aggregate_fieldsQuery extends Query<customer_demographics_aggregate_fieldsQuery> {
        customer_demographics_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<customer_demographics_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public customer_demographics_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public customer_demographics_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public customer_demographics_aggregate_fieldsQuery max(customer_demographics_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public customer_demographics_aggregate_fieldsQuery min(customer_demographics_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "customer_demographics"
    */
    public static class customer_demographics_aggregate_fields extends AbstractResponse<customer_demographics_aggregate_fields> {
        public customer_demographics_aggregate_fields() {
        }

        public customer_demographics_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        customer_demographics_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        customer_demographics_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_demographics_aggregate_fields";
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public customer_demographics_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public customer_demographics_max_fields getMax() {
            return (customer_demographics_max_fields) get("max");
        }

        public customer_demographics_aggregate_fields setMax(customer_demographics_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public customer_demographics_min_fields getMin() {
            return (customer_demographics_min_fields) get("min");
        }

        public customer_demographics_aggregate_fields setMin(customer_demographics_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "count": return false;

                case "max": return true;

                case "min": return true;

                default: return false;
            }
        }
    }

    public static class customer_demographics_aggregate_order_by implements Serializable {
        private order_by count;

        private customer_demographics_max_order_by max;

        private customer_demographics_min_order_by min;

        public order_by getCount() {
            return count;
        }

        public customer_demographics_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public customer_demographics_max_order_by getMax() {
            return max;
        }

        public customer_demographics_aggregate_order_by setMax(customer_demographics_max_order_by max) {
            this.max = max;
            return this;
        }

        public customer_demographics_min_order_by getMin() {
            return min;
        }

        public customer_demographics_aggregate_order_by setMin(customer_demographics_min_order_by min) {
            this.min = min;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customer_demographics_arr_rel_insert_input implements Serializable {
        private List<customer_demographics_insert_input> data;

        private customer_demographics_on_conflict onConflict;

        public customer_demographics_arr_rel_insert_input(List<customer_demographics_insert_input> data) {
            this.data = data;
        }

        public List<customer_demographics_insert_input> getData() {
            return data;
        }

        public customer_demographics_arr_rel_insert_input setData(List<customer_demographics_insert_input> data) {
            this.data = data;
            return this;
        }

        public customer_demographics_on_conflict getOnConflict() {
            return onConflict;
        }

        public customer_demographics_arr_rel_insert_input setOnConflict(customer_demographics_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customer_demographics_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customer_demographics_bool_exp implements Serializable {
        private List<customer_demographics_bool_exp> And;

        private customer_demographics_bool_exp Not;

        private List<customer_demographics_bool_exp> Or;

        private text_comparison_exp customerDesc;

        private bpchar_comparison_exp customerTypeId;

        public List<customer_demographics_bool_exp> getAnd() {
            return And;
        }

        public customer_demographics_bool_exp setAnd(List<customer_demographics_bool_exp> And) {
            this.And = And;
            return this;
        }

        public customer_demographics_bool_exp getNot() {
            return Not;
        }

        public customer_demographics_bool_exp setNot(customer_demographics_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<customer_demographics_bool_exp> getOr() {
            return Or;
        }

        public customer_demographics_bool_exp setOr(List<customer_demographics_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public text_comparison_exp getCustomerDesc() {
            return customerDesc;
        }

        public customer_demographics_bool_exp setCustomerDesc(text_comparison_exp customerDesc) {
            this.customerDesc = customerDesc;
            return this;
        }

        public bpchar_comparison_exp getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_demographics_bool_exp setCustomerTypeId(bpchar_comparison_exp customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (customer_demographics_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (customer_demographics_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (customerDesc != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_desc:");
                customerDesc.appendTo(_queryBuilder);
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                customerTypeId.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "customer_demographics"
    */
    public enum customer_demographics_constraint {
        PK_CUSTOMER_DEMOGRAPHICS,

        UNKNOWN_VALUE;

        public static customer_demographics_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_customer_demographics": {
                    return PK_CUSTOMER_DEMOGRAPHICS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_CUSTOMER_DEMOGRAPHICS: {
                    return "pk_customer_demographics";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class customer_demographics_insert_input implements Serializable {
        private String customerDesc;

        private String customerTypeId;

        public String getCustomerDesc() {
            return customerDesc;
        }

        public customer_demographics_insert_input setCustomerDesc(String customerDesc) {
            this.customerDesc = customerDesc;
            return this;
        }

        public String getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_demographics_insert_input setCustomerTypeId(String customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerDesc != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_desc:");
                Query.appendQuotedString(_queryBuilder, customerDesc.toString());
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                Query.appendQuotedString(_queryBuilder, customerTypeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface customer_demographics_max_fieldsQueryDefinition {
        void define(customer_demographics_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class customer_demographics_max_fieldsQuery extends Query<customer_demographics_max_fieldsQuery> {
        customer_demographics_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customer_demographics_max_fieldsQuery customerDesc() {
            startField("customer_desc");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class customer_demographics_max_fields extends AbstractResponse<customer_demographics_max_fields> {
        public customer_demographics_max_fields() {
        }

        public customer_demographics_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer_desc": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_demographics_max_fields";
        }

        public String getCustomerDesc() {
            return (String) get("customer_desc");
        }

        public customer_demographics_max_fields setCustomerDesc(String arg) {
            optimisticData.put(getKey("customer_desc"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer_desc": return false;

                default: return false;
            }
        }
    }

    public static class customer_demographics_max_order_by implements Serializable {
        private order_by customerDesc;

        public order_by getCustomerDesc() {
            return customerDesc;
        }

        public customer_demographics_max_order_by setCustomerDesc(order_by customerDesc) {
            this.customerDesc = customerDesc;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerDesc != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_desc:");
                _queryBuilder.append(customerDesc.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface customer_demographics_min_fieldsQueryDefinition {
        void define(customer_demographics_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class customer_demographics_min_fieldsQuery extends Query<customer_demographics_min_fieldsQuery> {
        customer_demographics_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customer_demographics_min_fieldsQuery customerDesc() {
            startField("customer_desc");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class customer_demographics_min_fields extends AbstractResponse<customer_demographics_min_fields> {
        public customer_demographics_min_fields() {
        }

        public customer_demographics_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer_desc": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_demographics_min_fields";
        }

        public String getCustomerDesc() {
            return (String) get("customer_desc");
        }

        public customer_demographics_min_fields setCustomerDesc(String arg) {
            optimisticData.put(getKey("customer_desc"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer_desc": return false;

                default: return false;
            }
        }
    }

    public static class customer_demographics_min_order_by implements Serializable {
        private order_by customerDesc;

        public order_by getCustomerDesc() {
            return customerDesc;
        }

        public customer_demographics_min_order_by setCustomerDesc(order_by customerDesc) {
            this.customerDesc = customerDesc;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerDesc != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_desc:");
                _queryBuilder.append(customerDesc.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface customer_demographics_mutation_responseQueryDefinition {
        void define(customer_demographics_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "customer_demographics"
    */
    public static class customer_demographics_mutation_responseQuery extends Query<customer_demographics_mutation_responseQuery> {
        customer_demographics_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public customer_demographics_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public customer_demographics_mutation_responseQuery returning(customer_demographicsQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new customer_demographicsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "customer_demographics"
    */
    public static class customer_demographics_mutation_response extends AbstractResponse<customer_demographics_mutation_response> {
        public customer_demographics_mutation_response() {
        }

        public customer_demographics_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<customer_demographics> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_demographics(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customer_demographics_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public customer_demographics_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<customer_demographics> getReturning() {
            return (List<customer_demographics>) get("returning");
        }

        public customer_demographics_mutation_response setReturning(List<customer_demographics> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class customer_demographics_obj_rel_insert_input implements Serializable {
        private customer_demographics_insert_input data;

        private customer_demographics_on_conflict onConflict;

        public customer_demographics_obj_rel_insert_input(customer_demographics_insert_input data) {
            this.data = data;
        }

        public customer_demographics_insert_input getData() {
            return data;
        }

        public customer_demographics_obj_rel_insert_input setData(customer_demographics_insert_input data) {
            this.data = data;
            return this;
        }

        public customer_demographics_on_conflict getOnConflict() {
            return onConflict;
        }

        public customer_demographics_obj_rel_insert_input setOnConflict(customer_demographics_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customer_demographics_on_conflict implements Serializable {
        private customer_demographics_constraint constraint;

        private List<customer_demographics_update_column> updateColumns;

        public customer_demographics_on_conflict(customer_demographics_constraint constraint, List<customer_demographics_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public customer_demographics_constraint getConstraint() {
            return constraint;
        }

        public customer_demographics_on_conflict setConstraint(customer_demographics_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<customer_demographics_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public customer_demographics_on_conflict setUpdateColumns(List<customer_demographics_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customer_demographics_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class customer_demographics_order_by implements Serializable {
        private order_by customerDesc;

        private order_by customerTypeId;

        public order_by getCustomerDesc() {
            return customerDesc;
        }

        public customer_demographics_order_by setCustomerDesc(order_by customerDesc) {
            this.customerDesc = customerDesc;
            return this;
        }

        public order_by getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_demographics_order_by setCustomerTypeId(order_by customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerDesc != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_desc:");
                _queryBuilder.append(customerDesc.toString());
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                _queryBuilder.append(customerTypeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "customer_demographics"
    */
    public enum customer_demographics_select_column {
        CUSTOMER_DESC,

        CUSTOMER_TYPE_ID,

        UNKNOWN_VALUE;

        public static customer_demographics_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "customer_desc": {
                    return CUSTOMER_DESC;
                }

                case "customer_type_id": {
                    return CUSTOMER_TYPE_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CUSTOMER_DESC: {
                    return "customer_desc";
                }

                case CUSTOMER_TYPE_ID: {
                    return "customer_type_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class customer_demographics_set_input implements Serializable {
        private String customerDesc;

        private String customerTypeId;

        public String getCustomerDesc() {
            return customerDesc;
        }

        public customer_demographics_set_input setCustomerDesc(String customerDesc) {
            this.customerDesc = customerDesc;
            return this;
        }

        public String getCustomerTypeId() {
            return customerTypeId;
        }

        public customer_demographics_set_input setCustomerTypeId(String customerTypeId) {
            this.customerTypeId = customerTypeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerDesc != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_desc:");
                Query.appendQuotedString(_queryBuilder, customerDesc.toString());
            }

            if (customerTypeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_type_id:");
                Query.appendQuotedString(_queryBuilder, customerTypeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "customer_demographics"
    */
    public enum customer_demographics_update_column {
        CUSTOMER_DESC,

        CUSTOMER_TYPE_ID,

        UNKNOWN_VALUE;

        public static customer_demographics_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "customer_desc": {
                    return CUSTOMER_DESC;
                }

                case "customer_type_id": {
                    return CUSTOMER_TYPE_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CUSTOMER_DESC: {
                    return "customer_desc";
                }

                case CUSTOMER_TYPE_ID: {
                    return "customer_type_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface customersQueryDefinition {
        void define(customersQuery _queryBuilder);
    }

    /**
    * columns and relationships of "customers"
    */
    public static class customersQuery extends Query<customersQuery> {
        customersQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customersQuery address() {
            startField("address");

            return this;
        }

        public customersQuery city() {
            startField("city");

            return this;
        }

        public customersQuery companyName() {
            startField("company_name");

            return this;
        }

        public customersQuery contactName() {
            startField("contact_name");

            return this;
        }

        public customersQuery contactTitle() {
            startField("contact_title");

            return this;
        }

        public customersQuery country() {
            startField("country");

            return this;
        }

        public customersQuery customerId() {
            startField("customer_id");

            return this;
        }

        public customersQuery fax() {
            startField("fax");

            return this;
        }

        public customersQuery phone() {
            startField("phone");

            return this;
        }

        public customersQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public customersQuery region() {
            startField("region");

            return this;
        }
    }

    /**
    * columns and relationships of "customers"
    */
    public static class customers extends AbstractResponse<customers> {
        public customers() {
        }

        public customers(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "company_name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "contact_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customer_id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "fax": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customers";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public customers setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public customers setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public customers setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getContactName() {
            return (String) get("contact_name");
        }

        public customers setContactName(String arg) {
            optimisticData.put(getKey("contact_name"), arg);
            return this;
        }

        public String getContactTitle() {
            return (String) get("contact_title");
        }

        public customers setContactTitle(String arg) {
            optimisticData.put(getKey("contact_title"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public customers setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public String getCustomerId() {
            return (String) get("customer_id");
        }

        public customers setCustomerId(String arg) {
            optimisticData.put(getKey("customer_id"), arg);
            return this;
        }

        public String getFax() {
            return (String) get("fax");
        }

        public customers setFax(String arg) {
            optimisticData.put(getKey("fax"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public customers setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public customers setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public customers setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "city": return false;

                case "company_name": return false;

                case "contact_name": return false;

                case "contact_title": return false;

                case "country": return false;

                case "customer_id": return false;

                case "fax": return false;

                case "phone": return false;

                case "postal_code": return false;

                case "region": return false;

                default: return false;
            }
        }
    }

    public interface customers_aggregateQueryDefinition {
        void define(customers_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "customers"
    */
    public static class customers_aggregateQuery extends Query<customers_aggregateQuery> {
        customers_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customers_aggregateQuery aggregate(customers_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new customers_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public customers_aggregateQuery nodes(customersQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new customersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "customers"
    */
    public static class customers_aggregate extends AbstractResponse<customers_aggregate> {
        public customers_aggregate() {
        }

        public customers_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        customers_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<customers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customers_aggregate";
        }

        public customers_aggregate_fields getAggregate() {
            return (customers_aggregate_fields) get("aggregate");
        }

        public customers_aggregate setAggregate(customers_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<customers> getNodes() {
            return (List<customers>) get("nodes");
        }

        public customers_aggregate setNodes(List<customers> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface customers_aggregate_fieldsQueryDefinition {
        void define(customers_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "customers"
    */
    public static class customers_aggregate_fieldsQuery extends Query<customers_aggregate_fieldsQuery> {
        customers_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<customers_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public customers_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public customers_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public customers_aggregate_fieldsQuery max(customers_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new customers_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public customers_aggregate_fieldsQuery min(customers_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new customers_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "customers"
    */
    public static class customers_aggregate_fields extends AbstractResponse<customers_aggregate_fields> {
        public customers_aggregate_fields() {
        }

        public customers_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        customers_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        customers_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customers_aggregate_fields";
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public customers_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public customers_max_fields getMax() {
            return (customers_max_fields) get("max");
        }

        public customers_aggregate_fields setMax(customers_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public customers_min_fields getMin() {
            return (customers_min_fields) get("min");
        }

        public customers_aggregate_fields setMin(customers_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "count": return false;

                case "max": return true;

                case "min": return true;

                default: return false;
            }
        }
    }

    public static class customers_aggregate_order_by implements Serializable {
        private order_by count;

        private customers_max_order_by max;

        private customers_min_order_by min;

        public order_by getCount() {
            return count;
        }

        public customers_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public customers_max_order_by getMax() {
            return max;
        }

        public customers_aggregate_order_by setMax(customers_max_order_by max) {
            this.max = max;
            return this;
        }

        public customers_min_order_by getMin() {
            return min;
        }

        public customers_aggregate_order_by setMin(customers_min_order_by min) {
            this.min = min;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customers_arr_rel_insert_input implements Serializable {
        private List<customers_insert_input> data;

        private customers_on_conflict onConflict;

        public customers_arr_rel_insert_input(List<customers_insert_input> data) {
            this.data = data;
        }

        public List<customers_insert_input> getData() {
            return data;
        }

        public customers_arr_rel_insert_input setData(List<customers_insert_input> data) {
            this.data = data;
            return this;
        }

        public customers_on_conflict getOnConflict() {
            return onConflict;
        }

        public customers_arr_rel_insert_input setOnConflict(customers_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customers_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customers_bool_exp implements Serializable {
        private List<customers_bool_exp> And;

        private customers_bool_exp Not;

        private List<customers_bool_exp> Or;

        private varchar_comparison_exp address;

        private varchar_comparison_exp city;

        private varchar_comparison_exp companyName;

        private varchar_comparison_exp contactName;

        private varchar_comparison_exp contactTitle;

        private varchar_comparison_exp country;

        private bpchar_comparison_exp customerId;

        private varchar_comparison_exp fax;

        private varchar_comparison_exp phone;

        private varchar_comparison_exp postalCode;

        private varchar_comparison_exp region;

        public List<customers_bool_exp> getAnd() {
            return And;
        }

        public customers_bool_exp setAnd(List<customers_bool_exp> And) {
            this.And = And;
            return this;
        }

        public customers_bool_exp getNot() {
            return Not;
        }

        public customers_bool_exp setNot(customers_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<customers_bool_exp> getOr() {
            return Or;
        }

        public customers_bool_exp setOr(List<customers_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public varchar_comparison_exp getAddress() {
            return address;
        }

        public customers_bool_exp setAddress(varchar_comparison_exp address) {
            this.address = address;
            return this;
        }

        public varchar_comparison_exp getCity() {
            return city;
        }

        public customers_bool_exp setCity(varchar_comparison_exp city) {
            this.city = city;
            return this;
        }

        public varchar_comparison_exp getCompanyName() {
            return companyName;
        }

        public customers_bool_exp setCompanyName(varchar_comparison_exp companyName) {
            this.companyName = companyName;
            return this;
        }

        public varchar_comparison_exp getContactName() {
            return contactName;
        }

        public customers_bool_exp setContactName(varchar_comparison_exp contactName) {
            this.contactName = contactName;
            return this;
        }

        public varchar_comparison_exp getContactTitle() {
            return contactTitle;
        }

        public customers_bool_exp setContactTitle(varchar_comparison_exp contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public varchar_comparison_exp getCountry() {
            return country;
        }

        public customers_bool_exp setCountry(varchar_comparison_exp country) {
            this.country = country;
            return this;
        }

        public bpchar_comparison_exp getCustomerId() {
            return customerId;
        }

        public customers_bool_exp setCustomerId(bpchar_comparison_exp customerId) {
            this.customerId = customerId;
            return this;
        }

        public varchar_comparison_exp getFax() {
            return fax;
        }

        public customers_bool_exp setFax(varchar_comparison_exp fax) {
            this.fax = fax;
            return this;
        }

        public varchar_comparison_exp getPhone() {
            return phone;
        }

        public customers_bool_exp setPhone(varchar_comparison_exp phone) {
            this.phone = phone;
            return this;
        }

        public varchar_comparison_exp getPostalCode() {
            return postalCode;
        }

        public customers_bool_exp setPostalCode(varchar_comparison_exp postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public varchar_comparison_exp getRegion() {
            return region;
        }

        public customers_bool_exp setRegion(varchar_comparison_exp region) {
            this.region = region;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (customers_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (customers_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                address.appendTo(_queryBuilder);
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                city.appendTo(_queryBuilder);
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                companyName.appendTo(_queryBuilder);
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                contactName.appendTo(_queryBuilder);
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                contactTitle.appendTo(_queryBuilder);
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                country.appendTo(_queryBuilder);
            }

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                customerId.appendTo(_queryBuilder);
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                fax.appendTo(_queryBuilder);
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                phone.appendTo(_queryBuilder);
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                postalCode.appendTo(_queryBuilder);
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                region.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "customers"
    */
    public enum customers_constraint {
        PK_CUSTOMERS,

        UNKNOWN_VALUE;

        public static customers_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_customers": {
                    return PK_CUSTOMERS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_CUSTOMERS: {
                    return "pk_customers";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class customers_insert_input implements Serializable {
        private String address;

        private String city;

        private String companyName;

        private String contactName;

        private String contactTitle;

        private String country;

        private String customerId;

        private String fax;

        private String phone;

        private String postalCode;

        private String region;

        public String getAddress() {
            return address;
        }

        public customers_insert_input setAddress(String address) {
            this.address = address;
            return this;
        }

        public String getCity() {
            return city;
        }

        public customers_insert_input setCity(String city) {
            this.city = city;
            return this;
        }

        public String getCompanyName() {
            return companyName;
        }

        public customers_insert_input setCompanyName(String companyName) {
            this.companyName = companyName;
            return this;
        }

        public String getContactName() {
            return contactName;
        }

        public customers_insert_input setContactName(String contactName) {
            this.contactName = contactName;
            return this;
        }

        public String getContactTitle() {
            return contactTitle;
        }

        public customers_insert_input setContactTitle(String contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public String getCountry() {
            return country;
        }

        public customers_insert_input setCountry(String country) {
            this.country = country;
            return this;
        }

        public String getCustomerId() {
            return customerId;
        }

        public customers_insert_input setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public String getFax() {
            return fax;
        }

        public customers_insert_input setFax(String fax) {
            this.fax = fax;
            return this;
        }

        public String getPhone() {
            return phone;
        }

        public customers_insert_input setPhone(String phone) {
            this.phone = phone;
            return this;
        }

        public String getPostalCode() {
            return postalCode;
        }

        public customers_insert_input setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public String getRegion() {
            return region;
        }

        public customers_insert_input setRegion(String region) {
            this.region = region;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                Query.appendQuotedString(_queryBuilder, address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                Query.appendQuotedString(_queryBuilder, city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                Query.appendQuotedString(_queryBuilder, companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                Query.appendQuotedString(_queryBuilder, contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                Query.appendQuotedString(_queryBuilder, contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                Query.appendQuotedString(_queryBuilder, country.toString());
            }

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                Query.appendQuotedString(_queryBuilder, customerId.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                Query.appendQuotedString(_queryBuilder, fax.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                Query.appendQuotedString(_queryBuilder, phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                Query.appendQuotedString(_queryBuilder, postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                Query.appendQuotedString(_queryBuilder, region.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface customers_max_fieldsQueryDefinition {
        void define(customers_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class customers_max_fieldsQuery extends Query<customers_max_fieldsQuery> {
        customers_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customers_max_fieldsQuery address() {
            startField("address");

            return this;
        }

        public customers_max_fieldsQuery city() {
            startField("city");

            return this;
        }

        public customers_max_fieldsQuery companyName() {
            startField("company_name");

            return this;
        }

        public customers_max_fieldsQuery contactName() {
            startField("contact_name");

            return this;
        }

        public customers_max_fieldsQuery contactTitle() {
            startField("contact_title");

            return this;
        }

        public customers_max_fieldsQuery country() {
            startField("country");

            return this;
        }

        public customers_max_fieldsQuery fax() {
            startField("fax");

            return this;
        }

        public customers_max_fieldsQuery phone() {
            startField("phone");

            return this;
        }

        public customers_max_fieldsQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public customers_max_fieldsQuery region() {
            startField("region");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class customers_max_fields extends AbstractResponse<customers_max_fields> {
        public customers_max_fields() {
        }

        public customers_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "company_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "fax": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customers_max_fields";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public customers_max_fields setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public customers_max_fields setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public customers_max_fields setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getContactName() {
            return (String) get("contact_name");
        }

        public customers_max_fields setContactName(String arg) {
            optimisticData.put(getKey("contact_name"), arg);
            return this;
        }

        public String getContactTitle() {
            return (String) get("contact_title");
        }

        public customers_max_fields setContactTitle(String arg) {
            optimisticData.put(getKey("contact_title"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public customers_max_fields setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public String getFax() {
            return (String) get("fax");
        }

        public customers_max_fields setFax(String arg) {
            optimisticData.put(getKey("fax"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public customers_max_fields setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public customers_max_fields setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public customers_max_fields setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "city": return false;

                case "company_name": return false;

                case "contact_name": return false;

                case "contact_title": return false;

                case "country": return false;

                case "fax": return false;

                case "phone": return false;

                case "postal_code": return false;

                case "region": return false;

                default: return false;
            }
        }
    }

    public static class customers_max_order_by implements Serializable {
        private order_by address;

        private order_by city;

        private order_by companyName;

        private order_by contactName;

        private order_by contactTitle;

        private order_by country;

        private order_by fax;

        private order_by phone;

        private order_by postalCode;

        private order_by region;

        public order_by getAddress() {
            return address;
        }

        public customers_max_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public customers_max_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCompanyName() {
            return companyName;
        }

        public customers_max_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getContactName() {
            return contactName;
        }

        public customers_max_order_by setContactName(order_by contactName) {
            this.contactName = contactName;
            return this;
        }

        public order_by getContactTitle() {
            return contactTitle;
        }

        public customers_max_order_by setContactTitle(order_by contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public customers_max_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getFax() {
            return fax;
        }

        public customers_max_order_by setFax(order_by fax) {
            this.fax = fax;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public customers_max_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public customers_max_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public customers_max_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                _queryBuilder.append(contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                _queryBuilder.append(contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                _queryBuilder.append(fax.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface customers_min_fieldsQueryDefinition {
        void define(customers_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class customers_min_fieldsQuery extends Query<customers_min_fieldsQuery> {
        customers_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public customers_min_fieldsQuery address() {
            startField("address");

            return this;
        }

        public customers_min_fieldsQuery city() {
            startField("city");

            return this;
        }

        public customers_min_fieldsQuery companyName() {
            startField("company_name");

            return this;
        }

        public customers_min_fieldsQuery contactName() {
            startField("contact_name");

            return this;
        }

        public customers_min_fieldsQuery contactTitle() {
            startField("contact_title");

            return this;
        }

        public customers_min_fieldsQuery country() {
            startField("country");

            return this;
        }

        public customers_min_fieldsQuery fax() {
            startField("fax");

            return this;
        }

        public customers_min_fieldsQuery phone() {
            startField("phone");

            return this;
        }

        public customers_min_fieldsQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public customers_min_fieldsQuery region() {
            startField("region");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class customers_min_fields extends AbstractResponse<customers_min_fields> {
        public customers_min_fields() {
        }

        public customers_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "company_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "fax": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customers_min_fields";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public customers_min_fields setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public customers_min_fields setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public customers_min_fields setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getContactName() {
            return (String) get("contact_name");
        }

        public customers_min_fields setContactName(String arg) {
            optimisticData.put(getKey("contact_name"), arg);
            return this;
        }

        public String getContactTitle() {
            return (String) get("contact_title");
        }

        public customers_min_fields setContactTitle(String arg) {
            optimisticData.put(getKey("contact_title"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public customers_min_fields setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public String getFax() {
            return (String) get("fax");
        }

        public customers_min_fields setFax(String arg) {
            optimisticData.put(getKey("fax"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public customers_min_fields setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public customers_min_fields setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public customers_min_fields setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "city": return false;

                case "company_name": return false;

                case "contact_name": return false;

                case "contact_title": return false;

                case "country": return false;

                case "fax": return false;

                case "phone": return false;

                case "postal_code": return false;

                case "region": return false;

                default: return false;
            }
        }
    }

    public static class customers_min_order_by implements Serializable {
        private order_by address;

        private order_by city;

        private order_by companyName;

        private order_by contactName;

        private order_by contactTitle;

        private order_by country;

        private order_by fax;

        private order_by phone;

        private order_by postalCode;

        private order_by region;

        public order_by getAddress() {
            return address;
        }

        public customers_min_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public customers_min_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCompanyName() {
            return companyName;
        }

        public customers_min_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getContactName() {
            return contactName;
        }

        public customers_min_order_by setContactName(order_by contactName) {
            this.contactName = contactName;
            return this;
        }

        public order_by getContactTitle() {
            return contactTitle;
        }

        public customers_min_order_by setContactTitle(order_by contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public customers_min_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getFax() {
            return fax;
        }

        public customers_min_order_by setFax(order_by fax) {
            this.fax = fax;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public customers_min_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public customers_min_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public customers_min_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                _queryBuilder.append(contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                _queryBuilder.append(contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                _queryBuilder.append(fax.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface customers_mutation_responseQueryDefinition {
        void define(customers_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "customers"
    */
    public static class customers_mutation_responseQuery extends Query<customers_mutation_responseQuery> {
        customers_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public customers_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public customers_mutation_responseQuery returning(customersQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new customersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "customers"
    */
    public static class customers_mutation_response extends AbstractResponse<customers_mutation_response> {
        public customers_mutation_response() {
        }

        public customers_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<customers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "customers_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public customers_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<customers> getReturning() {
            return (List<customers>) get("returning");
        }

        public customers_mutation_response setReturning(List<customers> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class customers_obj_rel_insert_input implements Serializable {
        private customers_insert_input data;

        private customers_on_conflict onConflict;

        public customers_obj_rel_insert_input(customers_insert_input data) {
            this.data = data;
        }

        public customers_insert_input getData() {
            return data;
        }

        public customers_obj_rel_insert_input setData(customers_insert_input data) {
            this.data = data;
            return this;
        }

        public customers_on_conflict getOnConflict() {
            return onConflict;
        }

        public customers_obj_rel_insert_input setOnConflict(customers_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class customers_on_conflict implements Serializable {
        private customers_constraint constraint;

        private List<customers_update_column> updateColumns;

        public customers_on_conflict(customers_constraint constraint, List<customers_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public customers_constraint getConstraint() {
            return constraint;
        }

        public customers_on_conflict setConstraint(customers_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<customers_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public customers_on_conflict setUpdateColumns(List<customers_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customers_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class customers_order_by implements Serializable {
        private order_by address;

        private order_by city;

        private order_by companyName;

        private order_by contactName;

        private order_by contactTitle;

        private order_by country;

        private order_by customerId;

        private order_by fax;

        private order_by phone;

        private order_by postalCode;

        private order_by region;

        public order_by getAddress() {
            return address;
        }

        public customers_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public customers_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCompanyName() {
            return companyName;
        }

        public customers_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getContactName() {
            return contactName;
        }

        public customers_order_by setContactName(order_by contactName) {
            this.contactName = contactName;
            return this;
        }

        public order_by getContactTitle() {
            return contactTitle;
        }

        public customers_order_by setContactTitle(order_by contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public customers_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getCustomerId() {
            return customerId;
        }

        public customers_order_by setCustomerId(order_by customerId) {
            this.customerId = customerId;
            return this;
        }

        public order_by getFax() {
            return fax;
        }

        public customers_order_by setFax(order_by fax) {
            this.fax = fax;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public customers_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public customers_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public customers_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                _queryBuilder.append(contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                _queryBuilder.append(contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                _queryBuilder.append(customerId.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                _queryBuilder.append(fax.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "customers"
    */
    public enum customers_select_column {
        ADDRESS,

        CITY,

        COMPANY_NAME,

        CONTACT_NAME,

        CONTACT_TITLE,

        COUNTRY,

        CUSTOMER_ID,

        FAX,

        PHONE,

        POSTAL_CODE,

        REGION,

        UNKNOWN_VALUE;

        public static customers_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "address": {
                    return ADDRESS;
                }

                case "city": {
                    return CITY;
                }

                case "company_name": {
                    return COMPANY_NAME;
                }

                case "contact_name": {
                    return CONTACT_NAME;
                }

                case "contact_title": {
                    return CONTACT_TITLE;
                }

                case "country": {
                    return COUNTRY;
                }

                case "customer_id": {
                    return CUSTOMER_ID;
                }

                case "fax": {
                    return FAX;
                }

                case "phone": {
                    return PHONE;
                }

                case "postal_code": {
                    return POSTAL_CODE;
                }

                case "region": {
                    return REGION;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ADDRESS: {
                    return "address";
                }

                case CITY: {
                    return "city";
                }

                case COMPANY_NAME: {
                    return "company_name";
                }

                case CONTACT_NAME: {
                    return "contact_name";
                }

                case CONTACT_TITLE: {
                    return "contact_title";
                }

                case COUNTRY: {
                    return "country";
                }

                case CUSTOMER_ID: {
                    return "customer_id";
                }

                case FAX: {
                    return "fax";
                }

                case PHONE: {
                    return "phone";
                }

                case POSTAL_CODE: {
                    return "postal_code";
                }

                case REGION: {
                    return "region";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class customers_set_input implements Serializable {
        private String address;

        private String city;

        private String companyName;

        private String contactName;

        private String contactTitle;

        private String country;

        private String customerId;

        private String fax;

        private String phone;

        private String postalCode;

        private String region;

        public String getAddress() {
            return address;
        }

        public customers_set_input setAddress(String address) {
            this.address = address;
            return this;
        }

        public String getCity() {
            return city;
        }

        public customers_set_input setCity(String city) {
            this.city = city;
            return this;
        }

        public String getCompanyName() {
            return companyName;
        }

        public customers_set_input setCompanyName(String companyName) {
            this.companyName = companyName;
            return this;
        }

        public String getContactName() {
            return contactName;
        }

        public customers_set_input setContactName(String contactName) {
            this.contactName = contactName;
            return this;
        }

        public String getContactTitle() {
            return contactTitle;
        }

        public customers_set_input setContactTitle(String contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public String getCountry() {
            return country;
        }

        public customers_set_input setCountry(String country) {
            this.country = country;
            return this;
        }

        public String getCustomerId() {
            return customerId;
        }

        public customers_set_input setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public String getFax() {
            return fax;
        }

        public customers_set_input setFax(String fax) {
            this.fax = fax;
            return this;
        }

        public String getPhone() {
            return phone;
        }

        public customers_set_input setPhone(String phone) {
            this.phone = phone;
            return this;
        }

        public String getPostalCode() {
            return postalCode;
        }

        public customers_set_input setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public String getRegion() {
            return region;
        }

        public customers_set_input setRegion(String region) {
            this.region = region;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                Query.appendQuotedString(_queryBuilder, address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                Query.appendQuotedString(_queryBuilder, city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                Query.appendQuotedString(_queryBuilder, companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                Query.appendQuotedString(_queryBuilder, contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                Query.appendQuotedString(_queryBuilder, contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                Query.appendQuotedString(_queryBuilder, country.toString());
            }

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                Query.appendQuotedString(_queryBuilder, customerId.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                Query.appendQuotedString(_queryBuilder, fax.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                Query.appendQuotedString(_queryBuilder, phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                Query.appendQuotedString(_queryBuilder, postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                Query.appendQuotedString(_queryBuilder, region.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "customers"
    */
    public enum customers_update_column {
        ADDRESS,

        CITY,

        COMPANY_NAME,

        CONTACT_NAME,

        CONTACT_TITLE,

        COUNTRY,

        CUSTOMER_ID,

        FAX,

        PHONE,

        POSTAL_CODE,

        REGION,

        UNKNOWN_VALUE;

        public static customers_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "address": {
                    return ADDRESS;
                }

                case "city": {
                    return CITY;
                }

                case "company_name": {
                    return COMPANY_NAME;
                }

                case "contact_name": {
                    return CONTACT_NAME;
                }

                case "contact_title": {
                    return CONTACT_TITLE;
                }

                case "country": {
                    return COUNTRY;
                }

                case "customer_id": {
                    return CUSTOMER_ID;
                }

                case "fax": {
                    return FAX;
                }

                case "phone": {
                    return PHONE;
                }

                case "postal_code": {
                    return POSTAL_CODE;
                }

                case "region": {
                    return REGION;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ADDRESS: {
                    return "address";
                }

                case CITY: {
                    return "city";
                }

                case COMPANY_NAME: {
                    return "company_name";
                }

                case CONTACT_NAME: {
                    return "contact_name";
                }

                case CONTACT_TITLE: {
                    return "contact_title";
                }

                case COUNTRY: {
                    return "country";
                }

                case CUSTOMER_ID: {
                    return "customer_id";
                }

                case FAX: {
                    return "fax";
                }

                case PHONE: {
                    return "phone";
                }

                case POSTAL_CODE: {
                    return "postal_code";
                }

                case REGION: {
                    return "region";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class date_comparison_exp implements Serializable {
        private String Eq;

        private String Gt;

        private String Gte;

        private List<String> In;

        private Boolean IsNull;

        private String Lt;

        private String Lte;

        private String Neq;

        private List<String> Nin;

        public String getEq() {
            return Eq;
        }

        public date_comparison_exp setEq(String Eq) {
            this.Eq = Eq;
            return this;
        }

        public String getGt() {
            return Gt;
        }

        public date_comparison_exp setGt(String Gt) {
            this.Gt = Gt;
            return this;
        }

        public String getGte() {
            return Gte;
        }

        public date_comparison_exp setGte(String Gte) {
            this.Gte = Gte;
            return this;
        }

        public List<String> getIn() {
            return In;
        }

        public date_comparison_exp setIn(List<String> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public date_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public String getLt() {
            return Lt;
        }

        public date_comparison_exp setLt(String Lt) {
            this.Lt = Lt;
            return this;
        }

        public String getLte() {
            return Lte;
        }

        public date_comparison_exp setLte(String Lte) {
            this.Lte = Lte;
            return this;
        }

        public String getNeq() {
            return Neq;
        }

        public date_comparison_exp setNeq(String Neq) {
            this.Neq = Neq;
            return this;
        }

        public List<String> getNin() {
            return Nin;
        }

        public date_comparison_exp setNin(List<String> Nin) {
            this.Nin = Nin;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                Query.appendQuotedString(_queryBuilder, Eq.toString());
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                Query.appendQuotedString(_queryBuilder, Gt.toString());
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                Query.appendQuotedString(_queryBuilder, Gte.toString());
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                Query.appendQuotedString(_queryBuilder, Lt.toString());
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                Query.appendQuotedString(_queryBuilder, Lte.toString());
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                Query.appendQuotedString(_queryBuilder, Neq.toString());
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territoriesQueryDefinition {
        void define(employee_territoriesQuery _queryBuilder);
    }

    /**
    * columns and relationships of "employee_territories"
    */
    public static class employee_territoriesQuery extends Query<employee_territoriesQuery> {
        employee_territoriesQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territoriesQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employee_territoriesQuery territoryId() {
            startField("territory_id");

            return this;
        }
    }

    /**
    * columns and relationships of "employee_territories"
    */
    public static class employee_territories extends AbstractResponse<employee_territories> {
        public employee_territories() {
        }

        public employee_territories(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "territory_id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employee_territories setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public String getTerritoryId() {
            return (String) get("territory_id");
        }

        public employee_territories setTerritoryId(String arg) {
            optimisticData.put(getKey("territory_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "territory_id": return false;

                default: return false;
            }
        }
    }

    public interface employee_territories_aggregateQueryDefinition {
        void define(employee_territories_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "employee_territories"
    */
    public static class employee_territories_aggregateQuery extends Query<employee_territories_aggregateQuery> {
        employee_territories_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_aggregateQuery aggregate(employee_territories_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregateQuery nodes(employee_territoriesQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new employee_territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "employee_territories"
    */
    public static class employee_territories_aggregate extends AbstractResponse<employee_territories_aggregate> {
        public employee_territories_aggregate() {
        }

        public employee_territories_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        employee_territories_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<employee_territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employee_territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_aggregate";
        }

        public employee_territories_aggregate_fields getAggregate() {
            return (employee_territories_aggregate_fields) get("aggregate");
        }

        public employee_territories_aggregate setAggregate(employee_territories_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<employee_territories> getNodes() {
            return (List<employee_territories>) get("nodes");
        }

        public employee_territories_aggregate setNodes(List<employee_territories> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface employee_territories_aggregate_fieldsQueryDefinition {
        void define(employee_territories_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "employee_territories"
    */
    public static class employee_territories_aggregate_fieldsQuery extends Query<employee_territories_aggregate_fieldsQuery> {
        employee_territories_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_aggregate_fieldsQuery avg(employee_territories_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<employee_territories_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public employee_territories_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public employee_territories_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public employee_territories_aggregate_fieldsQuery max(employee_territories_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery min(employee_territories_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery stddev(employee_territories_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery stddevPop(employee_territories_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery stddevSamp(employee_territories_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery sum(employee_territories_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery varPop(employee_territories_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery varSamp(employee_territories_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employee_territories_aggregate_fieldsQuery variance(employee_territories_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "employee_territories"
    */
    public static class employee_territories_aggregate_fields extends AbstractResponse<employee_territories_aggregate_fields> {
        public employee_territories_aggregate_fields() {
        }

        public employee_territories_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        employee_territories_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        employee_territories_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        employee_territories_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        employee_territories_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        employee_territories_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        employee_territories_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        employee_territories_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        employee_territories_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        employee_territories_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        employee_territories_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_aggregate_fields";
        }

        public employee_territories_avg_fields getAvg() {
            return (employee_territories_avg_fields) get("avg");
        }

        public employee_territories_aggregate_fields setAvg(employee_territories_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public employee_territories_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public employee_territories_max_fields getMax() {
            return (employee_territories_max_fields) get("max");
        }

        public employee_territories_aggregate_fields setMax(employee_territories_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public employee_territories_min_fields getMin() {
            return (employee_territories_min_fields) get("min");
        }

        public employee_territories_aggregate_fields setMin(employee_territories_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public employee_territories_stddev_fields getStddev() {
            return (employee_territories_stddev_fields) get("stddev");
        }

        public employee_territories_aggregate_fields setStddev(employee_territories_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public employee_territories_stddev_pop_fields getStddevPop() {
            return (employee_territories_stddev_pop_fields) get("stddev_pop");
        }

        public employee_territories_aggregate_fields setStddevPop(employee_territories_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public employee_territories_stddev_samp_fields getStddevSamp() {
            return (employee_territories_stddev_samp_fields) get("stddev_samp");
        }

        public employee_territories_aggregate_fields setStddevSamp(employee_territories_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public employee_territories_sum_fields getSum() {
            return (employee_territories_sum_fields) get("sum");
        }

        public employee_territories_aggregate_fields setSum(employee_territories_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public employee_territories_var_pop_fields getVarPop() {
            return (employee_territories_var_pop_fields) get("var_pop");
        }

        public employee_territories_aggregate_fields setVarPop(employee_territories_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public employee_territories_var_samp_fields getVarSamp() {
            return (employee_territories_var_samp_fields) get("var_samp");
        }

        public employee_territories_aggregate_fields setVarSamp(employee_territories_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public employee_territories_variance_fields getVariance() {
            return (employee_territories_variance_fields) get("variance");
        }

        public employee_territories_aggregate_fields setVariance(employee_territories_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class employee_territories_aggregate_order_by implements Serializable {
        private employee_territories_avg_order_by avg;

        private order_by count;

        private employee_territories_max_order_by max;

        private employee_territories_min_order_by min;

        private employee_territories_stddev_order_by stddev;

        private employee_territories_stddev_pop_order_by stddevPop;

        private employee_territories_stddev_samp_order_by stddevSamp;

        private employee_territories_sum_order_by sum;

        private employee_territories_var_pop_order_by varPop;

        private employee_territories_var_samp_order_by varSamp;

        private employee_territories_variance_order_by variance;

        public employee_territories_avg_order_by getAvg() {
            return avg;
        }

        public employee_territories_aggregate_order_by setAvg(employee_territories_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public employee_territories_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public employee_territories_max_order_by getMax() {
            return max;
        }

        public employee_territories_aggregate_order_by setMax(employee_territories_max_order_by max) {
            this.max = max;
            return this;
        }

        public employee_territories_min_order_by getMin() {
            return min;
        }

        public employee_territories_aggregate_order_by setMin(employee_territories_min_order_by min) {
            this.min = min;
            return this;
        }

        public employee_territories_stddev_order_by getStddev() {
            return stddev;
        }

        public employee_territories_aggregate_order_by setStddev(employee_territories_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public employee_territories_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public employee_territories_aggregate_order_by setStddevPop(employee_territories_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public employee_territories_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public employee_territories_aggregate_order_by setStddevSamp(employee_territories_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public employee_territories_sum_order_by getSum() {
            return sum;
        }

        public employee_territories_aggregate_order_by setSum(employee_territories_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public employee_territories_var_pop_order_by getVarPop() {
            return varPop;
        }

        public employee_territories_aggregate_order_by setVarPop(employee_territories_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public employee_territories_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public employee_territories_aggregate_order_by setVarSamp(employee_territories_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public employee_territories_variance_order_by getVariance() {
            return variance;
        }

        public employee_territories_aggregate_order_by setVariance(employee_territories_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class employee_territories_arr_rel_insert_input implements Serializable {
        private List<employee_territories_insert_input> data;

        private employee_territories_on_conflict onConflict;

        public employee_territories_arr_rel_insert_input(List<employee_territories_insert_input> data) {
            this.data = data;
        }

        public List<employee_territories_insert_input> getData() {
            return data;
        }

        public employee_territories_arr_rel_insert_input setData(List<employee_territories_insert_input> data) {
            this.data = data;
            return this;
        }

        public employee_territories_on_conflict getOnConflict() {
            return onConflict;
        }

        public employee_territories_arr_rel_insert_input setOnConflict(employee_territories_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (employee_territories_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_avg_fieldsQueryDefinition {
        void define(employee_territories_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class employee_territories_avg_fieldsQuery extends Query<employee_territories_avg_fieldsQuery> {
        employee_territories_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_avg_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class employee_territories_avg_fields extends AbstractResponse<employee_territories_avg_fields> {
        public employee_territories_avg_fields() {
        }

        public employee_territories_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_avg_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employee_territories_avg_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_avg_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_avg_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class employee_territories_bool_exp implements Serializable {
        private List<employee_territories_bool_exp> And;

        private employee_territories_bool_exp Not;

        private List<employee_territories_bool_exp> Or;

        private Int_comparison_exp employeeId;

        private varchar_comparison_exp territoryId;

        public List<employee_territories_bool_exp> getAnd() {
            return And;
        }

        public employee_territories_bool_exp setAnd(List<employee_territories_bool_exp> And) {
            this.And = And;
            return this;
        }

        public employee_territories_bool_exp getNot() {
            return Not;
        }

        public employee_territories_bool_exp setNot(employee_territories_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<employee_territories_bool_exp> getOr() {
            return Or;
        }

        public employee_territories_bool_exp setOr(List<employee_territories_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public Int_comparison_exp getEmployeeId() {
            return employeeId;
        }

        public employee_territories_bool_exp setEmployeeId(Int_comparison_exp employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public varchar_comparison_exp getTerritoryId() {
            return territoryId;
        }

        public employee_territories_bool_exp setTerritoryId(varchar_comparison_exp territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (employee_territories_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (employee_territories_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                employeeId.appendTo(_queryBuilder);
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                territoryId.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "employee_territories"
    */
    public enum employee_territories_constraint {
        PK_EMPLOYEE_TERRITORIES,

        UNKNOWN_VALUE;

        public static employee_territories_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_employee_territories": {
                    return PK_EMPLOYEE_TERRITORIES;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_EMPLOYEE_TERRITORIES: {
                    return "pk_employee_territories";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class employee_territories_inc_input implements Serializable {
        private Integer employeeId;

        public Integer getEmployeeId() {
            return employeeId;
        }

        public employee_territories_inc_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            _queryBuilder.append('}');
        }
    }

    public static class employee_territories_insert_input implements Serializable {
        private Integer employeeId;

        private String territoryId;

        public Integer getEmployeeId() {
            return employeeId;
        }

        public employee_territories_insert_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public String getTerritoryId() {
            return territoryId;
        }

        public employee_territories_insert_input setTerritoryId(String territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                Query.appendQuotedString(_queryBuilder, territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_max_fieldsQueryDefinition {
        void define(employee_territories_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class employee_territories_max_fieldsQuery extends Query<employee_territories_max_fieldsQuery> {
        employee_territories_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_max_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employee_territories_max_fieldsQuery territoryId() {
            startField("territory_id");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class employee_territories_max_fields extends AbstractResponse<employee_territories_max_fields> {
        public employee_territories_max_fields() {
        }

        public employee_territories_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "territory_id": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_max_fields";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employee_territories_max_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public String getTerritoryId() {
            return (String) get("territory_id");
        }

        public employee_territories_max_fields setTerritoryId(String arg) {
            optimisticData.put(getKey("territory_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "territory_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_max_order_by implements Serializable {
        private order_by employeeId;

        private order_by territoryId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_max_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getTerritoryId() {
            return territoryId;
        }

        public employee_territories_max_order_by setTerritoryId(order_by territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                _queryBuilder.append(territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_min_fieldsQueryDefinition {
        void define(employee_territories_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class employee_territories_min_fieldsQuery extends Query<employee_territories_min_fieldsQuery> {
        employee_territories_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_min_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employee_territories_min_fieldsQuery territoryId() {
            startField("territory_id");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class employee_territories_min_fields extends AbstractResponse<employee_territories_min_fields> {
        public employee_territories_min_fields() {
        }

        public employee_territories_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "territory_id": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_min_fields";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employee_territories_min_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public String getTerritoryId() {
            return (String) get("territory_id");
        }

        public employee_territories_min_fields setTerritoryId(String arg) {
            optimisticData.put(getKey("territory_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "territory_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_min_order_by implements Serializable {
        private order_by employeeId;

        private order_by territoryId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_min_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getTerritoryId() {
            return territoryId;
        }

        public employee_territories_min_order_by setTerritoryId(order_by territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                _queryBuilder.append(territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_mutation_responseQueryDefinition {
        void define(employee_territories_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "employee_territories"
    */
    public static class employee_territories_mutation_responseQuery extends Query<employee_territories_mutation_responseQuery> {
        employee_territories_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public employee_territories_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public employee_territories_mutation_responseQuery returning(employee_territoriesQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new employee_territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "employee_territories"
    */
    public static class employee_territories_mutation_response extends AbstractResponse<employee_territories_mutation_response> {
        public employee_territories_mutation_response() {
        }

        public employee_territories_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<employee_territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employee_territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public employee_territories_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<employee_territories> getReturning() {
            return (List<employee_territories>) get("returning");
        }

        public employee_territories_mutation_response setReturning(List<employee_territories> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class employee_territories_obj_rel_insert_input implements Serializable {
        private employee_territories_insert_input data;

        private employee_territories_on_conflict onConflict;

        public employee_territories_obj_rel_insert_input(employee_territories_insert_input data) {
            this.data = data;
        }

        public employee_territories_insert_input getData() {
            return data;
        }

        public employee_territories_obj_rel_insert_input setData(employee_territories_insert_input data) {
            this.data = data;
            return this;
        }

        public employee_territories_on_conflict getOnConflict() {
            return onConflict;
        }

        public employee_territories_obj_rel_insert_input setOnConflict(employee_territories_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class employee_territories_on_conflict implements Serializable {
        private employee_territories_constraint constraint;

        private List<employee_territories_update_column> updateColumns;

        public employee_territories_on_conflict(employee_territories_constraint constraint, List<employee_territories_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public employee_territories_constraint getConstraint() {
            return constraint;
        }

        public employee_territories_on_conflict setConstraint(employee_territories_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<employee_territories_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public employee_territories_on_conflict setUpdateColumns(List<employee_territories_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (employee_territories_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class employee_territories_order_by implements Serializable {
        private order_by employeeId;

        private order_by territoryId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getTerritoryId() {
            return territoryId;
        }

        public employee_territories_order_by setTerritoryId(order_by territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                _queryBuilder.append(territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "employee_territories"
    */
    public enum employee_territories_select_column {
        EMPLOYEE_ID,

        TERRITORY_ID,

        UNKNOWN_VALUE;

        public static employee_territories_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "employee_id": {
                    return EMPLOYEE_ID;
                }

                case "territory_id": {
                    return TERRITORY_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case EMPLOYEE_ID: {
                    return "employee_id";
                }

                case TERRITORY_ID: {
                    return "territory_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class employee_territories_set_input implements Serializable {
        private Integer employeeId;

        private String territoryId;

        public Integer getEmployeeId() {
            return employeeId;
        }

        public employee_territories_set_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public String getTerritoryId() {
            return territoryId;
        }

        public employee_territories_set_input setTerritoryId(String territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                Query.appendQuotedString(_queryBuilder, territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_stddev_fieldsQueryDefinition {
        void define(employee_territories_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class employee_territories_stddev_fieldsQuery extends Query<employee_territories_stddev_fieldsQuery> {
        employee_territories_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_stddev_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class employee_territories_stddev_fields extends AbstractResponse<employee_territories_stddev_fields> {
        public employee_territories_stddev_fields() {
        }

        public employee_territories_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_stddev_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employee_territories_stddev_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_stddev_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_stddev_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_stddev_pop_fieldsQueryDefinition {
        void define(employee_territories_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class employee_territories_stddev_pop_fieldsQuery extends Query<employee_territories_stddev_pop_fieldsQuery> {
        employee_territories_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_stddev_pop_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class employee_territories_stddev_pop_fields extends AbstractResponse<employee_territories_stddev_pop_fields> {
        public employee_territories_stddev_pop_fields() {
        }

        public employee_territories_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_stddev_pop_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employee_territories_stddev_pop_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_stddev_pop_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_stddev_pop_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_stddev_samp_fieldsQueryDefinition {
        void define(employee_territories_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class employee_territories_stddev_samp_fieldsQuery extends Query<employee_territories_stddev_samp_fieldsQuery> {
        employee_territories_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_stddev_samp_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class employee_territories_stddev_samp_fields extends AbstractResponse<employee_territories_stddev_samp_fields> {
        public employee_territories_stddev_samp_fields() {
        }

        public employee_territories_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_stddev_samp_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employee_territories_stddev_samp_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_stddev_samp_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_stddev_samp_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_sum_fieldsQueryDefinition {
        void define(employee_territories_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class employee_territories_sum_fieldsQuery extends Query<employee_territories_sum_fieldsQuery> {
        employee_territories_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_sum_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class employee_territories_sum_fields extends AbstractResponse<employee_territories_sum_fields> {
        public employee_territories_sum_fields() {
        }

        public employee_territories_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_sum_fields";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employee_territories_sum_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_sum_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_sum_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "employee_territories"
    */
    public enum employee_territories_update_column {
        EMPLOYEE_ID,

        TERRITORY_ID,

        UNKNOWN_VALUE;

        public static employee_territories_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "employee_id": {
                    return EMPLOYEE_ID;
                }

                case "territory_id": {
                    return TERRITORY_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case EMPLOYEE_ID: {
                    return "employee_id";
                }

                case TERRITORY_ID: {
                    return "territory_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface employee_territories_var_pop_fieldsQueryDefinition {
        void define(employee_territories_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class employee_territories_var_pop_fieldsQuery extends Query<employee_territories_var_pop_fieldsQuery> {
        employee_territories_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_var_pop_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class employee_territories_var_pop_fields extends AbstractResponse<employee_territories_var_pop_fields> {
        public employee_territories_var_pop_fields() {
        }

        public employee_territories_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_var_pop_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employee_territories_var_pop_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_var_pop_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_var_pop_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_var_samp_fieldsQueryDefinition {
        void define(employee_territories_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class employee_territories_var_samp_fieldsQuery extends Query<employee_territories_var_samp_fieldsQuery> {
        employee_territories_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_var_samp_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class employee_territories_var_samp_fields extends AbstractResponse<employee_territories_var_samp_fields> {
        public employee_territories_var_samp_fields() {
        }

        public employee_territories_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_var_samp_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employee_territories_var_samp_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_var_samp_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_var_samp_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employee_territories_variance_fieldsQueryDefinition {
        void define(employee_territories_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class employee_territories_variance_fieldsQuery extends Query<employee_territories_variance_fieldsQuery> {
        employee_territories_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employee_territories_variance_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class employee_territories_variance_fields extends AbstractResponse<employee_territories_variance_fields> {
        public employee_territories_variance_fields() {
        }

        public employee_territories_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employee_territories_variance_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employee_territories_variance_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                default: return false;
            }
        }
    }

    public static class employee_territories_variance_order_by implements Serializable {
        private order_by employeeId;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employee_territories_variance_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employeesQueryDefinition {
        void define(employeesQuery _queryBuilder);
    }

    /**
    * columns and relationships of "employees"
    */
    public static class employeesQuery extends Query<employeesQuery> {
        employeesQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employeesQuery address() {
            startField("address");

            return this;
        }

        public employeesQuery birthDate() {
            startField("birth_date");

            return this;
        }

        public employeesQuery city() {
            startField("city");

            return this;
        }

        public employeesQuery country() {
            startField("country");

            return this;
        }

        public employeesQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employeesQuery extension() {
            startField("extension");

            return this;
        }

        public employeesQuery firstName() {
            startField("first_name");

            return this;
        }

        public employeesQuery hireDate() {
            startField("hire_date");

            return this;
        }

        public employeesQuery homePhone() {
            startField("home_phone");

            return this;
        }

        public employeesQuery lastName() {
            startField("last_name");

            return this;
        }

        public employeesQuery notes() {
            startField("notes");

            return this;
        }

        public employeesQuery photo() {
            startField("photo");

            return this;
        }

        public employeesQuery photoPath() {
            startField("photo_path");

            return this;
        }

        public employeesQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public employeesQuery region() {
            startField("region");

            return this;
        }

        public employeesQuery reportsTo() {
            startField("reports_to");

            return this;
        }

        public employeesQuery title() {
            startField("title");

            return this;
        }

        public employeesQuery titleOfCourtesy() {
            startField("title_of_courtesy");

            return this;
        }
    }

    /**
    * columns and relationships of "employees"
    */
    public static class employees extends AbstractResponse<employees> {
        public employees() {
        }

        public employees(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "birth_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employee_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "extension": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "first_name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "hire_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "home_phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "last_name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "notes": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "photo": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "photo_path": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title_of_courtesy": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public employees setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getBirthDate() {
            return (String) get("birth_date");
        }

        public employees setBirthDate(String arg) {
            optimisticData.put(getKey("birth_date"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public employees setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public employees setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employees setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public String getExtension() {
            return (String) get("extension");
        }

        public employees setExtension(String arg) {
            optimisticData.put(getKey("extension"), arg);
            return this;
        }

        public String getFirstName() {
            return (String) get("first_name");
        }

        public employees setFirstName(String arg) {
            optimisticData.put(getKey("first_name"), arg);
            return this;
        }

        public String getHireDate() {
            return (String) get("hire_date");
        }

        public employees setHireDate(String arg) {
            optimisticData.put(getKey("hire_date"), arg);
            return this;
        }

        public String getHomePhone() {
            return (String) get("home_phone");
        }

        public employees setHomePhone(String arg) {
            optimisticData.put(getKey("home_phone"), arg);
            return this;
        }

        public String getLastName() {
            return (String) get("last_name");
        }

        public employees setLastName(String arg) {
            optimisticData.put(getKey("last_name"), arg);
            return this;
        }

        public String getNotes() {
            return (String) get("notes");
        }

        public employees setNotes(String arg) {
            optimisticData.put(getKey("notes"), arg);
            return this;
        }

        public String getPhoto() {
            return (String) get("photo");
        }

        public employees setPhoto(String arg) {
            optimisticData.put(getKey("photo"), arg);
            return this;
        }

        public String getPhotoPath() {
            return (String) get("photo_path");
        }

        public employees setPhotoPath(String arg) {
            optimisticData.put(getKey("photo_path"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public employees setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public employees setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public Integer getReportsTo() {
            return (Integer) get("reports_to");
        }

        public employees setReportsTo(Integer arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public String getTitle() {
            return (String) get("title");
        }

        public employees setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public String getTitleOfCourtesy() {
            return (String) get("title_of_courtesy");
        }

        public employees setTitleOfCourtesy(String arg) {
            optimisticData.put(getKey("title_of_courtesy"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "birth_date": return false;

                case "city": return false;

                case "country": return false;

                case "employee_id": return false;

                case "extension": return false;

                case "first_name": return false;

                case "hire_date": return false;

                case "home_phone": return false;

                case "last_name": return false;

                case "notes": return false;

                case "photo": return false;

                case "photo_path": return false;

                case "postal_code": return false;

                case "region": return false;

                case "reports_to": return false;

                case "title": return false;

                case "title_of_courtesy": return false;

                default: return false;
            }
        }
    }

    public interface employees_aggregateQueryDefinition {
        void define(employees_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "employees"
    */
    public static class employees_aggregateQuery extends Query<employees_aggregateQuery> {
        employees_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_aggregateQuery aggregate(employees_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new employees_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregateQuery nodes(employeesQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new employeesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "employees"
    */
    public static class employees_aggregate extends AbstractResponse<employees_aggregate> {
        public employees_aggregate() {
        }

        public employees_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        employees_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<employees> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employees(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_aggregate";
        }

        public employees_aggregate_fields getAggregate() {
            return (employees_aggregate_fields) get("aggregate");
        }

        public employees_aggregate setAggregate(employees_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<employees> getNodes() {
            return (List<employees>) get("nodes");
        }

        public employees_aggregate setNodes(List<employees> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface employees_aggregate_fieldsQueryDefinition {
        void define(employees_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "employees"
    */
    public static class employees_aggregate_fieldsQuery extends Query<employees_aggregate_fieldsQuery> {
        employees_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_aggregate_fieldsQuery avg(employees_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new employees_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<employees_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public employees_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public employees_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public employees_aggregate_fieldsQuery max(employees_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new employees_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery min(employees_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new employees_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery stddev(employees_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new employees_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery stddevPop(employees_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new employees_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery stddevSamp(employees_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new employees_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery sum(employees_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new employees_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery varPop(employees_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new employees_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery varSamp(employees_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new employees_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public employees_aggregate_fieldsQuery variance(employees_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new employees_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "employees"
    */
    public static class employees_aggregate_fields extends AbstractResponse<employees_aggregate_fields> {
        public employees_aggregate_fields() {
        }

        public employees_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        employees_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        employees_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        employees_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        employees_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        employees_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        employees_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        employees_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        employees_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        employees_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        employees_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_aggregate_fields";
        }

        public employees_avg_fields getAvg() {
            return (employees_avg_fields) get("avg");
        }

        public employees_aggregate_fields setAvg(employees_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public employees_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public employees_max_fields getMax() {
            return (employees_max_fields) get("max");
        }

        public employees_aggregate_fields setMax(employees_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public employees_min_fields getMin() {
            return (employees_min_fields) get("min");
        }

        public employees_aggregate_fields setMin(employees_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public employees_stddev_fields getStddev() {
            return (employees_stddev_fields) get("stddev");
        }

        public employees_aggregate_fields setStddev(employees_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public employees_stddev_pop_fields getStddevPop() {
            return (employees_stddev_pop_fields) get("stddev_pop");
        }

        public employees_aggregate_fields setStddevPop(employees_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public employees_stddev_samp_fields getStddevSamp() {
            return (employees_stddev_samp_fields) get("stddev_samp");
        }

        public employees_aggregate_fields setStddevSamp(employees_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public employees_sum_fields getSum() {
            return (employees_sum_fields) get("sum");
        }

        public employees_aggregate_fields setSum(employees_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public employees_var_pop_fields getVarPop() {
            return (employees_var_pop_fields) get("var_pop");
        }

        public employees_aggregate_fields setVarPop(employees_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public employees_var_samp_fields getVarSamp() {
            return (employees_var_samp_fields) get("var_samp");
        }

        public employees_aggregate_fields setVarSamp(employees_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public employees_variance_fields getVariance() {
            return (employees_variance_fields) get("variance");
        }

        public employees_aggregate_fields setVariance(employees_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class employees_aggregate_order_by implements Serializable {
        private employees_avg_order_by avg;

        private order_by count;

        private employees_max_order_by max;

        private employees_min_order_by min;

        private employees_stddev_order_by stddev;

        private employees_stddev_pop_order_by stddevPop;

        private employees_stddev_samp_order_by stddevSamp;

        private employees_sum_order_by sum;

        private employees_var_pop_order_by varPop;

        private employees_var_samp_order_by varSamp;

        private employees_variance_order_by variance;

        public employees_avg_order_by getAvg() {
            return avg;
        }

        public employees_aggregate_order_by setAvg(employees_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public employees_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public employees_max_order_by getMax() {
            return max;
        }

        public employees_aggregate_order_by setMax(employees_max_order_by max) {
            this.max = max;
            return this;
        }

        public employees_min_order_by getMin() {
            return min;
        }

        public employees_aggregate_order_by setMin(employees_min_order_by min) {
            this.min = min;
            return this;
        }

        public employees_stddev_order_by getStddev() {
            return stddev;
        }

        public employees_aggregate_order_by setStddev(employees_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public employees_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public employees_aggregate_order_by setStddevPop(employees_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public employees_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public employees_aggregate_order_by setStddevSamp(employees_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public employees_sum_order_by getSum() {
            return sum;
        }

        public employees_aggregate_order_by setSum(employees_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public employees_var_pop_order_by getVarPop() {
            return varPop;
        }

        public employees_aggregate_order_by setVarPop(employees_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public employees_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public employees_aggregate_order_by setVarSamp(employees_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public employees_variance_order_by getVariance() {
            return variance;
        }

        public employees_aggregate_order_by setVariance(employees_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class employees_arr_rel_insert_input implements Serializable {
        private List<employees_insert_input> data;

        private employees_on_conflict onConflict;

        public employees_arr_rel_insert_input(List<employees_insert_input> data) {
            this.data = data;
        }

        public List<employees_insert_input> getData() {
            return data;
        }

        public employees_arr_rel_insert_input setData(List<employees_insert_input> data) {
            this.data = data;
            return this;
        }

        public employees_on_conflict getOnConflict() {
            return onConflict;
        }

        public employees_arr_rel_insert_input setOnConflict(employees_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (employees_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_avg_fieldsQueryDefinition {
        void define(employees_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class employees_avg_fieldsQuery extends Query<employees_avg_fieldsQuery> {
        employees_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_avg_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_avg_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class employees_avg_fields extends AbstractResponse<employees_avg_fields> {
        public employees_avg_fields() {
        }

        public employees_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_avg_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employees_avg_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getReportsTo() {
            return (Double) get("reports_to");
        }

        public employees_avg_fields setReportsTo(Double arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_avg_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_avg_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_avg_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class employees_bool_exp implements Serializable {
        private List<employees_bool_exp> And;

        private employees_bool_exp Not;

        private List<employees_bool_exp> Or;

        private varchar_comparison_exp address;

        private date_comparison_exp birthDate;

        private varchar_comparison_exp city;

        private varchar_comparison_exp country;

        private Int_comparison_exp employeeId;

        private varchar_comparison_exp extension;

        private varchar_comparison_exp firstName;

        private date_comparison_exp hireDate;

        private varchar_comparison_exp homePhone;

        private varchar_comparison_exp lastName;

        private text_comparison_exp notes;

        private bytea_comparison_exp photo;

        private varchar_comparison_exp photoPath;

        private varchar_comparison_exp postalCode;

        private varchar_comparison_exp region;

        private Int_comparison_exp reportsTo;

        private varchar_comparison_exp title;

        private varchar_comparison_exp titleOfCourtesy;

        public List<employees_bool_exp> getAnd() {
            return And;
        }

        public employees_bool_exp setAnd(List<employees_bool_exp> And) {
            this.And = And;
            return this;
        }

        public employees_bool_exp getNot() {
            return Not;
        }

        public employees_bool_exp setNot(employees_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<employees_bool_exp> getOr() {
            return Or;
        }

        public employees_bool_exp setOr(List<employees_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public varchar_comparison_exp getAddress() {
            return address;
        }

        public employees_bool_exp setAddress(varchar_comparison_exp address) {
            this.address = address;
            return this;
        }

        public date_comparison_exp getBirthDate() {
            return birthDate;
        }

        public employees_bool_exp setBirthDate(date_comparison_exp birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        public varchar_comparison_exp getCity() {
            return city;
        }

        public employees_bool_exp setCity(varchar_comparison_exp city) {
            this.city = city;
            return this;
        }

        public varchar_comparison_exp getCountry() {
            return country;
        }

        public employees_bool_exp setCountry(varchar_comparison_exp country) {
            this.country = country;
            return this;
        }

        public Int_comparison_exp getEmployeeId() {
            return employeeId;
        }

        public employees_bool_exp setEmployeeId(Int_comparison_exp employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public varchar_comparison_exp getExtension() {
            return extension;
        }

        public employees_bool_exp setExtension(varchar_comparison_exp extension) {
            this.extension = extension;
            return this;
        }

        public varchar_comparison_exp getFirstName() {
            return firstName;
        }

        public employees_bool_exp setFirstName(varchar_comparison_exp firstName) {
            this.firstName = firstName;
            return this;
        }

        public date_comparison_exp getHireDate() {
            return hireDate;
        }

        public employees_bool_exp setHireDate(date_comparison_exp hireDate) {
            this.hireDate = hireDate;
            return this;
        }

        public varchar_comparison_exp getHomePhone() {
            return homePhone;
        }

        public employees_bool_exp setHomePhone(varchar_comparison_exp homePhone) {
            this.homePhone = homePhone;
            return this;
        }

        public varchar_comparison_exp getLastName() {
            return lastName;
        }

        public employees_bool_exp setLastName(varchar_comparison_exp lastName) {
            this.lastName = lastName;
            return this;
        }

        public text_comparison_exp getNotes() {
            return notes;
        }

        public employees_bool_exp setNotes(text_comparison_exp notes) {
            this.notes = notes;
            return this;
        }

        public bytea_comparison_exp getPhoto() {
            return photo;
        }

        public employees_bool_exp setPhoto(bytea_comparison_exp photo) {
            this.photo = photo;
            return this;
        }

        public varchar_comparison_exp getPhotoPath() {
            return photoPath;
        }

        public employees_bool_exp setPhotoPath(varchar_comparison_exp photoPath) {
            this.photoPath = photoPath;
            return this;
        }

        public varchar_comparison_exp getPostalCode() {
            return postalCode;
        }

        public employees_bool_exp setPostalCode(varchar_comparison_exp postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public varchar_comparison_exp getRegion() {
            return region;
        }

        public employees_bool_exp setRegion(varchar_comparison_exp region) {
            this.region = region;
            return this;
        }

        public Int_comparison_exp getReportsTo() {
            return reportsTo;
        }

        public employees_bool_exp setReportsTo(Int_comparison_exp reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public varchar_comparison_exp getTitle() {
            return title;
        }

        public employees_bool_exp setTitle(varchar_comparison_exp title) {
            this.title = title;
            return this;
        }

        public varchar_comparison_exp getTitleOfCourtesy() {
            return titleOfCourtesy;
        }

        public employees_bool_exp setTitleOfCourtesy(varchar_comparison_exp titleOfCourtesy) {
            this.titleOfCourtesy = titleOfCourtesy;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (employees_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (employees_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                address.appendTo(_queryBuilder);
            }

            if (birthDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("birth_date:");
                birthDate.appendTo(_queryBuilder);
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                city.appendTo(_queryBuilder);
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                country.appendTo(_queryBuilder);
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                employeeId.appendTo(_queryBuilder);
            }

            if (extension != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("extension:");
                extension.appendTo(_queryBuilder);
            }

            if (firstName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("first_name:");
                firstName.appendTo(_queryBuilder);
            }

            if (hireDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("hire_date:");
                hireDate.appendTo(_queryBuilder);
            }

            if (homePhone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("home_phone:");
                homePhone.appendTo(_queryBuilder);
            }

            if (lastName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("last_name:");
                lastName.appendTo(_queryBuilder);
            }

            if (notes != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("notes:");
                notes.appendTo(_queryBuilder);
            }

            if (photo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo:");
                photo.appendTo(_queryBuilder);
            }

            if (photoPath != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo_path:");
                photoPath.appendTo(_queryBuilder);
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                postalCode.appendTo(_queryBuilder);
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                region.appendTo(_queryBuilder);
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                reportsTo.appendTo(_queryBuilder);
            }

            if (title != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title:");
                title.appendTo(_queryBuilder);
            }

            if (titleOfCourtesy != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title_of_courtesy:");
                titleOfCourtesy.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "employees"
    */
    public enum employees_constraint {
        PK_EMPLOYEES,

        UNKNOWN_VALUE;

        public static employees_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_employees": {
                    return PK_EMPLOYEES;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_EMPLOYEES: {
                    return "pk_employees";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class employees_inc_input implements Serializable {
        private Integer employeeId;

        private Integer reportsTo;

        public Integer getEmployeeId() {
            return employeeId;
        }

        public employees_inc_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public Integer getReportsTo() {
            return reportsTo;
        }

        public employees_inc_input setReportsTo(Integer reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo);
            }

            _queryBuilder.append('}');
        }
    }

    public static class employees_insert_input implements Serializable {
        private String address;

        private String birthDate;

        private String city;

        private String country;

        private Integer employeeId;

        private String extension;

        private String firstName;

        private String hireDate;

        private String homePhone;

        private String lastName;

        private String notes;

        private String photo;

        private String photoPath;

        private String postalCode;

        private String region;

        private Integer reportsTo;

        private String title;

        private String titleOfCourtesy;

        public String getAddress() {
            return address;
        }

        public employees_insert_input setAddress(String address) {
            this.address = address;
            return this;
        }

        public String getBirthDate() {
            return birthDate;
        }

        public employees_insert_input setBirthDate(String birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        public String getCity() {
            return city;
        }

        public employees_insert_input setCity(String city) {
            this.city = city;
            return this;
        }

        public String getCountry() {
            return country;
        }

        public employees_insert_input setCountry(String country) {
            this.country = country;
            return this;
        }

        public Integer getEmployeeId() {
            return employeeId;
        }

        public employees_insert_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public String getExtension() {
            return extension;
        }

        public employees_insert_input setExtension(String extension) {
            this.extension = extension;
            return this;
        }

        public String getFirstName() {
            return firstName;
        }

        public employees_insert_input setFirstName(String firstName) {
            this.firstName = firstName;
            return this;
        }

        public String getHireDate() {
            return hireDate;
        }

        public employees_insert_input setHireDate(String hireDate) {
            this.hireDate = hireDate;
            return this;
        }

        public String getHomePhone() {
            return homePhone;
        }

        public employees_insert_input setHomePhone(String homePhone) {
            this.homePhone = homePhone;
            return this;
        }

        public String getLastName() {
            return lastName;
        }

        public employees_insert_input setLastName(String lastName) {
            this.lastName = lastName;
            return this;
        }

        public String getNotes() {
            return notes;
        }

        public employees_insert_input setNotes(String notes) {
            this.notes = notes;
            return this;
        }

        public String getPhoto() {
            return photo;
        }

        public employees_insert_input setPhoto(String photo) {
            this.photo = photo;
            return this;
        }

        public String getPhotoPath() {
            return photoPath;
        }

        public employees_insert_input setPhotoPath(String photoPath) {
            this.photoPath = photoPath;
            return this;
        }

        public String getPostalCode() {
            return postalCode;
        }

        public employees_insert_input setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public String getRegion() {
            return region;
        }

        public employees_insert_input setRegion(String region) {
            this.region = region;
            return this;
        }

        public Integer getReportsTo() {
            return reportsTo;
        }

        public employees_insert_input setReportsTo(Integer reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public String getTitle() {
            return title;
        }

        public employees_insert_input setTitle(String title) {
            this.title = title;
            return this;
        }

        public String getTitleOfCourtesy() {
            return titleOfCourtesy;
        }

        public employees_insert_input setTitleOfCourtesy(String titleOfCourtesy) {
            this.titleOfCourtesy = titleOfCourtesy;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                Query.appendQuotedString(_queryBuilder, address.toString());
            }

            if (birthDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("birth_date:");
                Query.appendQuotedString(_queryBuilder, birthDate.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                Query.appendQuotedString(_queryBuilder, city.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                Query.appendQuotedString(_queryBuilder, country.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (extension != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("extension:");
                Query.appendQuotedString(_queryBuilder, extension.toString());
            }

            if (firstName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("first_name:");
                Query.appendQuotedString(_queryBuilder, firstName.toString());
            }

            if (hireDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("hire_date:");
                Query.appendQuotedString(_queryBuilder, hireDate.toString());
            }

            if (homePhone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("home_phone:");
                Query.appendQuotedString(_queryBuilder, homePhone.toString());
            }

            if (lastName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("last_name:");
                Query.appendQuotedString(_queryBuilder, lastName.toString());
            }

            if (notes != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("notes:");
                Query.appendQuotedString(_queryBuilder, notes.toString());
            }

            if (photo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo:");
                Query.appendQuotedString(_queryBuilder, photo.toString());
            }

            if (photoPath != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo_path:");
                Query.appendQuotedString(_queryBuilder, photoPath.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                Query.appendQuotedString(_queryBuilder, postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                Query.appendQuotedString(_queryBuilder, region.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo);
            }

            if (title != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title:");
                Query.appendQuotedString(_queryBuilder, title.toString());
            }

            if (titleOfCourtesy != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title_of_courtesy:");
                Query.appendQuotedString(_queryBuilder, titleOfCourtesy.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_max_fieldsQueryDefinition {
        void define(employees_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class employees_max_fieldsQuery extends Query<employees_max_fieldsQuery> {
        employees_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_max_fieldsQuery address() {
            startField("address");

            return this;
        }

        public employees_max_fieldsQuery birthDate() {
            startField("birth_date");

            return this;
        }

        public employees_max_fieldsQuery city() {
            startField("city");

            return this;
        }

        public employees_max_fieldsQuery country() {
            startField("country");

            return this;
        }

        public employees_max_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_max_fieldsQuery extension() {
            startField("extension");

            return this;
        }

        public employees_max_fieldsQuery firstName() {
            startField("first_name");

            return this;
        }

        public employees_max_fieldsQuery hireDate() {
            startField("hire_date");

            return this;
        }

        public employees_max_fieldsQuery homePhone() {
            startField("home_phone");

            return this;
        }

        public employees_max_fieldsQuery lastName() {
            startField("last_name");

            return this;
        }

        public employees_max_fieldsQuery notes() {
            startField("notes");

            return this;
        }

        public employees_max_fieldsQuery photoPath() {
            startField("photo_path");

            return this;
        }

        public employees_max_fieldsQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public employees_max_fieldsQuery region() {
            startField("region");

            return this;
        }

        public employees_max_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }

        public employees_max_fieldsQuery title() {
            startField("title");

            return this;
        }

        public employees_max_fieldsQuery titleOfCourtesy() {
            startField("title_of_courtesy");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class employees_max_fields extends AbstractResponse<employees_max_fields> {
        public employees_max_fields() {
        }

        public employees_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "birth_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "extension": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "first_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "hire_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "home_phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "last_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "notes": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "photo_path": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title_of_courtesy": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_max_fields";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public employees_max_fields setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getBirthDate() {
            return (String) get("birth_date");
        }

        public employees_max_fields setBirthDate(String arg) {
            optimisticData.put(getKey("birth_date"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public employees_max_fields setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public employees_max_fields setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employees_max_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public String getExtension() {
            return (String) get("extension");
        }

        public employees_max_fields setExtension(String arg) {
            optimisticData.put(getKey("extension"), arg);
            return this;
        }

        public String getFirstName() {
            return (String) get("first_name");
        }

        public employees_max_fields setFirstName(String arg) {
            optimisticData.put(getKey("first_name"), arg);
            return this;
        }

        public String getHireDate() {
            return (String) get("hire_date");
        }

        public employees_max_fields setHireDate(String arg) {
            optimisticData.put(getKey("hire_date"), arg);
            return this;
        }

        public String getHomePhone() {
            return (String) get("home_phone");
        }

        public employees_max_fields setHomePhone(String arg) {
            optimisticData.put(getKey("home_phone"), arg);
            return this;
        }

        public String getLastName() {
            return (String) get("last_name");
        }

        public employees_max_fields setLastName(String arg) {
            optimisticData.put(getKey("last_name"), arg);
            return this;
        }

        public String getNotes() {
            return (String) get("notes");
        }

        public employees_max_fields setNotes(String arg) {
            optimisticData.put(getKey("notes"), arg);
            return this;
        }

        public String getPhotoPath() {
            return (String) get("photo_path");
        }

        public employees_max_fields setPhotoPath(String arg) {
            optimisticData.put(getKey("photo_path"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public employees_max_fields setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public employees_max_fields setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public Integer getReportsTo() {
            return (Integer) get("reports_to");
        }

        public employees_max_fields setReportsTo(Integer arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public String getTitle() {
            return (String) get("title");
        }

        public employees_max_fields setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public String getTitleOfCourtesy() {
            return (String) get("title_of_courtesy");
        }

        public employees_max_fields setTitleOfCourtesy(String arg) {
            optimisticData.put(getKey("title_of_courtesy"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "birth_date": return false;

                case "city": return false;

                case "country": return false;

                case "employee_id": return false;

                case "extension": return false;

                case "first_name": return false;

                case "hire_date": return false;

                case "home_phone": return false;

                case "last_name": return false;

                case "notes": return false;

                case "photo_path": return false;

                case "postal_code": return false;

                case "region": return false;

                case "reports_to": return false;

                case "title": return false;

                case "title_of_courtesy": return false;

                default: return false;
            }
        }
    }

    public static class employees_max_order_by implements Serializable {
        private order_by address;

        private order_by birthDate;

        private order_by city;

        private order_by country;

        private order_by employeeId;

        private order_by extension;

        private order_by firstName;

        private order_by hireDate;

        private order_by homePhone;

        private order_by lastName;

        private order_by notes;

        private order_by photoPath;

        private order_by postalCode;

        private order_by region;

        private order_by reportsTo;

        private order_by title;

        private order_by titleOfCourtesy;

        public order_by getAddress() {
            return address;
        }

        public employees_max_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getBirthDate() {
            return birthDate;
        }

        public employees_max_order_by setBirthDate(order_by birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public employees_max_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public employees_max_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_max_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getExtension() {
            return extension;
        }

        public employees_max_order_by setExtension(order_by extension) {
            this.extension = extension;
            return this;
        }

        public order_by getFirstName() {
            return firstName;
        }

        public employees_max_order_by setFirstName(order_by firstName) {
            this.firstName = firstName;
            return this;
        }

        public order_by getHireDate() {
            return hireDate;
        }

        public employees_max_order_by setHireDate(order_by hireDate) {
            this.hireDate = hireDate;
            return this;
        }

        public order_by getHomePhone() {
            return homePhone;
        }

        public employees_max_order_by setHomePhone(order_by homePhone) {
            this.homePhone = homePhone;
            return this;
        }

        public order_by getLastName() {
            return lastName;
        }

        public employees_max_order_by setLastName(order_by lastName) {
            this.lastName = lastName;
            return this;
        }

        public order_by getNotes() {
            return notes;
        }

        public employees_max_order_by setNotes(order_by notes) {
            this.notes = notes;
            return this;
        }

        public order_by getPhotoPath() {
            return photoPath;
        }

        public employees_max_order_by setPhotoPath(order_by photoPath) {
            this.photoPath = photoPath;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public employees_max_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public employees_max_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_max_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public order_by getTitle() {
            return title;
        }

        public employees_max_order_by setTitle(order_by title) {
            this.title = title;
            return this;
        }

        public order_by getTitleOfCourtesy() {
            return titleOfCourtesy;
        }

        public employees_max_order_by setTitleOfCourtesy(order_by titleOfCourtesy) {
            this.titleOfCourtesy = titleOfCourtesy;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (birthDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("birth_date:");
                _queryBuilder.append(birthDate.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (extension != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("extension:");
                _queryBuilder.append(extension.toString());
            }

            if (firstName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("first_name:");
                _queryBuilder.append(firstName.toString());
            }

            if (hireDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("hire_date:");
                _queryBuilder.append(hireDate.toString());
            }

            if (homePhone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("home_phone:");
                _queryBuilder.append(homePhone.toString());
            }

            if (lastName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("last_name:");
                _queryBuilder.append(lastName.toString());
            }

            if (notes != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("notes:");
                _queryBuilder.append(notes.toString());
            }

            if (photoPath != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo_path:");
                _queryBuilder.append(photoPath.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            if (title != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title:");
                _queryBuilder.append(title.toString());
            }

            if (titleOfCourtesy != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title_of_courtesy:");
                _queryBuilder.append(titleOfCourtesy.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_min_fieldsQueryDefinition {
        void define(employees_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class employees_min_fieldsQuery extends Query<employees_min_fieldsQuery> {
        employees_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_min_fieldsQuery address() {
            startField("address");

            return this;
        }

        public employees_min_fieldsQuery birthDate() {
            startField("birth_date");

            return this;
        }

        public employees_min_fieldsQuery city() {
            startField("city");

            return this;
        }

        public employees_min_fieldsQuery country() {
            startField("country");

            return this;
        }

        public employees_min_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_min_fieldsQuery extension() {
            startField("extension");

            return this;
        }

        public employees_min_fieldsQuery firstName() {
            startField("first_name");

            return this;
        }

        public employees_min_fieldsQuery hireDate() {
            startField("hire_date");

            return this;
        }

        public employees_min_fieldsQuery homePhone() {
            startField("home_phone");

            return this;
        }

        public employees_min_fieldsQuery lastName() {
            startField("last_name");

            return this;
        }

        public employees_min_fieldsQuery notes() {
            startField("notes");

            return this;
        }

        public employees_min_fieldsQuery photoPath() {
            startField("photo_path");

            return this;
        }

        public employees_min_fieldsQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public employees_min_fieldsQuery region() {
            startField("region");

            return this;
        }

        public employees_min_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }

        public employees_min_fieldsQuery title() {
            startField("title");

            return this;
        }

        public employees_min_fieldsQuery titleOfCourtesy() {
            startField("title_of_courtesy");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class employees_min_fields extends AbstractResponse<employees_min_fields> {
        public employees_min_fields() {
        }

        public employees_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "birth_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "extension": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "first_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "hire_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "home_phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "last_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "notes": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "photo_path": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "title_of_courtesy": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_min_fields";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public employees_min_fields setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getBirthDate() {
            return (String) get("birth_date");
        }

        public employees_min_fields setBirthDate(String arg) {
            optimisticData.put(getKey("birth_date"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public employees_min_fields setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public employees_min_fields setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employees_min_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public String getExtension() {
            return (String) get("extension");
        }

        public employees_min_fields setExtension(String arg) {
            optimisticData.put(getKey("extension"), arg);
            return this;
        }

        public String getFirstName() {
            return (String) get("first_name");
        }

        public employees_min_fields setFirstName(String arg) {
            optimisticData.put(getKey("first_name"), arg);
            return this;
        }

        public String getHireDate() {
            return (String) get("hire_date");
        }

        public employees_min_fields setHireDate(String arg) {
            optimisticData.put(getKey("hire_date"), arg);
            return this;
        }

        public String getHomePhone() {
            return (String) get("home_phone");
        }

        public employees_min_fields setHomePhone(String arg) {
            optimisticData.put(getKey("home_phone"), arg);
            return this;
        }

        public String getLastName() {
            return (String) get("last_name");
        }

        public employees_min_fields setLastName(String arg) {
            optimisticData.put(getKey("last_name"), arg);
            return this;
        }

        public String getNotes() {
            return (String) get("notes");
        }

        public employees_min_fields setNotes(String arg) {
            optimisticData.put(getKey("notes"), arg);
            return this;
        }

        public String getPhotoPath() {
            return (String) get("photo_path");
        }

        public employees_min_fields setPhotoPath(String arg) {
            optimisticData.put(getKey("photo_path"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public employees_min_fields setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public employees_min_fields setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public Integer getReportsTo() {
            return (Integer) get("reports_to");
        }

        public employees_min_fields setReportsTo(Integer arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public String getTitle() {
            return (String) get("title");
        }

        public employees_min_fields setTitle(String arg) {
            optimisticData.put(getKey("title"), arg);
            return this;
        }

        public String getTitleOfCourtesy() {
            return (String) get("title_of_courtesy");
        }

        public employees_min_fields setTitleOfCourtesy(String arg) {
            optimisticData.put(getKey("title_of_courtesy"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "birth_date": return false;

                case "city": return false;

                case "country": return false;

                case "employee_id": return false;

                case "extension": return false;

                case "first_name": return false;

                case "hire_date": return false;

                case "home_phone": return false;

                case "last_name": return false;

                case "notes": return false;

                case "photo_path": return false;

                case "postal_code": return false;

                case "region": return false;

                case "reports_to": return false;

                case "title": return false;

                case "title_of_courtesy": return false;

                default: return false;
            }
        }
    }

    public static class employees_min_order_by implements Serializable {
        private order_by address;

        private order_by birthDate;

        private order_by city;

        private order_by country;

        private order_by employeeId;

        private order_by extension;

        private order_by firstName;

        private order_by hireDate;

        private order_by homePhone;

        private order_by lastName;

        private order_by notes;

        private order_by photoPath;

        private order_by postalCode;

        private order_by region;

        private order_by reportsTo;

        private order_by title;

        private order_by titleOfCourtesy;

        public order_by getAddress() {
            return address;
        }

        public employees_min_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getBirthDate() {
            return birthDate;
        }

        public employees_min_order_by setBirthDate(order_by birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public employees_min_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public employees_min_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_min_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getExtension() {
            return extension;
        }

        public employees_min_order_by setExtension(order_by extension) {
            this.extension = extension;
            return this;
        }

        public order_by getFirstName() {
            return firstName;
        }

        public employees_min_order_by setFirstName(order_by firstName) {
            this.firstName = firstName;
            return this;
        }

        public order_by getHireDate() {
            return hireDate;
        }

        public employees_min_order_by setHireDate(order_by hireDate) {
            this.hireDate = hireDate;
            return this;
        }

        public order_by getHomePhone() {
            return homePhone;
        }

        public employees_min_order_by setHomePhone(order_by homePhone) {
            this.homePhone = homePhone;
            return this;
        }

        public order_by getLastName() {
            return lastName;
        }

        public employees_min_order_by setLastName(order_by lastName) {
            this.lastName = lastName;
            return this;
        }

        public order_by getNotes() {
            return notes;
        }

        public employees_min_order_by setNotes(order_by notes) {
            this.notes = notes;
            return this;
        }

        public order_by getPhotoPath() {
            return photoPath;
        }

        public employees_min_order_by setPhotoPath(order_by photoPath) {
            this.photoPath = photoPath;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public employees_min_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public employees_min_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_min_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public order_by getTitle() {
            return title;
        }

        public employees_min_order_by setTitle(order_by title) {
            this.title = title;
            return this;
        }

        public order_by getTitleOfCourtesy() {
            return titleOfCourtesy;
        }

        public employees_min_order_by setTitleOfCourtesy(order_by titleOfCourtesy) {
            this.titleOfCourtesy = titleOfCourtesy;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (birthDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("birth_date:");
                _queryBuilder.append(birthDate.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (extension != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("extension:");
                _queryBuilder.append(extension.toString());
            }

            if (firstName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("first_name:");
                _queryBuilder.append(firstName.toString());
            }

            if (hireDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("hire_date:");
                _queryBuilder.append(hireDate.toString());
            }

            if (homePhone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("home_phone:");
                _queryBuilder.append(homePhone.toString());
            }

            if (lastName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("last_name:");
                _queryBuilder.append(lastName.toString());
            }

            if (notes != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("notes:");
                _queryBuilder.append(notes.toString());
            }

            if (photoPath != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo_path:");
                _queryBuilder.append(photoPath.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            if (title != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title:");
                _queryBuilder.append(title.toString());
            }

            if (titleOfCourtesy != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title_of_courtesy:");
                _queryBuilder.append(titleOfCourtesy.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_mutation_responseQueryDefinition {
        void define(employees_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "employees"
    */
    public static class employees_mutation_responseQuery extends Query<employees_mutation_responseQuery> {
        employees_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public employees_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public employees_mutation_responseQuery returning(employeesQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new employeesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "employees"
    */
    public static class employees_mutation_response extends AbstractResponse<employees_mutation_response> {
        public employees_mutation_response() {
        }

        public employees_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<employees> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employees(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public employees_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<employees> getReturning() {
            return (List<employees>) get("returning");
        }

        public employees_mutation_response setReturning(List<employees> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class employees_obj_rel_insert_input implements Serializable {
        private employees_insert_input data;

        private employees_on_conflict onConflict;

        public employees_obj_rel_insert_input(employees_insert_input data) {
            this.data = data;
        }

        public employees_insert_input getData() {
            return data;
        }

        public employees_obj_rel_insert_input setData(employees_insert_input data) {
            this.data = data;
            return this;
        }

        public employees_on_conflict getOnConflict() {
            return onConflict;
        }

        public employees_obj_rel_insert_input setOnConflict(employees_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class employees_on_conflict implements Serializable {
        private employees_constraint constraint;

        private List<employees_update_column> updateColumns;

        public employees_on_conflict(employees_constraint constraint, List<employees_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public employees_constraint getConstraint() {
            return constraint;
        }

        public employees_on_conflict setConstraint(employees_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<employees_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public employees_on_conflict setUpdateColumns(List<employees_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (employees_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class employees_order_by implements Serializable {
        private order_by address;

        private order_by birthDate;

        private order_by city;

        private order_by country;

        private order_by employeeId;

        private order_by extension;

        private order_by firstName;

        private order_by hireDate;

        private order_by homePhone;

        private order_by lastName;

        private order_by notes;

        private order_by photo;

        private order_by photoPath;

        private order_by postalCode;

        private order_by region;

        private order_by reportsTo;

        private order_by title;

        private order_by titleOfCourtesy;

        public order_by getAddress() {
            return address;
        }

        public employees_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getBirthDate() {
            return birthDate;
        }

        public employees_order_by setBirthDate(order_by birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public employees_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public employees_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getExtension() {
            return extension;
        }

        public employees_order_by setExtension(order_by extension) {
            this.extension = extension;
            return this;
        }

        public order_by getFirstName() {
            return firstName;
        }

        public employees_order_by setFirstName(order_by firstName) {
            this.firstName = firstName;
            return this;
        }

        public order_by getHireDate() {
            return hireDate;
        }

        public employees_order_by setHireDate(order_by hireDate) {
            this.hireDate = hireDate;
            return this;
        }

        public order_by getHomePhone() {
            return homePhone;
        }

        public employees_order_by setHomePhone(order_by homePhone) {
            this.homePhone = homePhone;
            return this;
        }

        public order_by getLastName() {
            return lastName;
        }

        public employees_order_by setLastName(order_by lastName) {
            this.lastName = lastName;
            return this;
        }

        public order_by getNotes() {
            return notes;
        }

        public employees_order_by setNotes(order_by notes) {
            this.notes = notes;
            return this;
        }

        public order_by getPhoto() {
            return photo;
        }

        public employees_order_by setPhoto(order_by photo) {
            this.photo = photo;
            return this;
        }

        public order_by getPhotoPath() {
            return photoPath;
        }

        public employees_order_by setPhotoPath(order_by photoPath) {
            this.photoPath = photoPath;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public employees_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public employees_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public order_by getTitle() {
            return title;
        }

        public employees_order_by setTitle(order_by title) {
            this.title = title;
            return this;
        }

        public order_by getTitleOfCourtesy() {
            return titleOfCourtesy;
        }

        public employees_order_by setTitleOfCourtesy(order_by titleOfCourtesy) {
            this.titleOfCourtesy = titleOfCourtesy;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (birthDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("birth_date:");
                _queryBuilder.append(birthDate.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (extension != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("extension:");
                _queryBuilder.append(extension.toString());
            }

            if (firstName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("first_name:");
                _queryBuilder.append(firstName.toString());
            }

            if (hireDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("hire_date:");
                _queryBuilder.append(hireDate.toString());
            }

            if (homePhone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("home_phone:");
                _queryBuilder.append(homePhone.toString());
            }

            if (lastName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("last_name:");
                _queryBuilder.append(lastName.toString());
            }

            if (notes != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("notes:");
                _queryBuilder.append(notes.toString());
            }

            if (photo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo:");
                _queryBuilder.append(photo.toString());
            }

            if (photoPath != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo_path:");
                _queryBuilder.append(photoPath.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            if (title != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title:");
                _queryBuilder.append(title.toString());
            }

            if (titleOfCourtesy != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title_of_courtesy:");
                _queryBuilder.append(titleOfCourtesy.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "employees"
    */
    public enum employees_select_column {
        ADDRESS,

        BIRTH_DATE,

        CITY,

        COUNTRY,

        EMPLOYEE_ID,

        EXTENSION,

        FIRST_NAME,

        HIRE_DATE,

        HOME_PHONE,

        LAST_NAME,

        NOTES,

        PHOTO,

        PHOTO_PATH,

        POSTAL_CODE,

        REGION,

        REPORTS_TO,

        TITLE,

        TITLE_OF_COURTESY,

        UNKNOWN_VALUE;

        public static employees_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "address": {
                    return ADDRESS;
                }

                case "birth_date": {
                    return BIRTH_DATE;
                }

                case "city": {
                    return CITY;
                }

                case "country": {
                    return COUNTRY;
                }

                case "employee_id": {
                    return EMPLOYEE_ID;
                }

                case "extension": {
                    return EXTENSION;
                }

                case "first_name": {
                    return FIRST_NAME;
                }

                case "hire_date": {
                    return HIRE_DATE;
                }

                case "home_phone": {
                    return HOME_PHONE;
                }

                case "last_name": {
                    return LAST_NAME;
                }

                case "notes": {
                    return NOTES;
                }

                case "photo": {
                    return PHOTO;
                }

                case "photo_path": {
                    return PHOTO_PATH;
                }

                case "postal_code": {
                    return POSTAL_CODE;
                }

                case "region": {
                    return REGION;
                }

                case "reports_to": {
                    return REPORTS_TO;
                }

                case "title": {
                    return TITLE;
                }

                case "title_of_courtesy": {
                    return TITLE_OF_COURTESY;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ADDRESS: {
                    return "address";
                }

                case BIRTH_DATE: {
                    return "birth_date";
                }

                case CITY: {
                    return "city";
                }

                case COUNTRY: {
                    return "country";
                }

                case EMPLOYEE_ID: {
                    return "employee_id";
                }

                case EXTENSION: {
                    return "extension";
                }

                case FIRST_NAME: {
                    return "first_name";
                }

                case HIRE_DATE: {
                    return "hire_date";
                }

                case HOME_PHONE: {
                    return "home_phone";
                }

                case LAST_NAME: {
                    return "last_name";
                }

                case NOTES: {
                    return "notes";
                }

                case PHOTO: {
                    return "photo";
                }

                case PHOTO_PATH: {
                    return "photo_path";
                }

                case POSTAL_CODE: {
                    return "postal_code";
                }

                case REGION: {
                    return "region";
                }

                case REPORTS_TO: {
                    return "reports_to";
                }

                case TITLE: {
                    return "title";
                }

                case TITLE_OF_COURTESY: {
                    return "title_of_courtesy";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class employees_set_input implements Serializable {
        private String address;

        private String birthDate;

        private String city;

        private String country;

        private Integer employeeId;

        private String extension;

        private String firstName;

        private String hireDate;

        private String homePhone;

        private String lastName;

        private String notes;

        private String photo;

        private String photoPath;

        private String postalCode;

        private String region;

        private Integer reportsTo;

        private String title;

        private String titleOfCourtesy;

        public String getAddress() {
            return address;
        }

        public employees_set_input setAddress(String address) {
            this.address = address;
            return this;
        }

        public String getBirthDate() {
            return birthDate;
        }

        public employees_set_input setBirthDate(String birthDate) {
            this.birthDate = birthDate;
            return this;
        }

        public String getCity() {
            return city;
        }

        public employees_set_input setCity(String city) {
            this.city = city;
            return this;
        }

        public String getCountry() {
            return country;
        }

        public employees_set_input setCountry(String country) {
            this.country = country;
            return this;
        }

        public Integer getEmployeeId() {
            return employeeId;
        }

        public employees_set_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public String getExtension() {
            return extension;
        }

        public employees_set_input setExtension(String extension) {
            this.extension = extension;
            return this;
        }

        public String getFirstName() {
            return firstName;
        }

        public employees_set_input setFirstName(String firstName) {
            this.firstName = firstName;
            return this;
        }

        public String getHireDate() {
            return hireDate;
        }

        public employees_set_input setHireDate(String hireDate) {
            this.hireDate = hireDate;
            return this;
        }

        public String getHomePhone() {
            return homePhone;
        }

        public employees_set_input setHomePhone(String homePhone) {
            this.homePhone = homePhone;
            return this;
        }

        public String getLastName() {
            return lastName;
        }

        public employees_set_input setLastName(String lastName) {
            this.lastName = lastName;
            return this;
        }

        public String getNotes() {
            return notes;
        }

        public employees_set_input setNotes(String notes) {
            this.notes = notes;
            return this;
        }

        public String getPhoto() {
            return photo;
        }

        public employees_set_input setPhoto(String photo) {
            this.photo = photo;
            return this;
        }

        public String getPhotoPath() {
            return photoPath;
        }

        public employees_set_input setPhotoPath(String photoPath) {
            this.photoPath = photoPath;
            return this;
        }

        public String getPostalCode() {
            return postalCode;
        }

        public employees_set_input setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public String getRegion() {
            return region;
        }

        public employees_set_input setRegion(String region) {
            this.region = region;
            return this;
        }

        public Integer getReportsTo() {
            return reportsTo;
        }

        public employees_set_input setReportsTo(Integer reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public String getTitle() {
            return title;
        }

        public employees_set_input setTitle(String title) {
            this.title = title;
            return this;
        }

        public String getTitleOfCourtesy() {
            return titleOfCourtesy;
        }

        public employees_set_input setTitleOfCourtesy(String titleOfCourtesy) {
            this.titleOfCourtesy = titleOfCourtesy;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                Query.appendQuotedString(_queryBuilder, address.toString());
            }

            if (birthDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("birth_date:");
                Query.appendQuotedString(_queryBuilder, birthDate.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                Query.appendQuotedString(_queryBuilder, city.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                Query.appendQuotedString(_queryBuilder, country.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (extension != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("extension:");
                Query.appendQuotedString(_queryBuilder, extension.toString());
            }

            if (firstName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("first_name:");
                Query.appendQuotedString(_queryBuilder, firstName.toString());
            }

            if (hireDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("hire_date:");
                Query.appendQuotedString(_queryBuilder, hireDate.toString());
            }

            if (homePhone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("home_phone:");
                Query.appendQuotedString(_queryBuilder, homePhone.toString());
            }

            if (lastName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("last_name:");
                Query.appendQuotedString(_queryBuilder, lastName.toString());
            }

            if (notes != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("notes:");
                Query.appendQuotedString(_queryBuilder, notes.toString());
            }

            if (photo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo:");
                Query.appendQuotedString(_queryBuilder, photo.toString());
            }

            if (photoPath != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("photo_path:");
                Query.appendQuotedString(_queryBuilder, photoPath.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                Query.appendQuotedString(_queryBuilder, postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                Query.appendQuotedString(_queryBuilder, region.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo);
            }

            if (title != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title:");
                Query.appendQuotedString(_queryBuilder, title.toString());
            }

            if (titleOfCourtesy != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("title_of_courtesy:");
                Query.appendQuotedString(_queryBuilder, titleOfCourtesy.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_stddev_fieldsQueryDefinition {
        void define(employees_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class employees_stddev_fieldsQuery extends Query<employees_stddev_fieldsQuery> {
        employees_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_stddev_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_stddev_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class employees_stddev_fields extends AbstractResponse<employees_stddev_fields> {
        public employees_stddev_fields() {
        }

        public employees_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_stddev_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employees_stddev_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getReportsTo() {
            return (Double) get("reports_to");
        }

        public employees_stddev_fields setReportsTo(Double arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_stddev_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_stddev_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_stddev_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_stddev_pop_fieldsQueryDefinition {
        void define(employees_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class employees_stddev_pop_fieldsQuery extends Query<employees_stddev_pop_fieldsQuery> {
        employees_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_stddev_pop_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_stddev_pop_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class employees_stddev_pop_fields extends AbstractResponse<employees_stddev_pop_fields> {
        public employees_stddev_pop_fields() {
        }

        public employees_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_stddev_pop_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employees_stddev_pop_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getReportsTo() {
            return (Double) get("reports_to");
        }

        public employees_stddev_pop_fields setReportsTo(Double arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_stddev_pop_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_stddev_pop_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_stddev_pop_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_stddev_samp_fieldsQueryDefinition {
        void define(employees_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class employees_stddev_samp_fieldsQuery extends Query<employees_stddev_samp_fieldsQuery> {
        employees_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_stddev_samp_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_stddev_samp_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class employees_stddev_samp_fields extends AbstractResponse<employees_stddev_samp_fields> {
        public employees_stddev_samp_fields() {
        }

        public employees_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_stddev_samp_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employees_stddev_samp_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getReportsTo() {
            return (Double) get("reports_to");
        }

        public employees_stddev_samp_fields setReportsTo(Double arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_stddev_samp_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_stddev_samp_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_stddev_samp_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_sum_fieldsQueryDefinition {
        void define(employees_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class employees_sum_fieldsQuery extends Query<employees_sum_fieldsQuery> {
        employees_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_sum_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_sum_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class employees_sum_fields extends AbstractResponse<employees_sum_fields> {
        public employees_sum_fields() {
        }

        public employees_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_sum_fields";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public employees_sum_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Integer getReportsTo() {
            return (Integer) get("reports_to");
        }

        public employees_sum_fields setReportsTo(Integer arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_sum_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_sum_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_sum_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "employees"
    */
    public enum employees_update_column {
        ADDRESS,

        BIRTH_DATE,

        CITY,

        COUNTRY,

        EMPLOYEE_ID,

        EXTENSION,

        FIRST_NAME,

        HIRE_DATE,

        HOME_PHONE,

        LAST_NAME,

        NOTES,

        PHOTO,

        PHOTO_PATH,

        POSTAL_CODE,

        REGION,

        REPORTS_TO,

        TITLE,

        TITLE_OF_COURTESY,

        UNKNOWN_VALUE;

        public static employees_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "address": {
                    return ADDRESS;
                }

                case "birth_date": {
                    return BIRTH_DATE;
                }

                case "city": {
                    return CITY;
                }

                case "country": {
                    return COUNTRY;
                }

                case "employee_id": {
                    return EMPLOYEE_ID;
                }

                case "extension": {
                    return EXTENSION;
                }

                case "first_name": {
                    return FIRST_NAME;
                }

                case "hire_date": {
                    return HIRE_DATE;
                }

                case "home_phone": {
                    return HOME_PHONE;
                }

                case "last_name": {
                    return LAST_NAME;
                }

                case "notes": {
                    return NOTES;
                }

                case "photo": {
                    return PHOTO;
                }

                case "photo_path": {
                    return PHOTO_PATH;
                }

                case "postal_code": {
                    return POSTAL_CODE;
                }

                case "region": {
                    return REGION;
                }

                case "reports_to": {
                    return REPORTS_TO;
                }

                case "title": {
                    return TITLE;
                }

                case "title_of_courtesy": {
                    return TITLE_OF_COURTESY;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ADDRESS: {
                    return "address";
                }

                case BIRTH_DATE: {
                    return "birth_date";
                }

                case CITY: {
                    return "city";
                }

                case COUNTRY: {
                    return "country";
                }

                case EMPLOYEE_ID: {
                    return "employee_id";
                }

                case EXTENSION: {
                    return "extension";
                }

                case FIRST_NAME: {
                    return "first_name";
                }

                case HIRE_DATE: {
                    return "hire_date";
                }

                case HOME_PHONE: {
                    return "home_phone";
                }

                case LAST_NAME: {
                    return "last_name";
                }

                case NOTES: {
                    return "notes";
                }

                case PHOTO: {
                    return "photo";
                }

                case PHOTO_PATH: {
                    return "photo_path";
                }

                case POSTAL_CODE: {
                    return "postal_code";
                }

                case REGION: {
                    return "region";
                }

                case REPORTS_TO: {
                    return "reports_to";
                }

                case TITLE: {
                    return "title";
                }

                case TITLE_OF_COURTESY: {
                    return "title_of_courtesy";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface employees_var_pop_fieldsQueryDefinition {
        void define(employees_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class employees_var_pop_fieldsQuery extends Query<employees_var_pop_fieldsQuery> {
        employees_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_var_pop_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_var_pop_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class employees_var_pop_fields extends AbstractResponse<employees_var_pop_fields> {
        public employees_var_pop_fields() {
        }

        public employees_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_var_pop_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employees_var_pop_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getReportsTo() {
            return (Double) get("reports_to");
        }

        public employees_var_pop_fields setReportsTo(Double arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_var_pop_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_var_pop_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_var_pop_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_var_samp_fieldsQueryDefinition {
        void define(employees_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class employees_var_samp_fieldsQuery extends Query<employees_var_samp_fieldsQuery> {
        employees_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_var_samp_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_var_samp_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class employees_var_samp_fields extends AbstractResponse<employees_var_samp_fields> {
        public employees_var_samp_fields() {
        }

        public employees_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_var_samp_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employees_var_samp_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getReportsTo() {
            return (Double) get("reports_to");
        }

        public employees_var_samp_fields setReportsTo(Double arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_var_samp_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_var_samp_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_var_samp_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface employees_variance_fieldsQueryDefinition {
        void define(employees_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class employees_variance_fieldsQuery extends Query<employees_variance_fieldsQuery> {
        employees_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public employees_variance_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public employees_variance_fieldsQuery reportsTo() {
            startField("reports_to");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class employees_variance_fields extends AbstractResponse<employees_variance_fields> {
        public employees_variance_fields() {
        }

        public employees_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reports_to": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "employees_variance_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public employees_variance_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getReportsTo() {
            return (Double) get("reports_to");
        }

        public employees_variance_fields setReportsTo(Double arg) {
            optimisticData.put(getKey("reports_to"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "reports_to": return false;

                default: return false;
            }
        }
    }

    public static class employees_variance_order_by implements Serializable {
        private order_by employeeId;

        private order_by reportsTo;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public employees_variance_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getReportsTo() {
            return reportsTo;
        }

        public employees_variance_order_by setReportsTo(order_by reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (reportsTo != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reports_to:");
                _queryBuilder.append(reportsTo.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class integer_comparison_exp implements Serializable {
        private Integer Eq;

        private Integer Gt;

        private Integer Gte;

        private List<Integer> In;

        private Boolean IsNull;

        private Integer Lt;

        private Integer Lte;

        private Integer Neq;

        private List<Integer> Nin;

        public Integer getEq() {
            return Eq;
        }

        public integer_comparison_exp setEq(Integer Eq) {
            this.Eq = Eq;
            return this;
        }

        public Integer getGt() {
            return Gt;
        }

        public integer_comparison_exp setGt(Integer Gt) {
            this.Gt = Gt;
            return this;
        }

        public Integer getGte() {
            return Gte;
        }

        public integer_comparison_exp setGte(Integer Gte) {
            this.Gte = Gte;
            return this;
        }

        public List<Integer> getIn() {
            return In;
        }

        public integer_comparison_exp setIn(List<Integer> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public integer_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public Integer getLt() {
            return Lt;
        }

        public integer_comparison_exp setLt(Integer Lt) {
            this.Lt = Lt;
            return this;
        }

        public Integer getLte() {
            return Lte;
        }

        public integer_comparison_exp setLte(Integer Lte) {
            this.Lte = Lte;
            return this;
        }

        public Integer getNeq() {
            return Neq;
        }

        public integer_comparison_exp setNeq(Integer Neq) {
            this.Neq = Neq;
            return this;
        }

        public List<Integer> getNin() {
            return Nin;
        }

        public integer_comparison_exp setNin(List<Integer> Nin) {
            this.Nin = Nin;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                _queryBuilder.append(Eq);
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                _queryBuilder.append(Gt);
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                _queryBuilder.append(Gte);
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (Integer item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    _queryBuilder.append(item1);
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                _queryBuilder.append(Lt);
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                _queryBuilder.append(Lte);
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                _queryBuilder.append(Neq);
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (Integer item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    _queryBuilder.append(item1);
                }
                _queryBuilder.append(']');
            }

            _queryBuilder.append('}');
        }
    }

    public interface mutation_rootQueryDefinition {
        void define(mutation_rootQuery _queryBuilder);
    }

    /**
    * mutation root
    */
    public static class mutation_rootQuery extends Query<mutation_rootQuery> {
        mutation_rootQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * delete data from the table: "categories"
        */
        public mutation_rootQuery deleteCategories(categories_bool_exp where, categories_mutation_responseQueryDefinition queryDef) {
            startField("delete_categories");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new categories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "customer_customer_demo"
        */
        public mutation_rootQuery deleteCustomerCustomerDemo(customer_customer_demo_bool_exp where, customer_customer_demo_mutation_responseQueryDefinition queryDef) {
            startField("delete_customer_customer_demo");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demo_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "customer_demographics"
        */
        public mutation_rootQuery deleteCustomerDemographics(customer_demographics_bool_exp where, customer_demographics_mutation_responseQueryDefinition queryDef) {
            startField("delete_customer_demographics");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "customers"
        */
        public mutation_rootQuery deleteCustomers(customers_bool_exp where, customers_mutation_responseQueryDefinition queryDef) {
            startField("delete_customers");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "employee_territories"
        */
        public mutation_rootQuery deleteEmployeeTerritories(employee_territories_bool_exp where, employee_territories_mutation_responseQueryDefinition queryDef) {
            startField("delete_employee_territories");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "employees"
        */
        public mutation_rootQuery deleteEmployees(employees_bool_exp where, employees_mutation_responseQueryDefinition queryDef) {
            startField("delete_employees");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employees_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "order_details"
        */
        public mutation_rootQuery deleteOrderDetails(order_details_bool_exp where, order_details_mutation_responseQueryDefinition queryDef) {
            startField("delete_order_details");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new order_details_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "orders"
        */
        public mutation_rootQuery deleteOrders(orders_bool_exp where, orders_mutation_responseQueryDefinition queryDef) {
            startField("delete_orders");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new orders_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "products"
        */
        public mutation_rootQuery deleteProducts(products_bool_exp where, products_mutation_responseQueryDefinition queryDef) {
            startField("delete_products");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new products_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "region"
        */
        public mutation_rootQuery deleteRegion(region_bool_exp where, region_mutation_responseQueryDefinition queryDef) {
            startField("delete_region");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new region_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "shippers"
        */
        public mutation_rootQuery deleteShippers(shippers_bool_exp where, shippers_mutation_responseQueryDefinition queryDef) {
            startField("delete_shippers");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new shippers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "suppliers"
        */
        public mutation_rootQuery deleteSuppliers(suppliers_bool_exp where, suppliers_mutation_responseQueryDefinition queryDef) {
            startField("delete_suppliers");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new suppliers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "territories"
        */
        public mutation_rootQuery deleteTerritories(territories_bool_exp where, territories_mutation_responseQueryDefinition queryDef) {
            startField("delete_territories");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new territories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * delete data from the table: "us_states"
        */
        public mutation_rootQuery deleteUsStates(us_states_bool_exp where, us_states_mutation_responseQueryDefinition queryDef) {
            startField("delete_us_states");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new us_states_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertCategoriesArguments extends Arguments {
            InsertCategoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertCategoriesArguments onConflict(categories_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertCategoriesArgumentsDefinition {
            void define(InsertCategoriesArguments args);
        }

        /**
        * insert data into the table: "categories"
        */
        public mutation_rootQuery insertCategories(List<categories_insert_input> objects, categories_mutation_responseQueryDefinition queryDef) {
            return insertCategories(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "categories"
        */
        public mutation_rootQuery insertCategories(List<categories_insert_input> objects, InsertCategoriesArgumentsDefinition argsDef, categories_mutation_responseQueryDefinition queryDef) {
            startField("insert_categories");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (categories_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertCategoriesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new categories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertCustomerCustomerDemoArguments extends Arguments {
            InsertCustomerCustomerDemoArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertCustomerCustomerDemoArguments onConflict(customer_customer_demo_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertCustomerCustomerDemoArgumentsDefinition {
            void define(InsertCustomerCustomerDemoArguments args);
        }

        /**
        * insert data into the table: "customer_customer_demo"
        */
        public mutation_rootQuery insertCustomerCustomerDemo(List<customer_customer_demo_insert_input> objects, customer_customer_demo_mutation_responseQueryDefinition queryDef) {
            return insertCustomerCustomerDemo(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "customer_customer_demo"
        */
        public mutation_rootQuery insertCustomerCustomerDemo(List<customer_customer_demo_insert_input> objects, InsertCustomerCustomerDemoArgumentsDefinition argsDef, customer_customer_demo_mutation_responseQueryDefinition queryDef) {
            startField("insert_customer_customer_demo");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customer_customer_demo_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertCustomerCustomerDemoArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demo_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertCustomerDemographicsArguments extends Arguments {
            InsertCustomerDemographicsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertCustomerDemographicsArguments onConflict(customer_demographics_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertCustomerDemographicsArgumentsDefinition {
            void define(InsertCustomerDemographicsArguments args);
        }

        /**
        * insert data into the table: "customer_demographics"
        */
        public mutation_rootQuery insertCustomerDemographics(List<customer_demographics_insert_input> objects, customer_demographics_mutation_responseQueryDefinition queryDef) {
            return insertCustomerDemographics(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "customer_demographics"
        */
        public mutation_rootQuery insertCustomerDemographics(List<customer_demographics_insert_input> objects, InsertCustomerDemographicsArgumentsDefinition argsDef, customer_demographics_mutation_responseQueryDefinition queryDef) {
            startField("insert_customer_demographics");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customer_demographics_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertCustomerDemographicsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertCustomersArguments extends Arguments {
            InsertCustomersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertCustomersArguments onConflict(customers_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertCustomersArgumentsDefinition {
            void define(InsertCustomersArguments args);
        }

        /**
        * insert data into the table: "customers"
        */
        public mutation_rootQuery insertCustomers(List<customers_insert_input> objects, customers_mutation_responseQueryDefinition queryDef) {
            return insertCustomers(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "customers"
        */
        public mutation_rootQuery insertCustomers(List<customers_insert_input> objects, InsertCustomersArgumentsDefinition argsDef, customers_mutation_responseQueryDefinition queryDef) {
            startField("insert_customers");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (customers_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertCustomersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertEmployeeTerritoriesArguments extends Arguments {
            InsertEmployeeTerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertEmployeeTerritoriesArguments onConflict(employee_territories_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertEmployeeTerritoriesArgumentsDefinition {
            void define(InsertEmployeeTerritoriesArguments args);
        }

        /**
        * insert data into the table: "employee_territories"
        */
        public mutation_rootQuery insertEmployeeTerritories(List<employee_territories_insert_input> objects, employee_territories_mutation_responseQueryDefinition queryDef) {
            return insertEmployeeTerritories(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "employee_territories"
        */
        public mutation_rootQuery insertEmployeeTerritories(List<employee_territories_insert_input> objects, InsertEmployeeTerritoriesArgumentsDefinition argsDef, employee_territories_mutation_responseQueryDefinition queryDef) {
            startField("insert_employee_territories");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (employee_territories_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertEmployeeTerritoriesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertEmployeesArguments extends Arguments {
            InsertEmployeesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertEmployeesArguments onConflict(employees_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertEmployeesArgumentsDefinition {
            void define(InsertEmployeesArguments args);
        }

        /**
        * insert data into the table: "employees"
        */
        public mutation_rootQuery insertEmployees(List<employees_insert_input> objects, employees_mutation_responseQueryDefinition queryDef) {
            return insertEmployees(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "employees"
        */
        public mutation_rootQuery insertEmployees(List<employees_insert_input> objects, InsertEmployeesArgumentsDefinition argsDef, employees_mutation_responseQueryDefinition queryDef) {
            startField("insert_employees");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (employees_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertEmployeesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employees_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertOrderDetailsArguments extends Arguments {
            InsertOrderDetailsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertOrderDetailsArguments onConflict(order_details_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertOrderDetailsArgumentsDefinition {
            void define(InsertOrderDetailsArguments args);
        }

        /**
        * insert data into the table: "order_details"
        */
        public mutation_rootQuery insertOrderDetails(List<order_details_insert_input> objects, order_details_mutation_responseQueryDefinition queryDef) {
            return insertOrderDetails(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "order_details"
        */
        public mutation_rootQuery insertOrderDetails(List<order_details_insert_input> objects, InsertOrderDetailsArgumentsDefinition argsDef, order_details_mutation_responseQueryDefinition queryDef) {
            startField("insert_order_details");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (order_details_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertOrderDetailsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new order_details_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertOrdersArguments extends Arguments {
            InsertOrdersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertOrdersArguments onConflict(orders_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertOrdersArgumentsDefinition {
            void define(InsertOrdersArguments args);
        }

        /**
        * insert data into the table: "orders"
        */
        public mutation_rootQuery insertOrders(List<orders_insert_input> objects, orders_mutation_responseQueryDefinition queryDef) {
            return insertOrders(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "orders"
        */
        public mutation_rootQuery insertOrders(List<orders_insert_input> objects, InsertOrdersArgumentsDefinition argsDef, orders_mutation_responseQueryDefinition queryDef) {
            startField("insert_orders");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (orders_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertOrdersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new orders_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertProductsArguments extends Arguments {
            InsertProductsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertProductsArguments onConflict(products_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertProductsArgumentsDefinition {
            void define(InsertProductsArguments args);
        }

        /**
        * insert data into the table: "products"
        */
        public mutation_rootQuery insertProducts(List<products_insert_input> objects, products_mutation_responseQueryDefinition queryDef) {
            return insertProducts(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "products"
        */
        public mutation_rootQuery insertProducts(List<products_insert_input> objects, InsertProductsArgumentsDefinition argsDef, products_mutation_responseQueryDefinition queryDef) {
            startField("insert_products");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (products_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertProductsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new products_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertRegionArguments extends Arguments {
            InsertRegionArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertRegionArguments onConflict(region_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertRegionArgumentsDefinition {
            void define(InsertRegionArguments args);
        }

        /**
        * insert data into the table: "region"
        */
        public mutation_rootQuery insertRegion(List<region_insert_input> objects, region_mutation_responseQueryDefinition queryDef) {
            return insertRegion(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "region"
        */
        public mutation_rootQuery insertRegion(List<region_insert_input> objects, InsertRegionArgumentsDefinition argsDef, region_mutation_responseQueryDefinition queryDef) {
            startField("insert_region");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (region_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertRegionArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new region_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertShippersArguments extends Arguments {
            InsertShippersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertShippersArguments onConflict(shippers_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertShippersArgumentsDefinition {
            void define(InsertShippersArguments args);
        }

        /**
        * insert data into the table: "shippers"
        */
        public mutation_rootQuery insertShippers(List<shippers_insert_input> objects, shippers_mutation_responseQueryDefinition queryDef) {
            return insertShippers(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "shippers"
        */
        public mutation_rootQuery insertShippers(List<shippers_insert_input> objects, InsertShippersArgumentsDefinition argsDef, shippers_mutation_responseQueryDefinition queryDef) {
            startField("insert_shippers");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (shippers_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertShippersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new shippers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertSuppliersArguments extends Arguments {
            InsertSuppliersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertSuppliersArguments onConflict(suppliers_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertSuppliersArgumentsDefinition {
            void define(InsertSuppliersArguments args);
        }

        /**
        * insert data into the table: "suppliers"
        */
        public mutation_rootQuery insertSuppliers(List<suppliers_insert_input> objects, suppliers_mutation_responseQueryDefinition queryDef) {
            return insertSuppliers(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "suppliers"
        */
        public mutation_rootQuery insertSuppliers(List<suppliers_insert_input> objects, InsertSuppliersArgumentsDefinition argsDef, suppliers_mutation_responseQueryDefinition queryDef) {
            startField("insert_suppliers");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (suppliers_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertSuppliersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new suppliers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertTerritoriesArguments extends Arguments {
            InsertTerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertTerritoriesArguments onConflict(territories_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertTerritoriesArgumentsDefinition {
            void define(InsertTerritoriesArguments args);
        }

        /**
        * insert data into the table: "territories"
        */
        public mutation_rootQuery insertTerritories(List<territories_insert_input> objects, territories_mutation_responseQueryDefinition queryDef) {
            return insertTerritories(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "territories"
        */
        public mutation_rootQuery insertTerritories(List<territories_insert_input> objects, InsertTerritoriesArgumentsDefinition argsDef, territories_mutation_responseQueryDefinition queryDef) {
            startField("insert_territories");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (territories_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertTerritoriesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new territories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class InsertUsStatesArguments extends Arguments {
            InsertUsStatesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * on conflict condition
            */
            public InsertUsStatesArguments onConflict(us_states_on_conflict value) {
                if (value != null) {
                    startArgument("on_conflict");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface InsertUsStatesArgumentsDefinition {
            void define(InsertUsStatesArguments args);
        }

        /**
        * insert data into the table: "us_states"
        */
        public mutation_rootQuery insertUsStates(List<us_states_insert_input> objects, us_states_mutation_responseQueryDefinition queryDef) {
            return insertUsStates(objects, args -> {}, queryDef);
        }

        /**
        * insert data into the table: "us_states"
        */
        public mutation_rootQuery insertUsStates(List<us_states_insert_input> objects, InsertUsStatesArgumentsDefinition argsDef, us_states_mutation_responseQueryDefinition queryDef) {
            startField("insert_us_states");

            _queryBuilder.append("(objects:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (us_states_insert_input item1 : objects) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            argsDef.define(new InsertUsStatesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new us_states_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateCategoriesArguments extends Arguments {
            UpdateCategoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateCategoriesArguments Inc(categories_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateCategoriesArguments Set(categories_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateCategoriesArgumentsDefinition {
            void define(UpdateCategoriesArguments args);
        }

        /**
        * update data of the table: "categories"
        */
        public mutation_rootQuery updateCategories(categories_bool_exp where, categories_mutation_responseQueryDefinition queryDef) {
            return updateCategories(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "categories"
        */
        public mutation_rootQuery updateCategories(categories_bool_exp where, UpdateCategoriesArgumentsDefinition argsDef, categories_mutation_responseQueryDefinition queryDef) {
            startField("update_categories");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateCategoriesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new categories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateCustomerCustomerDemoArguments extends Arguments {
            UpdateCustomerCustomerDemoArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateCustomerCustomerDemoArguments Set(customer_customer_demo_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateCustomerCustomerDemoArgumentsDefinition {
            void define(UpdateCustomerCustomerDemoArguments args);
        }

        /**
        * update data of the table: "customer_customer_demo"
        */
        public mutation_rootQuery updateCustomerCustomerDemo(customer_customer_demo_bool_exp where, customer_customer_demo_mutation_responseQueryDefinition queryDef) {
            return updateCustomerCustomerDemo(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "customer_customer_demo"
        */
        public mutation_rootQuery updateCustomerCustomerDemo(customer_customer_demo_bool_exp where, UpdateCustomerCustomerDemoArgumentsDefinition argsDef, customer_customer_demo_mutation_responseQueryDefinition queryDef) {
            startField("update_customer_customer_demo");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateCustomerCustomerDemoArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demo_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateCustomerDemographicsArguments extends Arguments {
            UpdateCustomerDemographicsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateCustomerDemographicsArguments Set(customer_demographics_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateCustomerDemographicsArgumentsDefinition {
            void define(UpdateCustomerDemographicsArguments args);
        }

        /**
        * update data of the table: "customer_demographics"
        */
        public mutation_rootQuery updateCustomerDemographics(customer_demographics_bool_exp where, customer_demographics_mutation_responseQueryDefinition queryDef) {
            return updateCustomerDemographics(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "customer_demographics"
        */
        public mutation_rootQuery updateCustomerDemographics(customer_demographics_bool_exp where, UpdateCustomerDemographicsArgumentsDefinition argsDef, customer_demographics_mutation_responseQueryDefinition queryDef) {
            startField("update_customer_demographics");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateCustomerDemographicsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateCustomersArguments extends Arguments {
            UpdateCustomersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateCustomersArguments Set(customers_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateCustomersArgumentsDefinition {
            void define(UpdateCustomersArguments args);
        }

        /**
        * update data of the table: "customers"
        */
        public mutation_rootQuery updateCustomers(customers_bool_exp where, customers_mutation_responseQueryDefinition queryDef) {
            return updateCustomers(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "customers"
        */
        public mutation_rootQuery updateCustomers(customers_bool_exp where, UpdateCustomersArgumentsDefinition argsDef, customers_mutation_responseQueryDefinition queryDef) {
            startField("update_customers");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateCustomersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateEmployeeTerritoriesArguments extends Arguments {
            UpdateEmployeeTerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateEmployeeTerritoriesArguments Inc(employee_territories_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateEmployeeTerritoriesArguments Set(employee_territories_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateEmployeeTerritoriesArgumentsDefinition {
            void define(UpdateEmployeeTerritoriesArguments args);
        }

        /**
        * update data of the table: "employee_territories"
        */
        public mutation_rootQuery updateEmployeeTerritories(employee_territories_bool_exp where, employee_territories_mutation_responseQueryDefinition queryDef) {
            return updateEmployeeTerritories(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "employee_territories"
        */
        public mutation_rootQuery updateEmployeeTerritories(employee_territories_bool_exp where, UpdateEmployeeTerritoriesArgumentsDefinition argsDef, employee_territories_mutation_responseQueryDefinition queryDef) {
            startField("update_employee_territories");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateEmployeeTerritoriesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateEmployeesArguments extends Arguments {
            UpdateEmployeesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateEmployeesArguments Inc(employees_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateEmployeesArguments Set(employees_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateEmployeesArgumentsDefinition {
            void define(UpdateEmployeesArguments args);
        }

        /**
        * update data of the table: "employees"
        */
        public mutation_rootQuery updateEmployees(employees_bool_exp where, employees_mutation_responseQueryDefinition queryDef) {
            return updateEmployees(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "employees"
        */
        public mutation_rootQuery updateEmployees(employees_bool_exp where, UpdateEmployeesArgumentsDefinition argsDef, employees_mutation_responseQueryDefinition queryDef) {
            startField("update_employees");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateEmployeesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employees_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateOrderDetailsArguments extends Arguments {
            UpdateOrderDetailsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateOrderDetailsArguments Inc(order_details_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateOrderDetailsArguments Set(order_details_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateOrderDetailsArgumentsDefinition {
            void define(UpdateOrderDetailsArguments args);
        }

        /**
        * update data of the table: "order_details"
        */
        public mutation_rootQuery updateOrderDetails(order_details_bool_exp where, order_details_mutation_responseQueryDefinition queryDef) {
            return updateOrderDetails(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "order_details"
        */
        public mutation_rootQuery updateOrderDetails(order_details_bool_exp where, UpdateOrderDetailsArgumentsDefinition argsDef, order_details_mutation_responseQueryDefinition queryDef) {
            startField("update_order_details");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateOrderDetailsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new order_details_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateOrdersArguments extends Arguments {
            UpdateOrdersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateOrdersArguments Inc(orders_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateOrdersArguments Set(orders_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateOrdersArgumentsDefinition {
            void define(UpdateOrdersArguments args);
        }

        /**
        * update data of the table: "orders"
        */
        public mutation_rootQuery updateOrders(orders_bool_exp where, orders_mutation_responseQueryDefinition queryDef) {
            return updateOrders(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "orders"
        */
        public mutation_rootQuery updateOrders(orders_bool_exp where, UpdateOrdersArgumentsDefinition argsDef, orders_mutation_responseQueryDefinition queryDef) {
            startField("update_orders");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateOrdersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new orders_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateProductsArguments extends Arguments {
            UpdateProductsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateProductsArguments Inc(products_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateProductsArguments Set(products_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateProductsArgumentsDefinition {
            void define(UpdateProductsArguments args);
        }

        /**
        * update data of the table: "products"
        */
        public mutation_rootQuery updateProducts(products_bool_exp where, products_mutation_responseQueryDefinition queryDef) {
            return updateProducts(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "products"
        */
        public mutation_rootQuery updateProducts(products_bool_exp where, UpdateProductsArgumentsDefinition argsDef, products_mutation_responseQueryDefinition queryDef) {
            startField("update_products");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateProductsArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new products_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateRegionArguments extends Arguments {
            UpdateRegionArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateRegionArguments Inc(region_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateRegionArguments Set(region_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateRegionArgumentsDefinition {
            void define(UpdateRegionArguments args);
        }

        /**
        * update data of the table: "region"
        */
        public mutation_rootQuery updateRegion(region_bool_exp where, region_mutation_responseQueryDefinition queryDef) {
            return updateRegion(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "region"
        */
        public mutation_rootQuery updateRegion(region_bool_exp where, UpdateRegionArgumentsDefinition argsDef, region_mutation_responseQueryDefinition queryDef) {
            startField("update_region");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateRegionArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new region_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateShippersArguments extends Arguments {
            UpdateShippersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateShippersArguments Inc(shippers_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateShippersArguments Set(shippers_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateShippersArgumentsDefinition {
            void define(UpdateShippersArguments args);
        }

        /**
        * update data of the table: "shippers"
        */
        public mutation_rootQuery updateShippers(shippers_bool_exp where, shippers_mutation_responseQueryDefinition queryDef) {
            return updateShippers(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "shippers"
        */
        public mutation_rootQuery updateShippers(shippers_bool_exp where, UpdateShippersArgumentsDefinition argsDef, shippers_mutation_responseQueryDefinition queryDef) {
            startField("update_shippers");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateShippersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new shippers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateSuppliersArguments extends Arguments {
            UpdateSuppliersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateSuppliersArguments Inc(suppliers_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateSuppliersArguments Set(suppliers_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateSuppliersArgumentsDefinition {
            void define(UpdateSuppliersArguments args);
        }

        /**
        * update data of the table: "suppliers"
        */
        public mutation_rootQuery updateSuppliers(suppliers_bool_exp where, suppliers_mutation_responseQueryDefinition queryDef) {
            return updateSuppliers(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "suppliers"
        */
        public mutation_rootQuery updateSuppliers(suppliers_bool_exp where, UpdateSuppliersArgumentsDefinition argsDef, suppliers_mutation_responseQueryDefinition queryDef) {
            startField("update_suppliers");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateSuppliersArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new suppliers_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateTerritoriesArguments extends Arguments {
            UpdateTerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateTerritoriesArguments Inc(territories_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateTerritoriesArguments Set(territories_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateTerritoriesArgumentsDefinition {
            void define(UpdateTerritoriesArguments args);
        }

        /**
        * update data of the table: "territories"
        */
        public mutation_rootQuery updateTerritories(territories_bool_exp where, territories_mutation_responseQueryDefinition queryDef) {
            return updateTerritories(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "territories"
        */
        public mutation_rootQuery updateTerritories(territories_bool_exp where, UpdateTerritoriesArgumentsDefinition argsDef, territories_mutation_responseQueryDefinition queryDef) {
            startField("update_territories");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateTerritoriesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new territories_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UpdateUsStatesArguments extends Arguments {
            UpdateUsStatesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, false);
            }

            /**
            * increments the integer columns with given value of the filtered values
            */
            public UpdateUsStatesArguments Inc(us_states_inc_input value) {
                if (value != null) {
                    startArgument("_inc");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }

            /**
            * sets the columns of the filtered rows to the given values
            */
            public UpdateUsStatesArguments Set(us_states_set_input value) {
                if (value != null) {
                    startArgument("_set");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UpdateUsStatesArgumentsDefinition {
            void define(UpdateUsStatesArguments args);
        }

        /**
        * update data of the table: "us_states"
        */
        public mutation_rootQuery updateUsStates(us_states_bool_exp where, us_states_mutation_responseQueryDefinition queryDef) {
            return updateUsStates(where, args -> {}, queryDef);
        }

        /**
        * update data of the table: "us_states"
        */
        public mutation_rootQuery updateUsStates(us_states_bool_exp where, UpdateUsStatesArgumentsDefinition argsDef, us_states_mutation_responseQueryDefinition queryDef) {
            startField("update_us_states");

            _queryBuilder.append("(where:");
            where.appendTo(_queryBuilder);

            argsDef.define(new UpdateUsStatesArguments(_queryBuilder));

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new us_states_mutation_responseQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public String toString() {
            return _queryBuilder.toString();
        }
    }

    /**
    * mutation root
    */
    public static class mutation_root extends AbstractResponse<mutation_root> {
        public mutation_root() {
        }

        public mutation_root(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "delete_categories": {
                        categories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_customer_customer_demo": {
                        customer_customer_demo_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_customer_demo_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_customer_demographics": {
                        customer_demographics_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_customers": {
                        customers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_employee_territories": {
                        employee_territories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_employees": {
                        employees_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_order_details": {
                        order_details_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_orders": {
                        orders_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_products": {
                        products_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_region": {
                        region_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_shippers": {
                        shippers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_suppliers": {
                        suppliers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_territories": {
                        territories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "delete_us_states": {
                        us_states_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_categories": {
                        categories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_customer_customer_demo": {
                        customer_customer_demo_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_customer_demo_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_customer_demographics": {
                        customer_demographics_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_customers": {
                        customers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_employee_territories": {
                        employee_territories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_employees": {
                        employees_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_order_details": {
                        order_details_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_orders": {
                        orders_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_products": {
                        products_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_region": {
                        region_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_shippers": {
                        shippers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_suppliers": {
                        suppliers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_territories": {
                        territories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "insert_us_states": {
                        us_states_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_categories": {
                        categories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_customer_customer_demo": {
                        customer_customer_demo_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_customer_demo_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_customer_demographics": {
                        customer_demographics_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_customers": {
                        customers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_employee_territories": {
                        employee_territories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_employees": {
                        employees_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_order_details": {
                        order_details_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_orders": {
                        orders_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_products": {
                        products_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_region": {
                        region_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_shippers": {
                        shippers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_suppliers": {
                        suppliers_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_territories": {
                        territories_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "update_us_states": {
                        us_states_mutation_response optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_mutation_response(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "mutation_root";
        }

        /**
        * delete data from the table: "categories"
        */

        public categories_mutation_response getDeleteCategories() {
            return (categories_mutation_response) get("delete_categories");
        }

        public mutation_root setDeleteCategories(categories_mutation_response arg) {
            optimisticData.put(getKey("delete_categories"), arg);
            return this;
        }

        /**
        * delete data from the table: "customer_customer_demo"
        */

        public customer_customer_demo_mutation_response getDeleteCustomerCustomerDemo() {
            return (customer_customer_demo_mutation_response) get("delete_customer_customer_demo");
        }

        public mutation_root setDeleteCustomerCustomerDemo(customer_customer_demo_mutation_response arg) {
            optimisticData.put(getKey("delete_customer_customer_demo"), arg);
            return this;
        }

        /**
        * delete data from the table: "customer_demographics"
        */

        public customer_demographics_mutation_response getDeleteCustomerDemographics() {
            return (customer_demographics_mutation_response) get("delete_customer_demographics");
        }

        public mutation_root setDeleteCustomerDemographics(customer_demographics_mutation_response arg) {
            optimisticData.put(getKey("delete_customer_demographics"), arg);
            return this;
        }

        /**
        * delete data from the table: "customers"
        */

        public customers_mutation_response getDeleteCustomers() {
            return (customers_mutation_response) get("delete_customers");
        }

        public mutation_root setDeleteCustomers(customers_mutation_response arg) {
            optimisticData.put(getKey("delete_customers"), arg);
            return this;
        }

        /**
        * delete data from the table: "employee_territories"
        */

        public employee_territories_mutation_response getDeleteEmployeeTerritories() {
            return (employee_territories_mutation_response) get("delete_employee_territories");
        }

        public mutation_root setDeleteEmployeeTerritories(employee_territories_mutation_response arg) {
            optimisticData.put(getKey("delete_employee_territories"), arg);
            return this;
        }

        /**
        * delete data from the table: "employees"
        */

        public employees_mutation_response getDeleteEmployees() {
            return (employees_mutation_response) get("delete_employees");
        }

        public mutation_root setDeleteEmployees(employees_mutation_response arg) {
            optimisticData.put(getKey("delete_employees"), arg);
            return this;
        }

        /**
        * delete data from the table: "order_details"
        */

        public order_details_mutation_response getDeleteOrderDetails() {
            return (order_details_mutation_response) get("delete_order_details");
        }

        public mutation_root setDeleteOrderDetails(order_details_mutation_response arg) {
            optimisticData.put(getKey("delete_order_details"), arg);
            return this;
        }

        /**
        * delete data from the table: "orders"
        */

        public orders_mutation_response getDeleteOrders() {
            return (orders_mutation_response) get("delete_orders");
        }

        public mutation_root setDeleteOrders(orders_mutation_response arg) {
            optimisticData.put(getKey("delete_orders"), arg);
            return this;
        }

        /**
        * delete data from the table: "products"
        */

        public products_mutation_response getDeleteProducts() {
            return (products_mutation_response) get("delete_products");
        }

        public mutation_root setDeleteProducts(products_mutation_response arg) {
            optimisticData.put(getKey("delete_products"), arg);
            return this;
        }

        /**
        * delete data from the table: "region"
        */

        public region_mutation_response getDeleteRegion() {
            return (region_mutation_response) get("delete_region");
        }

        public mutation_root setDeleteRegion(region_mutation_response arg) {
            optimisticData.put(getKey("delete_region"), arg);
            return this;
        }

        /**
        * delete data from the table: "shippers"
        */

        public shippers_mutation_response getDeleteShippers() {
            return (shippers_mutation_response) get("delete_shippers");
        }

        public mutation_root setDeleteShippers(shippers_mutation_response arg) {
            optimisticData.put(getKey("delete_shippers"), arg);
            return this;
        }

        /**
        * delete data from the table: "suppliers"
        */

        public suppliers_mutation_response getDeleteSuppliers() {
            return (suppliers_mutation_response) get("delete_suppliers");
        }

        public mutation_root setDeleteSuppliers(suppliers_mutation_response arg) {
            optimisticData.put(getKey("delete_suppliers"), arg);
            return this;
        }

        /**
        * delete data from the table: "territories"
        */

        public territories_mutation_response getDeleteTerritories() {
            return (territories_mutation_response) get("delete_territories");
        }

        public mutation_root setDeleteTerritories(territories_mutation_response arg) {
            optimisticData.put(getKey("delete_territories"), arg);
            return this;
        }

        /**
        * delete data from the table: "us_states"
        */

        public us_states_mutation_response getDeleteUsStates() {
            return (us_states_mutation_response) get("delete_us_states");
        }

        public mutation_root setDeleteUsStates(us_states_mutation_response arg) {
            optimisticData.put(getKey("delete_us_states"), arg);
            return this;
        }

        /**
        * insert data into the table: "categories"
        */

        public categories_mutation_response getInsertCategories() {
            return (categories_mutation_response) get("insert_categories");
        }

        public mutation_root setInsertCategories(categories_mutation_response arg) {
            optimisticData.put(getKey("insert_categories"), arg);
            return this;
        }

        /**
        * insert data into the table: "customer_customer_demo"
        */

        public customer_customer_demo_mutation_response getInsertCustomerCustomerDemo() {
            return (customer_customer_demo_mutation_response) get("insert_customer_customer_demo");
        }

        public mutation_root setInsertCustomerCustomerDemo(customer_customer_demo_mutation_response arg) {
            optimisticData.put(getKey("insert_customer_customer_demo"), arg);
            return this;
        }

        /**
        * insert data into the table: "customer_demographics"
        */

        public customer_demographics_mutation_response getInsertCustomerDemographics() {
            return (customer_demographics_mutation_response) get("insert_customer_demographics");
        }

        public mutation_root setInsertCustomerDemographics(customer_demographics_mutation_response arg) {
            optimisticData.put(getKey("insert_customer_demographics"), arg);
            return this;
        }

        /**
        * insert data into the table: "customers"
        */

        public customers_mutation_response getInsertCustomers() {
            return (customers_mutation_response) get("insert_customers");
        }

        public mutation_root setInsertCustomers(customers_mutation_response arg) {
            optimisticData.put(getKey("insert_customers"), arg);
            return this;
        }

        /**
        * insert data into the table: "employee_territories"
        */

        public employee_territories_mutation_response getInsertEmployeeTerritories() {
            return (employee_territories_mutation_response) get("insert_employee_territories");
        }

        public mutation_root setInsertEmployeeTerritories(employee_territories_mutation_response arg) {
            optimisticData.put(getKey("insert_employee_territories"), arg);
            return this;
        }

        /**
        * insert data into the table: "employees"
        */

        public employees_mutation_response getInsertEmployees() {
            return (employees_mutation_response) get("insert_employees");
        }

        public mutation_root setInsertEmployees(employees_mutation_response arg) {
            optimisticData.put(getKey("insert_employees"), arg);
            return this;
        }

        /**
        * insert data into the table: "order_details"
        */

        public order_details_mutation_response getInsertOrderDetails() {
            return (order_details_mutation_response) get("insert_order_details");
        }

        public mutation_root setInsertOrderDetails(order_details_mutation_response arg) {
            optimisticData.put(getKey("insert_order_details"), arg);
            return this;
        }

        /**
        * insert data into the table: "orders"
        */

        public orders_mutation_response getInsertOrders() {
            return (orders_mutation_response) get("insert_orders");
        }

        public mutation_root setInsertOrders(orders_mutation_response arg) {
            optimisticData.put(getKey("insert_orders"), arg);
            return this;
        }

        /**
        * insert data into the table: "products"
        */

        public products_mutation_response getInsertProducts() {
            return (products_mutation_response) get("insert_products");
        }

        public mutation_root setInsertProducts(products_mutation_response arg) {
            optimisticData.put(getKey("insert_products"), arg);
            return this;
        }

        /**
        * insert data into the table: "region"
        */

        public region_mutation_response getInsertRegion() {
            return (region_mutation_response) get("insert_region");
        }

        public mutation_root setInsertRegion(region_mutation_response arg) {
            optimisticData.put(getKey("insert_region"), arg);
            return this;
        }

        /**
        * insert data into the table: "shippers"
        */

        public shippers_mutation_response getInsertShippers() {
            return (shippers_mutation_response) get("insert_shippers");
        }

        public mutation_root setInsertShippers(shippers_mutation_response arg) {
            optimisticData.put(getKey("insert_shippers"), arg);
            return this;
        }

        /**
        * insert data into the table: "suppliers"
        */

        public suppliers_mutation_response getInsertSuppliers() {
            return (suppliers_mutation_response) get("insert_suppliers");
        }

        public mutation_root setInsertSuppliers(suppliers_mutation_response arg) {
            optimisticData.put(getKey("insert_suppliers"), arg);
            return this;
        }

        /**
        * insert data into the table: "territories"
        */

        public territories_mutation_response getInsertTerritories() {
            return (territories_mutation_response) get("insert_territories");
        }

        public mutation_root setInsertTerritories(territories_mutation_response arg) {
            optimisticData.put(getKey("insert_territories"), arg);
            return this;
        }

        /**
        * insert data into the table: "us_states"
        */

        public us_states_mutation_response getInsertUsStates() {
            return (us_states_mutation_response) get("insert_us_states");
        }

        public mutation_root setInsertUsStates(us_states_mutation_response arg) {
            optimisticData.put(getKey("insert_us_states"), arg);
            return this;
        }

        /**
        * update data of the table: "categories"
        */

        public categories_mutation_response getUpdateCategories() {
            return (categories_mutation_response) get("update_categories");
        }

        public mutation_root setUpdateCategories(categories_mutation_response arg) {
            optimisticData.put(getKey("update_categories"), arg);
            return this;
        }

        /**
        * update data of the table: "customer_customer_demo"
        */

        public customer_customer_demo_mutation_response getUpdateCustomerCustomerDemo() {
            return (customer_customer_demo_mutation_response) get("update_customer_customer_demo");
        }

        public mutation_root setUpdateCustomerCustomerDemo(customer_customer_demo_mutation_response arg) {
            optimisticData.put(getKey("update_customer_customer_demo"), arg);
            return this;
        }

        /**
        * update data of the table: "customer_demographics"
        */

        public customer_demographics_mutation_response getUpdateCustomerDemographics() {
            return (customer_demographics_mutation_response) get("update_customer_demographics");
        }

        public mutation_root setUpdateCustomerDemographics(customer_demographics_mutation_response arg) {
            optimisticData.put(getKey("update_customer_demographics"), arg);
            return this;
        }

        /**
        * update data of the table: "customers"
        */

        public customers_mutation_response getUpdateCustomers() {
            return (customers_mutation_response) get("update_customers");
        }

        public mutation_root setUpdateCustomers(customers_mutation_response arg) {
            optimisticData.put(getKey("update_customers"), arg);
            return this;
        }

        /**
        * update data of the table: "employee_territories"
        */

        public employee_territories_mutation_response getUpdateEmployeeTerritories() {
            return (employee_territories_mutation_response) get("update_employee_territories");
        }

        public mutation_root setUpdateEmployeeTerritories(employee_territories_mutation_response arg) {
            optimisticData.put(getKey("update_employee_territories"), arg);
            return this;
        }

        /**
        * update data of the table: "employees"
        */

        public employees_mutation_response getUpdateEmployees() {
            return (employees_mutation_response) get("update_employees");
        }

        public mutation_root setUpdateEmployees(employees_mutation_response arg) {
            optimisticData.put(getKey("update_employees"), arg);
            return this;
        }

        /**
        * update data of the table: "order_details"
        */

        public order_details_mutation_response getUpdateOrderDetails() {
            return (order_details_mutation_response) get("update_order_details");
        }

        public mutation_root setUpdateOrderDetails(order_details_mutation_response arg) {
            optimisticData.put(getKey("update_order_details"), arg);
            return this;
        }

        /**
        * update data of the table: "orders"
        */

        public orders_mutation_response getUpdateOrders() {
            return (orders_mutation_response) get("update_orders");
        }

        public mutation_root setUpdateOrders(orders_mutation_response arg) {
            optimisticData.put(getKey("update_orders"), arg);
            return this;
        }

        /**
        * update data of the table: "products"
        */

        public products_mutation_response getUpdateProducts() {
            return (products_mutation_response) get("update_products");
        }

        public mutation_root setUpdateProducts(products_mutation_response arg) {
            optimisticData.put(getKey("update_products"), arg);
            return this;
        }

        /**
        * update data of the table: "region"
        */

        public region_mutation_response getUpdateRegion() {
            return (region_mutation_response) get("update_region");
        }

        public mutation_root setUpdateRegion(region_mutation_response arg) {
            optimisticData.put(getKey("update_region"), arg);
            return this;
        }

        /**
        * update data of the table: "shippers"
        */

        public shippers_mutation_response getUpdateShippers() {
            return (shippers_mutation_response) get("update_shippers");
        }

        public mutation_root setUpdateShippers(shippers_mutation_response arg) {
            optimisticData.put(getKey("update_shippers"), arg);
            return this;
        }

        /**
        * update data of the table: "suppliers"
        */

        public suppliers_mutation_response getUpdateSuppliers() {
            return (suppliers_mutation_response) get("update_suppliers");
        }

        public mutation_root setUpdateSuppliers(suppliers_mutation_response arg) {
            optimisticData.put(getKey("update_suppliers"), arg);
            return this;
        }

        /**
        * update data of the table: "territories"
        */

        public territories_mutation_response getUpdateTerritories() {
            return (territories_mutation_response) get("update_territories");
        }

        public mutation_root setUpdateTerritories(territories_mutation_response arg) {
            optimisticData.put(getKey("update_territories"), arg);
            return this;
        }

        /**
        * update data of the table: "us_states"
        */

        public us_states_mutation_response getUpdateUsStates() {
            return (us_states_mutation_response) get("update_us_states");
        }

        public mutation_root setUpdateUsStates(us_states_mutation_response arg) {
            optimisticData.put(getKey("update_us_states"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "delete_categories": return true;

                case "delete_customer_customer_demo": return true;

                case "delete_customer_demographics": return true;

                case "delete_customers": return true;

                case "delete_employee_territories": return true;

                case "delete_employees": return true;

                case "delete_order_details": return true;

                case "delete_orders": return true;

                case "delete_products": return true;

                case "delete_region": return true;

                case "delete_shippers": return true;

                case "delete_suppliers": return true;

                case "delete_territories": return true;

                case "delete_us_states": return true;

                case "insert_categories": return true;

                case "insert_customer_customer_demo": return true;

                case "insert_customer_demographics": return true;

                case "insert_customers": return true;

                case "insert_employee_territories": return true;

                case "insert_employees": return true;

                case "insert_order_details": return true;

                case "insert_orders": return true;

                case "insert_products": return true;

                case "insert_region": return true;

                case "insert_shippers": return true;

                case "insert_suppliers": return true;

                case "insert_territories": return true;

                case "insert_us_states": return true;

                case "update_categories": return true;

                case "update_customer_customer_demo": return true;

                case "update_customer_demographics": return true;

                case "update_customers": return true;

                case "update_employee_territories": return true;

                case "update_employees": return true;

                case "update_order_details": return true;

                case "update_orders": return true;

                case "update_products": return true;

                case "update_region": return true;

                case "update_shippers": return true;

                case "update_suppliers": return true;

                case "update_territories": return true;

                case "update_us_states": return true;

                default: return false;
            }
        }
    }

    /**
    * column ordering options
    */
    public enum order_by {
        ASC,

        ASC_NULLS_FIRST,

        ASC_NULLS_LAST,

        DESC,

        DESC_NULLS_FIRST,

        DESC_NULLS_LAST,

        UNKNOWN_VALUE;

        public static order_by fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "asc": {
                    return ASC;
                }

                case "asc_nulls_first": {
                    return ASC_NULLS_FIRST;
                }

                case "asc_nulls_last": {
                    return ASC_NULLS_LAST;
                }

                case "desc": {
                    return DESC;
                }

                case "desc_nulls_first": {
                    return DESC_NULLS_FIRST;
                }

                case "desc_nulls_last": {
                    return DESC_NULLS_LAST;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ASC: {
                    return "asc";
                }

                case ASC_NULLS_FIRST: {
                    return "asc_nulls_first";
                }

                case ASC_NULLS_LAST: {
                    return "asc_nulls_last";
                }

                case DESC: {
                    return "desc";
                }

                case DESC_NULLS_FIRST: {
                    return "desc_nulls_first";
                }

                case DESC_NULLS_LAST: {
                    return "desc_nulls_last";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface order_detailsQueryDefinition {
        void define(order_detailsQuery _queryBuilder);
    }

    /**
    * columns and relationships of "order_details"
    */
    public static class order_detailsQuery extends Query<order_detailsQuery> {
        order_detailsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_detailsQuery discount() {
            startField("discount");

            return this;
        }

        /**
        * An object relationship
        */
        public order_detailsQuery order(ordersQueryDefinition queryDef) {
            startField("order");

            _queryBuilder.append('{');
            queryDef.define(new ordersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_detailsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_detailsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_detailsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_detailsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * columns and relationships of "order_details"
    */
    public static class order_details extends AbstractResponse<order_details> {
        public order_details() {
        }

        public order_details(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        responseData.put(key, jsonAsDouble(field.getValue(), key));

                        break;
                    }

                    case "order": {
                        responseData.put(key, new orders(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "order_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "product_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "quantity": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "unit_price": {
                        responseData.put(key, jsonAsDouble(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        /**
        * An object relationship
        */

        public orders getOrder() {
            return (orders) get("order");
        }

        public order_details setOrder(orders arg) {
            optimisticData.put(getKey("order"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public order_details setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public order_details setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public order_details setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order": return true;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public interface order_details_aggregateQueryDefinition {
        void define(order_details_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "order_details"
    */
    public static class order_details_aggregateQuery extends Query<order_details_aggregateQuery> {
        order_details_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_aggregateQuery aggregate(order_details_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new order_details_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregateQuery nodes(order_detailsQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new order_detailsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "order_details"
    */
    public static class order_details_aggregate extends AbstractResponse<order_details_aggregate> {
        public order_details_aggregate() {
        }

        public order_details_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        order_details_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<order_details> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new order_details(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_aggregate";
        }

        public order_details_aggregate_fields getAggregate() {
            return (order_details_aggregate_fields) get("aggregate");
        }

        public order_details_aggregate setAggregate(order_details_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<order_details> getNodes() {
            return (List<order_details>) get("nodes");
        }

        public order_details_aggregate setNodes(List<order_details> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface order_details_aggregate_fieldsQueryDefinition {
        void define(order_details_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "order_details"
    */
    public static class order_details_aggregate_fieldsQuery extends Query<order_details_aggregate_fieldsQuery> {
        order_details_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_aggregate_fieldsQuery avg(order_details_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new order_details_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<order_details_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public order_details_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public order_details_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public order_details_aggregate_fieldsQuery max(order_details_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new order_details_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery min(order_details_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new order_details_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery stddev(order_details_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new order_details_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery stddevPop(order_details_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new order_details_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery stddevSamp(order_details_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new order_details_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery sum(order_details_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new order_details_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery varPop(order_details_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new order_details_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery varSamp(order_details_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new order_details_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public order_details_aggregate_fieldsQuery variance(order_details_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new order_details_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "order_details"
    */
    public static class order_details_aggregate_fields extends AbstractResponse<order_details_aggregate_fields> {
        public order_details_aggregate_fields() {
        }

        public order_details_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        order_details_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        order_details_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        order_details_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        order_details_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        order_details_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        order_details_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        order_details_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        order_details_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        order_details_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        order_details_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_aggregate_fields";
        }

        public order_details_avg_fields getAvg() {
            return (order_details_avg_fields) get("avg");
        }

        public order_details_aggregate_fields setAvg(order_details_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public order_details_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public order_details_max_fields getMax() {
            return (order_details_max_fields) get("max");
        }

        public order_details_aggregate_fields setMax(order_details_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public order_details_min_fields getMin() {
            return (order_details_min_fields) get("min");
        }

        public order_details_aggregate_fields setMin(order_details_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public order_details_stddev_fields getStddev() {
            return (order_details_stddev_fields) get("stddev");
        }

        public order_details_aggregate_fields setStddev(order_details_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public order_details_stddev_pop_fields getStddevPop() {
            return (order_details_stddev_pop_fields) get("stddev_pop");
        }

        public order_details_aggregate_fields setStddevPop(order_details_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public order_details_stddev_samp_fields getStddevSamp() {
            return (order_details_stddev_samp_fields) get("stddev_samp");
        }

        public order_details_aggregate_fields setStddevSamp(order_details_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public order_details_sum_fields getSum() {
            return (order_details_sum_fields) get("sum");
        }

        public order_details_aggregate_fields setSum(order_details_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public order_details_var_pop_fields getVarPop() {
            return (order_details_var_pop_fields) get("var_pop");
        }

        public order_details_aggregate_fields setVarPop(order_details_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public order_details_var_samp_fields getVarSamp() {
            return (order_details_var_samp_fields) get("var_samp");
        }

        public order_details_aggregate_fields setVarSamp(order_details_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public order_details_variance_fields getVariance() {
            return (order_details_variance_fields) get("variance");
        }

        public order_details_aggregate_fields setVariance(order_details_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class order_details_aggregate_order_by implements Serializable {
        private order_details_avg_order_by avg;

        private order_by count;

        private order_details_max_order_by max;

        private order_details_min_order_by min;

        private order_details_stddev_order_by stddev;

        private order_details_stddev_pop_order_by stddevPop;

        private order_details_stddev_samp_order_by stddevSamp;

        private order_details_sum_order_by sum;

        private order_details_var_pop_order_by varPop;

        private order_details_var_samp_order_by varSamp;

        private order_details_variance_order_by variance;

        public order_details_avg_order_by getAvg() {
            return avg;
        }

        public order_details_aggregate_order_by setAvg(order_details_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public order_details_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public order_details_max_order_by getMax() {
            return max;
        }

        public order_details_aggregate_order_by setMax(order_details_max_order_by max) {
            this.max = max;
            return this;
        }

        public order_details_min_order_by getMin() {
            return min;
        }

        public order_details_aggregate_order_by setMin(order_details_min_order_by min) {
            this.min = min;
            return this;
        }

        public order_details_stddev_order_by getStddev() {
            return stddev;
        }

        public order_details_aggregate_order_by setStddev(order_details_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public order_details_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public order_details_aggregate_order_by setStddevPop(order_details_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public order_details_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public order_details_aggregate_order_by setStddevSamp(order_details_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public order_details_sum_order_by getSum() {
            return sum;
        }

        public order_details_aggregate_order_by setSum(order_details_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public order_details_var_pop_order_by getVarPop() {
            return varPop;
        }

        public order_details_aggregate_order_by setVarPop(order_details_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public order_details_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public order_details_aggregate_order_by setVarSamp(order_details_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public order_details_variance_order_by getVariance() {
            return variance;
        }

        public order_details_aggregate_order_by setVariance(order_details_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class order_details_arr_rel_insert_input implements Serializable {
        private List<order_details_insert_input> data;

        private order_details_on_conflict onConflict;

        public order_details_arr_rel_insert_input(List<order_details_insert_input> data) {
            this.data = data;
        }

        public List<order_details_insert_input> getData() {
            return data;
        }

        public order_details_arr_rel_insert_input setData(List<order_details_insert_input> data) {
            this.data = data;
            return this;
        }

        public order_details_on_conflict getOnConflict() {
            return onConflict;
        }

        public order_details_arr_rel_insert_input setOnConflict(order_details_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (order_details_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_avg_fieldsQueryDefinition {
        void define(order_details_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class order_details_avg_fieldsQuery extends Query<order_details_avg_fieldsQuery> {
        order_details_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_avg_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_avg_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_avg_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_avg_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_avg_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class order_details_avg_fields extends AbstractResponse<order_details_avg_fields> {
        public order_details_avg_fields() {
        }

        public order_details_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_avg_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_avg_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public order_details_avg_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public order_details_avg_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getQuantity() {
            return (Double) get("quantity");
        }

        public order_details_avg_fields setQuantity(Double arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_avg_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_avg_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_avg_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_avg_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_avg_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_avg_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_avg_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class order_details_bool_exp implements Serializable {
        private List<order_details_bool_exp> And;

        private order_details_bool_exp Not;

        private List<order_details_bool_exp> Or;

        private real_comparison_exp discount;

        private orders_bool_exp order;

        private Int_comparison_exp orderId;

        private Int_comparison_exp productId;

        private Int_comparison_exp quantity;

        private real_comparison_exp unitPrice;

        public List<order_details_bool_exp> getAnd() {
            return And;
        }

        public order_details_bool_exp setAnd(List<order_details_bool_exp> And) {
            this.And = And;
            return this;
        }

        public order_details_bool_exp getNot() {
            return Not;
        }

        public order_details_bool_exp setNot(order_details_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<order_details_bool_exp> getOr() {
            return Or;
        }

        public order_details_bool_exp setOr(List<order_details_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public real_comparison_exp getDiscount() {
            return discount;
        }

        public order_details_bool_exp setDiscount(real_comparison_exp discount) {
            this.discount = discount;
            return this;
        }

        public orders_bool_exp getOrder() {
            return order;
        }

        public order_details_bool_exp setOrder(orders_bool_exp order) {
            this.order = order;
            return this;
        }

        public Int_comparison_exp getOrderId() {
            return orderId;
        }

        public order_details_bool_exp setOrderId(Int_comparison_exp orderId) {
            this.orderId = orderId;
            return this;
        }

        public Int_comparison_exp getProductId() {
            return productId;
        }

        public order_details_bool_exp setProductId(Int_comparison_exp productId) {
            this.productId = productId;
            return this;
        }

        public Int_comparison_exp getQuantity() {
            return quantity;
        }

        public order_details_bool_exp setQuantity(Int_comparison_exp quantity) {
            this.quantity = quantity;
            return this;
        }

        public real_comparison_exp getUnitPrice() {
            return unitPrice;
        }

        public order_details_bool_exp setUnitPrice(real_comparison_exp unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (order_details_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (order_details_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                discount.appendTo(_queryBuilder);
            }

            if (order != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order:");
                order.appendTo(_queryBuilder);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                orderId.appendTo(_queryBuilder);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                productId.appendTo(_queryBuilder);
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                quantity.appendTo(_queryBuilder);
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                unitPrice.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "order_details"
    */
    public enum order_details_constraint {
        PK_ORDER_DETAILS,

        UNKNOWN_VALUE;

        public static order_details_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_order_details": {
                    return PK_ORDER_DETAILS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_ORDER_DETAILS: {
                    return "pk_order_details";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class order_details_inc_input implements Serializable {
        private Integer orderId;

        private Integer productId;

        private Integer quantity;

        public Integer getOrderId() {
            return orderId;
        }

        public order_details_inc_input setOrderId(Integer orderId) {
            this.orderId = orderId;
            return this;
        }

        public Integer getProductId() {
            return productId;
        }

        public order_details_inc_input setProductId(Integer productId) {
            this.productId = productId;
            return this;
        }

        public Integer getQuantity() {
            return quantity;
        }

        public order_details_inc_input setQuantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId);
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity);
            }

            _queryBuilder.append('}');
        }
    }

    public static class order_details_insert_input implements Serializable {
        private Double discount;

        private orders_obj_rel_insert_input order;

        private Integer orderId;

        private Integer productId;

        private Integer quantity;

        private Double unitPrice;

        public Double getDiscount() {
            return discount;
        }

        public order_details_insert_input setDiscount(Double discount) {
            this.discount = discount;
            return this;
        }

        public orders_obj_rel_insert_input getOrder() {
            return order;
        }

        public order_details_insert_input setOrder(orders_obj_rel_insert_input order) {
            this.order = order;
            return this;
        }

        public Integer getOrderId() {
            return orderId;
        }

        public order_details_insert_input setOrderId(Integer orderId) {
            this.orderId = orderId;
            return this;
        }

        public Integer getProductId() {
            return productId;
        }

        public order_details_insert_input setProductId(Integer productId) {
            this.productId = productId;
            return this;
        }

        public Integer getQuantity() {
            return quantity;
        }

        public order_details_insert_input setQuantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }

        public Double getUnitPrice() {
            return unitPrice;
        }

        public order_details_insert_input setUnitPrice(Double unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount);
            }

            if (order != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order:");
                order.appendTo(_queryBuilder);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId);
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity);
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice);
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_max_fieldsQueryDefinition {
        void define(order_details_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class order_details_max_fieldsQuery extends Query<order_details_max_fieldsQuery> {
        order_details_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_max_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_max_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_max_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_max_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_max_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class order_details_max_fields extends AbstractResponse<order_details_max_fields> {
        public order_details_max_fields() {
        }

        public order_details_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_max_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_max_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public order_details_max_fields setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public order_details_max_fields setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public order_details_max_fields setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_max_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_max_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_max_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_max_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_max_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_max_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_max_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_min_fieldsQueryDefinition {
        void define(order_details_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class order_details_min_fieldsQuery extends Query<order_details_min_fieldsQuery> {
        order_details_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_min_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_min_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_min_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_min_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_min_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class order_details_min_fields extends AbstractResponse<order_details_min_fields> {
        public order_details_min_fields() {
        }

        public order_details_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_min_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_min_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public order_details_min_fields setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public order_details_min_fields setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public order_details_min_fields setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_min_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_min_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_min_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_min_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_min_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_min_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_min_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_mutation_responseQueryDefinition {
        void define(order_details_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "order_details"
    */
    public static class order_details_mutation_responseQuery extends Query<order_details_mutation_responseQuery> {
        order_details_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public order_details_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public order_details_mutation_responseQuery returning(order_detailsQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new order_detailsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "order_details"
    */
    public static class order_details_mutation_response extends AbstractResponse<order_details_mutation_response> {
        public order_details_mutation_response() {
        }

        public order_details_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<order_details> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new order_details(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public order_details_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<order_details> getReturning() {
            return (List<order_details>) get("returning");
        }

        public order_details_mutation_response setReturning(List<order_details> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class order_details_obj_rel_insert_input implements Serializable {
        private order_details_insert_input data;

        private order_details_on_conflict onConflict;

        public order_details_obj_rel_insert_input(order_details_insert_input data) {
            this.data = data;
        }

        public order_details_insert_input getData() {
            return data;
        }

        public order_details_obj_rel_insert_input setData(order_details_insert_input data) {
            this.data = data;
            return this;
        }

        public order_details_on_conflict getOnConflict() {
            return onConflict;
        }

        public order_details_obj_rel_insert_input setOnConflict(order_details_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class order_details_on_conflict implements Serializable {
        private order_details_constraint constraint;

        private List<order_details_update_column> updateColumns;

        public order_details_on_conflict(order_details_constraint constraint, List<order_details_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public order_details_constraint getConstraint() {
            return constraint;
        }

        public order_details_on_conflict setConstraint(order_details_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<order_details_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public order_details_on_conflict setUpdateColumns(List<order_details_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (order_details_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class order_details_order_by implements Serializable {
        private order_by discount;

        private orders_order_by order;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public orders_order_by getOrder() {
            return order;
        }

        public order_details_order_by setOrder(orders_order_by order) {
            this.order = order;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (order != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order:");
                order.appendTo(_queryBuilder);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "order_details"
    */
    public enum order_details_select_column {
        DISCOUNT,

        ORDER_ID,

        PRODUCT_ID,

        QUANTITY,

        UNIT_PRICE,

        UNKNOWN_VALUE;

        public static order_details_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "discount": {
                    return DISCOUNT;
                }

                case "order_id": {
                    return ORDER_ID;
                }

                case "product_id": {
                    return PRODUCT_ID;
                }

                case "quantity": {
                    return QUANTITY;
                }

                case "unit_price": {
                    return UNIT_PRICE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case DISCOUNT: {
                    return "discount";
                }

                case ORDER_ID: {
                    return "order_id";
                }

                case PRODUCT_ID: {
                    return "product_id";
                }

                case QUANTITY: {
                    return "quantity";
                }

                case UNIT_PRICE: {
                    return "unit_price";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class order_details_set_input implements Serializable {
        private Double discount;

        private Integer orderId;

        private Integer productId;

        private Integer quantity;

        private Double unitPrice;

        public Double getDiscount() {
            return discount;
        }

        public order_details_set_input setDiscount(Double discount) {
            this.discount = discount;
            return this;
        }

        public Integer getOrderId() {
            return orderId;
        }

        public order_details_set_input setOrderId(Integer orderId) {
            this.orderId = orderId;
            return this;
        }

        public Integer getProductId() {
            return productId;
        }

        public order_details_set_input setProductId(Integer productId) {
            this.productId = productId;
            return this;
        }

        public Integer getQuantity() {
            return quantity;
        }

        public order_details_set_input setQuantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }

        public Double getUnitPrice() {
            return unitPrice;
        }

        public order_details_set_input setUnitPrice(Double unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId);
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity);
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice);
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_stddev_fieldsQueryDefinition {
        void define(order_details_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class order_details_stddev_fieldsQuery extends Query<order_details_stddev_fieldsQuery> {
        order_details_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_stddev_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_stddev_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_stddev_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_stddev_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_stddev_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class order_details_stddev_fields extends AbstractResponse<order_details_stddev_fields> {
        public order_details_stddev_fields() {
        }

        public order_details_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_stddev_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_stddev_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public order_details_stddev_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public order_details_stddev_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getQuantity() {
            return (Double) get("quantity");
        }

        public order_details_stddev_fields setQuantity(Double arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_stddev_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_stddev_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_stddev_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_stddev_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_stddev_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_stddev_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_stddev_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_stddev_pop_fieldsQueryDefinition {
        void define(order_details_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class order_details_stddev_pop_fieldsQuery extends Query<order_details_stddev_pop_fieldsQuery> {
        order_details_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_stddev_pop_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_stddev_pop_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_stddev_pop_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_stddev_pop_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_stddev_pop_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class order_details_stddev_pop_fields extends AbstractResponse<order_details_stddev_pop_fields> {
        public order_details_stddev_pop_fields() {
        }

        public order_details_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_stddev_pop_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_stddev_pop_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public order_details_stddev_pop_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public order_details_stddev_pop_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getQuantity() {
            return (Double) get("quantity");
        }

        public order_details_stddev_pop_fields setQuantity(Double arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_stddev_pop_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_stddev_pop_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_stddev_pop_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_stddev_pop_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_stddev_pop_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_stddev_pop_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_stddev_pop_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_stddev_samp_fieldsQueryDefinition {
        void define(order_details_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class order_details_stddev_samp_fieldsQuery extends Query<order_details_stddev_samp_fieldsQuery> {
        order_details_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_stddev_samp_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_stddev_samp_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_stddev_samp_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_stddev_samp_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_stddev_samp_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class order_details_stddev_samp_fields extends AbstractResponse<order_details_stddev_samp_fields> {
        public order_details_stddev_samp_fields() {
        }

        public order_details_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_stddev_samp_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_stddev_samp_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public order_details_stddev_samp_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public order_details_stddev_samp_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getQuantity() {
            return (Double) get("quantity");
        }

        public order_details_stddev_samp_fields setQuantity(Double arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_stddev_samp_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_stddev_samp_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_stddev_samp_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_stddev_samp_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_stddev_samp_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_stddev_samp_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_stddev_samp_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_sum_fieldsQueryDefinition {
        void define(order_details_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class order_details_sum_fieldsQuery extends Query<order_details_sum_fieldsQuery> {
        order_details_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_sum_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_sum_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_sum_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_sum_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_sum_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class order_details_sum_fields extends AbstractResponse<order_details_sum_fields> {
        public order_details_sum_fields() {
        }

        public order_details_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_sum_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_sum_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public order_details_sum_fields setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public order_details_sum_fields setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Integer getQuantity() {
            return (Integer) get("quantity");
        }

        public order_details_sum_fields setQuantity(Integer arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_sum_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_sum_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_sum_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_sum_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_sum_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_sum_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_sum_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "order_details"
    */
    public enum order_details_update_column {
        DISCOUNT,

        ORDER_ID,

        PRODUCT_ID,

        QUANTITY,

        UNIT_PRICE,

        UNKNOWN_VALUE;

        public static order_details_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "discount": {
                    return DISCOUNT;
                }

                case "order_id": {
                    return ORDER_ID;
                }

                case "product_id": {
                    return PRODUCT_ID;
                }

                case "quantity": {
                    return QUANTITY;
                }

                case "unit_price": {
                    return UNIT_PRICE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case DISCOUNT: {
                    return "discount";
                }

                case ORDER_ID: {
                    return "order_id";
                }

                case PRODUCT_ID: {
                    return "product_id";
                }

                case QUANTITY: {
                    return "quantity";
                }

                case UNIT_PRICE: {
                    return "unit_price";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface order_details_var_pop_fieldsQueryDefinition {
        void define(order_details_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class order_details_var_pop_fieldsQuery extends Query<order_details_var_pop_fieldsQuery> {
        order_details_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_var_pop_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_var_pop_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_var_pop_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_var_pop_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_var_pop_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class order_details_var_pop_fields extends AbstractResponse<order_details_var_pop_fields> {
        public order_details_var_pop_fields() {
        }

        public order_details_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_var_pop_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_var_pop_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public order_details_var_pop_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public order_details_var_pop_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getQuantity() {
            return (Double) get("quantity");
        }

        public order_details_var_pop_fields setQuantity(Double arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_var_pop_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_var_pop_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_var_pop_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_var_pop_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_var_pop_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_var_pop_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_var_pop_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_var_samp_fieldsQueryDefinition {
        void define(order_details_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class order_details_var_samp_fieldsQuery extends Query<order_details_var_samp_fieldsQuery> {
        order_details_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_var_samp_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_var_samp_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_var_samp_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_var_samp_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_var_samp_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class order_details_var_samp_fields extends AbstractResponse<order_details_var_samp_fields> {
        public order_details_var_samp_fields() {
        }

        public order_details_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_var_samp_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_var_samp_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public order_details_var_samp_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public order_details_var_samp_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getQuantity() {
            return (Double) get("quantity");
        }

        public order_details_var_samp_fields setQuantity(Double arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_var_samp_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_var_samp_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_var_samp_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_var_samp_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_var_samp_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_var_samp_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_var_samp_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface order_details_variance_fieldsQueryDefinition {
        void define(order_details_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class order_details_variance_fieldsQuery extends Query<order_details_variance_fieldsQuery> {
        order_details_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public order_details_variance_fieldsQuery discount() {
            startField("discount");

            return this;
        }

        public order_details_variance_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public order_details_variance_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public order_details_variance_fieldsQuery quantity() {
            startField("quantity");

            return this;
        }

        public order_details_variance_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class order_details_variance_fields extends AbstractResponse<order_details_variance_fields> {
        public order_details_variance_fields() {
        }

        public order_details_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "discount": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "order_details_variance_fields";
        }

        public Double getDiscount() {
            return (Double) get("discount");
        }

        public order_details_variance_fields setDiscount(Double arg) {
            optimisticData.put(getKey("discount"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public order_details_variance_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public order_details_variance_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getQuantity() {
            return (Double) get("quantity");
        }

        public order_details_variance_fields setQuantity(Double arg) {
            optimisticData.put(getKey("quantity"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public order_details_variance_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "discount": return false;

                case "order_id": return false;

                case "product_id": return false;

                case "quantity": return false;

                case "unit_price": return false;

                default: return false;
            }
        }
    }

    public static class order_details_variance_order_by implements Serializable {
        private order_by discount;

        private order_by orderId;

        private order_by productId;

        private order_by quantity;

        private order_by unitPrice;

        public order_by getDiscount() {
            return discount;
        }

        public order_details_variance_order_by setDiscount(order_by discount) {
            this.discount = discount;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public order_details_variance_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public order_details_variance_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getQuantity() {
            return quantity;
        }

        public order_details_variance_order_by setQuantity(order_by quantity) {
            this.quantity = quantity;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public order_details_variance_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (discount != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discount:");
                _queryBuilder.append(discount.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (quantity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity:");
                _queryBuilder.append(quantity.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface ordersQueryDefinition {
        void define(ordersQuery _queryBuilder);
    }

    /**
    * columns and relationships of "orders"
    */
    public static class ordersQuery extends Query<ordersQuery> {
        ordersQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public ordersQuery customerId() {
            startField("customer_id");

            return this;
        }

        public ordersQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public ordersQuery freight() {
            startField("freight");

            return this;
        }

        public ordersQuery orderDate() {
            startField("order_date");

            return this;
        }

        public class OrderDetailsArguments extends Arguments {
            OrderDetailsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrderDetailsArguments distinctOn(List<order_details_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrderDetailsArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrderDetailsArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrderDetailsArguments orderBy(List<order_details_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrderDetailsArguments where(order_details_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrderDetailsArgumentsDefinition {
            void define(OrderDetailsArguments args);
        }

        /**
        * An array relationship
        */
        public ordersQuery orderDetails(order_detailsQueryDefinition queryDef) {
            return orderDetails(args -> {}, queryDef);
        }

        /**
        * An array relationship
        */
        public ordersQuery orderDetails(OrderDetailsArgumentsDefinition argsDef, order_detailsQueryDefinition queryDef) {
            startField("order_details");

            OrderDetailsArguments args = new OrderDetailsArguments(_queryBuilder);
            argsDef.define(args);
            OrderDetailsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new order_detailsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrderDetailsAggregateArguments extends Arguments {
            OrderDetailsAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrderDetailsAggregateArguments distinctOn(List<order_details_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrderDetailsAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrderDetailsAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrderDetailsAggregateArguments orderBy(List<order_details_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrderDetailsAggregateArguments where(order_details_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrderDetailsAggregateArgumentsDefinition {
            void define(OrderDetailsAggregateArguments args);
        }

        /**
        * An aggregated array relationship
        */
        public ordersQuery orderDetailsAggregate(order_details_aggregateQueryDefinition queryDef) {
            return orderDetailsAggregate(args -> {}, queryDef);
        }

        /**
        * An aggregated array relationship
        */
        public ordersQuery orderDetailsAggregate(OrderDetailsAggregateArgumentsDefinition argsDef, order_details_aggregateQueryDefinition queryDef) {
            startField("order_details_aggregate");

            OrderDetailsAggregateArguments args = new OrderDetailsAggregateArguments(_queryBuilder);
            argsDef.define(args);
            OrderDetailsAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new order_details_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public ordersQuery orderId() {
            startField("order_id");

            return this;
        }

        public ordersQuery requiredDate() {
            startField("required_date");

            return this;
        }

        public ordersQuery shipAddress() {
            startField("ship_address");

            return this;
        }

        public ordersQuery shipCity() {
            startField("ship_city");

            return this;
        }

        public ordersQuery shipCountry() {
            startField("ship_country");

            return this;
        }

        public ordersQuery shipName() {
            startField("ship_name");

            return this;
        }

        public ordersQuery shipPostalCode() {
            startField("ship_postal_code");

            return this;
        }

        public ordersQuery shipRegion() {
            startField("ship_region");

            return this;
        }

        public ordersQuery shipVia() {
            startField("ship_via");

            return this;
        }

        public ordersQuery shippedDate() {
            startField("shipped_date");

            return this;
        }
    }

    /**
    * columns and relationships of "orders"
    */
    public static class orders extends AbstractResponse<orders> {
        public orders() {
        }

        public orders(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "customer_id": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_details": {
                        List<order_details> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new order_details(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "order_details_aggregate": {
                        responseData.put(key, new order_details_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "order_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "required_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shipped_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders";
        }

        public String getCustomerId() {
            return (String) get("customer_id");
        }

        public orders setCustomerId(String arg) {
            optimisticData.put(getKey("customer_id"), arg);
            return this;
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public orders setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public String getOrderDate() {
            return (String) get("order_date");
        }

        public orders setOrderDate(String arg) {
            optimisticData.put(getKey("order_date"), arg);
            return this;
        }

        /**
        * An array relationship
        */

        public List<order_details> getOrderDetails() {
            return (List<order_details>) get("order_details");
        }

        public orders setOrderDetails(List<order_details> arg) {
            optimisticData.put(getKey("order_details"), arg);
            return this;
        }

        /**
        * An aggregated array relationship
        */

        public order_details_aggregate getOrderDetailsAggregate() {
            return (order_details_aggregate) get("order_details_aggregate");
        }

        public orders setOrderDetailsAggregate(order_details_aggregate arg) {
            optimisticData.put(getKey("order_details_aggregate"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public orders setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public String getRequiredDate() {
            return (String) get("required_date");
        }

        public orders setRequiredDate(String arg) {
            optimisticData.put(getKey("required_date"), arg);
            return this;
        }

        public String getShipAddress() {
            return (String) get("ship_address");
        }

        public orders setShipAddress(String arg) {
            optimisticData.put(getKey("ship_address"), arg);
            return this;
        }

        public String getShipCity() {
            return (String) get("ship_city");
        }

        public orders setShipCity(String arg) {
            optimisticData.put(getKey("ship_city"), arg);
            return this;
        }

        public String getShipCountry() {
            return (String) get("ship_country");
        }

        public orders setShipCountry(String arg) {
            optimisticData.put(getKey("ship_country"), arg);
            return this;
        }

        public String getShipName() {
            return (String) get("ship_name");
        }

        public orders setShipName(String arg) {
            optimisticData.put(getKey("ship_name"), arg);
            return this;
        }

        public String getShipPostalCode() {
            return (String) get("ship_postal_code");
        }

        public orders setShipPostalCode(String arg) {
            optimisticData.put(getKey("ship_postal_code"), arg);
            return this;
        }

        public String getShipRegion() {
            return (String) get("ship_region");
        }

        public orders setShipRegion(String arg) {
            optimisticData.put(getKey("ship_region"), arg);
            return this;
        }

        public Integer getShipVia() {
            return (Integer) get("ship_via");
        }

        public orders setShipVia(Integer arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public String getShippedDate() {
            return (String) get("shipped_date");
        }

        public orders setShippedDate(String arg) {
            optimisticData.put(getKey("shipped_date"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "customer_id": return false;

                case "employee_id": return false;

                case "freight": return false;

                case "order_date": return false;

                case "order_details": return true;

                case "order_details_aggregate": return true;

                case "order_id": return false;

                case "required_date": return false;

                case "ship_address": return false;

                case "ship_city": return false;

                case "ship_country": return false;

                case "ship_name": return false;

                case "ship_postal_code": return false;

                case "ship_region": return false;

                case "ship_via": return false;

                case "shipped_date": return false;

                default: return false;
            }
        }
    }

    public interface orders_aggregateQueryDefinition {
        void define(orders_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "orders"
    */
    public static class orders_aggregateQuery extends Query<orders_aggregateQuery> {
        orders_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_aggregateQuery aggregate(orders_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new orders_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregateQuery nodes(ordersQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new ordersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "orders"
    */
    public static class orders_aggregate extends AbstractResponse<orders_aggregate> {
        public orders_aggregate() {
        }

        public orders_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        orders_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<orders> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new orders(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_aggregate";
        }

        public orders_aggregate_fields getAggregate() {
            return (orders_aggregate_fields) get("aggregate");
        }

        public orders_aggregate setAggregate(orders_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<orders> getNodes() {
            return (List<orders>) get("nodes");
        }

        public orders_aggregate setNodes(List<orders> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface orders_aggregate_fieldsQueryDefinition {
        void define(orders_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "orders"
    */
    public static class orders_aggregate_fieldsQuery extends Query<orders_aggregate_fieldsQuery> {
        orders_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_aggregate_fieldsQuery avg(orders_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new orders_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<orders_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public orders_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public orders_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public orders_aggregate_fieldsQuery max(orders_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new orders_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery min(orders_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new orders_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery stddev(orders_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new orders_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery stddevPop(orders_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new orders_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery stddevSamp(orders_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new orders_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery sum(orders_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new orders_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery varPop(orders_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new orders_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery varSamp(orders_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new orders_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public orders_aggregate_fieldsQuery variance(orders_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new orders_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "orders"
    */
    public static class orders_aggregate_fields extends AbstractResponse<orders_aggregate_fields> {
        public orders_aggregate_fields() {
        }

        public orders_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        orders_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        orders_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        orders_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        orders_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        orders_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        orders_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        orders_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        orders_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        orders_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        orders_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_aggregate_fields";
        }

        public orders_avg_fields getAvg() {
            return (orders_avg_fields) get("avg");
        }

        public orders_aggregate_fields setAvg(orders_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public orders_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public orders_max_fields getMax() {
            return (orders_max_fields) get("max");
        }

        public orders_aggregate_fields setMax(orders_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public orders_min_fields getMin() {
            return (orders_min_fields) get("min");
        }

        public orders_aggregate_fields setMin(orders_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public orders_stddev_fields getStddev() {
            return (orders_stddev_fields) get("stddev");
        }

        public orders_aggregate_fields setStddev(orders_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public orders_stddev_pop_fields getStddevPop() {
            return (orders_stddev_pop_fields) get("stddev_pop");
        }

        public orders_aggregate_fields setStddevPop(orders_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public orders_stddev_samp_fields getStddevSamp() {
            return (orders_stddev_samp_fields) get("stddev_samp");
        }

        public orders_aggregate_fields setStddevSamp(orders_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public orders_sum_fields getSum() {
            return (orders_sum_fields) get("sum");
        }

        public orders_aggregate_fields setSum(orders_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public orders_var_pop_fields getVarPop() {
            return (orders_var_pop_fields) get("var_pop");
        }

        public orders_aggregate_fields setVarPop(orders_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public orders_var_samp_fields getVarSamp() {
            return (orders_var_samp_fields) get("var_samp");
        }

        public orders_aggregate_fields setVarSamp(orders_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public orders_variance_fields getVariance() {
            return (orders_variance_fields) get("variance");
        }

        public orders_aggregate_fields setVariance(orders_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class orders_aggregate_order_by implements Serializable {
        private orders_avg_order_by avg;

        private order_by count;

        private orders_max_order_by max;

        private orders_min_order_by min;

        private orders_stddev_order_by stddev;

        private orders_stddev_pop_order_by stddevPop;

        private orders_stddev_samp_order_by stddevSamp;

        private orders_sum_order_by sum;

        private orders_var_pop_order_by varPop;

        private orders_var_samp_order_by varSamp;

        private orders_variance_order_by variance;

        public orders_avg_order_by getAvg() {
            return avg;
        }

        public orders_aggregate_order_by setAvg(orders_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public orders_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public orders_max_order_by getMax() {
            return max;
        }

        public orders_aggregate_order_by setMax(orders_max_order_by max) {
            this.max = max;
            return this;
        }

        public orders_min_order_by getMin() {
            return min;
        }

        public orders_aggregate_order_by setMin(orders_min_order_by min) {
            this.min = min;
            return this;
        }

        public orders_stddev_order_by getStddev() {
            return stddev;
        }

        public orders_aggregate_order_by setStddev(orders_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public orders_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public orders_aggregate_order_by setStddevPop(orders_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public orders_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public orders_aggregate_order_by setStddevSamp(orders_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public orders_sum_order_by getSum() {
            return sum;
        }

        public orders_aggregate_order_by setSum(orders_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public orders_var_pop_order_by getVarPop() {
            return varPop;
        }

        public orders_aggregate_order_by setVarPop(orders_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public orders_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public orders_aggregate_order_by setVarSamp(orders_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public orders_variance_order_by getVariance() {
            return variance;
        }

        public orders_aggregate_order_by setVariance(orders_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class orders_arr_rel_insert_input implements Serializable {
        private List<orders_insert_input> data;

        private orders_on_conflict onConflict;

        public orders_arr_rel_insert_input(List<orders_insert_input> data) {
            this.data = data;
        }

        public List<orders_insert_input> getData() {
            return data;
        }

        public orders_arr_rel_insert_input setData(List<orders_insert_input> data) {
            this.data = data;
            return this;
        }

        public orders_on_conflict getOnConflict() {
            return onConflict;
        }

        public orders_arr_rel_insert_input setOnConflict(orders_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (orders_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_avg_fieldsQueryDefinition {
        void define(orders_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class orders_avg_fieldsQuery extends Query<orders_avg_fieldsQuery> {
        orders_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_avg_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_avg_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_avg_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_avg_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class orders_avg_fields extends AbstractResponse<orders_avg_fields> {
        public orders_avg_fields() {
        }

        public orders_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_avg_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public orders_avg_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_avg_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public orders_avg_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getShipVia() {
            return (Double) get("ship_via");
        }

        public orders_avg_fields setShipVia(Double arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_avg_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_avg_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_avg_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_avg_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_avg_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class orders_bool_exp implements Serializable {
        private List<orders_bool_exp> And;

        private orders_bool_exp Not;

        private List<orders_bool_exp> Or;

        private bpchar_comparison_exp customerId;

        private Int_comparison_exp employeeId;

        private real_comparison_exp freight;

        private date_comparison_exp orderDate;

        private order_details_bool_exp orderDetails;

        private Int_comparison_exp orderId;

        private date_comparison_exp requiredDate;

        private varchar_comparison_exp shipAddress;

        private varchar_comparison_exp shipCity;

        private varchar_comparison_exp shipCountry;

        private varchar_comparison_exp shipName;

        private varchar_comparison_exp shipPostalCode;

        private varchar_comparison_exp shipRegion;

        private Int_comparison_exp shipVia;

        private date_comparison_exp shippedDate;

        public List<orders_bool_exp> getAnd() {
            return And;
        }

        public orders_bool_exp setAnd(List<orders_bool_exp> And) {
            this.And = And;
            return this;
        }

        public orders_bool_exp getNot() {
            return Not;
        }

        public orders_bool_exp setNot(orders_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<orders_bool_exp> getOr() {
            return Or;
        }

        public orders_bool_exp setOr(List<orders_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public bpchar_comparison_exp getCustomerId() {
            return customerId;
        }

        public orders_bool_exp setCustomerId(bpchar_comparison_exp customerId) {
            this.customerId = customerId;
            return this;
        }

        public Int_comparison_exp getEmployeeId() {
            return employeeId;
        }

        public orders_bool_exp setEmployeeId(Int_comparison_exp employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public real_comparison_exp getFreight() {
            return freight;
        }

        public orders_bool_exp setFreight(real_comparison_exp freight) {
            this.freight = freight;
            return this;
        }

        public date_comparison_exp getOrderDate() {
            return orderDate;
        }

        public orders_bool_exp setOrderDate(date_comparison_exp orderDate) {
            this.orderDate = orderDate;
            return this;
        }

        public order_details_bool_exp getOrderDetails() {
            return orderDetails;
        }

        public orders_bool_exp setOrderDetails(order_details_bool_exp orderDetails) {
            this.orderDetails = orderDetails;
            return this;
        }

        public Int_comparison_exp getOrderId() {
            return orderId;
        }

        public orders_bool_exp setOrderId(Int_comparison_exp orderId) {
            this.orderId = orderId;
            return this;
        }

        public date_comparison_exp getRequiredDate() {
            return requiredDate;
        }

        public orders_bool_exp setRequiredDate(date_comparison_exp requiredDate) {
            this.requiredDate = requiredDate;
            return this;
        }

        public varchar_comparison_exp getShipAddress() {
            return shipAddress;
        }

        public orders_bool_exp setShipAddress(varchar_comparison_exp shipAddress) {
            this.shipAddress = shipAddress;
            return this;
        }

        public varchar_comparison_exp getShipCity() {
            return shipCity;
        }

        public orders_bool_exp setShipCity(varchar_comparison_exp shipCity) {
            this.shipCity = shipCity;
            return this;
        }

        public varchar_comparison_exp getShipCountry() {
            return shipCountry;
        }

        public orders_bool_exp setShipCountry(varchar_comparison_exp shipCountry) {
            this.shipCountry = shipCountry;
            return this;
        }

        public varchar_comparison_exp getShipName() {
            return shipName;
        }

        public orders_bool_exp setShipName(varchar_comparison_exp shipName) {
            this.shipName = shipName;
            return this;
        }

        public varchar_comparison_exp getShipPostalCode() {
            return shipPostalCode;
        }

        public orders_bool_exp setShipPostalCode(varchar_comparison_exp shipPostalCode) {
            this.shipPostalCode = shipPostalCode;
            return this;
        }

        public varchar_comparison_exp getShipRegion() {
            return shipRegion;
        }

        public orders_bool_exp setShipRegion(varchar_comparison_exp shipRegion) {
            this.shipRegion = shipRegion;
            return this;
        }

        public Int_comparison_exp getShipVia() {
            return shipVia;
        }

        public orders_bool_exp setShipVia(Int_comparison_exp shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public date_comparison_exp getShippedDate() {
            return shippedDate;
        }

        public orders_bool_exp setShippedDate(date_comparison_exp shippedDate) {
            this.shippedDate = shippedDate;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (orders_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (orders_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                customerId.appendTo(_queryBuilder);
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                employeeId.appendTo(_queryBuilder);
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                freight.appendTo(_queryBuilder);
            }

            if (orderDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_date:");
                orderDate.appendTo(_queryBuilder);
            }

            if (orderDetails != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_details:");
                orderDetails.appendTo(_queryBuilder);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                orderId.appendTo(_queryBuilder);
            }

            if (requiredDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("required_date:");
                requiredDate.appendTo(_queryBuilder);
            }

            if (shipAddress != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_address:");
                shipAddress.appendTo(_queryBuilder);
            }

            if (shipCity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_city:");
                shipCity.appendTo(_queryBuilder);
            }

            if (shipCountry != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_country:");
                shipCountry.appendTo(_queryBuilder);
            }

            if (shipName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_name:");
                shipName.appendTo(_queryBuilder);
            }

            if (shipPostalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_postal_code:");
                shipPostalCode.appendTo(_queryBuilder);
            }

            if (shipRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_region:");
                shipRegion.appendTo(_queryBuilder);
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                shipVia.appendTo(_queryBuilder);
            }

            if (shippedDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipped_date:");
                shippedDate.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "orders"
    */
    public enum orders_constraint {
        PK_ORDERS,

        UNKNOWN_VALUE;

        public static orders_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_orders": {
                    return PK_ORDERS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_ORDERS: {
                    return "pk_orders";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class orders_inc_input implements Serializable {
        private Integer employeeId;

        private Integer orderId;

        private Integer shipVia;

        public Integer getEmployeeId() {
            return employeeId;
        }

        public orders_inc_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public Integer getOrderId() {
            return orderId;
        }

        public orders_inc_input setOrderId(Integer orderId) {
            this.orderId = orderId;
            return this;
        }

        public Integer getShipVia() {
            return shipVia;
        }

        public orders_inc_input setShipVia(Integer shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId);
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia);
            }

            _queryBuilder.append('}');
        }
    }

    public static class orders_insert_input implements Serializable {
        private String customerId;

        private Integer employeeId;

        private Double freight;

        private String orderDate;

        private order_details_arr_rel_insert_input orderDetails;

        private Integer orderId;

        private String requiredDate;

        private String shipAddress;

        private String shipCity;

        private String shipCountry;

        private String shipName;

        private String shipPostalCode;

        private String shipRegion;

        private Integer shipVia;

        private String shippedDate;

        public String getCustomerId() {
            return customerId;
        }

        public orders_insert_input setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public Integer getEmployeeId() {
            return employeeId;
        }

        public orders_insert_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public Double getFreight() {
            return freight;
        }

        public orders_insert_input setFreight(Double freight) {
            this.freight = freight;
            return this;
        }

        public String getOrderDate() {
            return orderDate;
        }

        public orders_insert_input setOrderDate(String orderDate) {
            this.orderDate = orderDate;
            return this;
        }

        public order_details_arr_rel_insert_input getOrderDetails() {
            return orderDetails;
        }

        public orders_insert_input setOrderDetails(order_details_arr_rel_insert_input orderDetails) {
            this.orderDetails = orderDetails;
            return this;
        }

        public Integer getOrderId() {
            return orderId;
        }

        public orders_insert_input setOrderId(Integer orderId) {
            this.orderId = orderId;
            return this;
        }

        public String getRequiredDate() {
            return requiredDate;
        }

        public orders_insert_input setRequiredDate(String requiredDate) {
            this.requiredDate = requiredDate;
            return this;
        }

        public String getShipAddress() {
            return shipAddress;
        }

        public orders_insert_input setShipAddress(String shipAddress) {
            this.shipAddress = shipAddress;
            return this;
        }

        public String getShipCity() {
            return shipCity;
        }

        public orders_insert_input setShipCity(String shipCity) {
            this.shipCity = shipCity;
            return this;
        }

        public String getShipCountry() {
            return shipCountry;
        }

        public orders_insert_input setShipCountry(String shipCountry) {
            this.shipCountry = shipCountry;
            return this;
        }

        public String getShipName() {
            return shipName;
        }

        public orders_insert_input setShipName(String shipName) {
            this.shipName = shipName;
            return this;
        }

        public String getShipPostalCode() {
            return shipPostalCode;
        }

        public orders_insert_input setShipPostalCode(String shipPostalCode) {
            this.shipPostalCode = shipPostalCode;
            return this;
        }

        public String getShipRegion() {
            return shipRegion;
        }

        public orders_insert_input setShipRegion(String shipRegion) {
            this.shipRegion = shipRegion;
            return this;
        }

        public Integer getShipVia() {
            return shipVia;
        }

        public orders_insert_input setShipVia(Integer shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public String getShippedDate() {
            return shippedDate;
        }

        public orders_insert_input setShippedDate(String shippedDate) {
            this.shippedDate = shippedDate;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                Query.appendQuotedString(_queryBuilder, customerId.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight);
            }

            if (orderDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_date:");
                Query.appendQuotedString(_queryBuilder, orderDate.toString());
            }

            if (orderDetails != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_details:");
                orderDetails.appendTo(_queryBuilder);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId);
            }

            if (requiredDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("required_date:");
                Query.appendQuotedString(_queryBuilder, requiredDate.toString());
            }

            if (shipAddress != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_address:");
                Query.appendQuotedString(_queryBuilder, shipAddress.toString());
            }

            if (shipCity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_city:");
                Query.appendQuotedString(_queryBuilder, shipCity.toString());
            }

            if (shipCountry != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_country:");
                Query.appendQuotedString(_queryBuilder, shipCountry.toString());
            }

            if (shipName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_name:");
                Query.appendQuotedString(_queryBuilder, shipName.toString());
            }

            if (shipPostalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_postal_code:");
                Query.appendQuotedString(_queryBuilder, shipPostalCode.toString());
            }

            if (shipRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_region:");
                Query.appendQuotedString(_queryBuilder, shipRegion.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia);
            }

            if (shippedDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipped_date:");
                Query.appendQuotedString(_queryBuilder, shippedDate.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_max_fieldsQueryDefinition {
        void define(orders_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class orders_max_fieldsQuery extends Query<orders_max_fieldsQuery> {
        orders_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_max_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_max_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_max_fieldsQuery orderDate() {
            startField("order_date");

            return this;
        }

        public orders_max_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_max_fieldsQuery requiredDate() {
            startField("required_date");

            return this;
        }

        public orders_max_fieldsQuery shipAddress() {
            startField("ship_address");

            return this;
        }

        public orders_max_fieldsQuery shipCity() {
            startField("ship_city");

            return this;
        }

        public orders_max_fieldsQuery shipCountry() {
            startField("ship_country");

            return this;
        }

        public orders_max_fieldsQuery shipName() {
            startField("ship_name");

            return this;
        }

        public orders_max_fieldsQuery shipPostalCode() {
            startField("ship_postal_code");

            return this;
        }

        public orders_max_fieldsQuery shipRegion() {
            startField("ship_region");

            return this;
        }

        public orders_max_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }

        public orders_max_fieldsQuery shippedDate() {
            startField("shipped_date");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class orders_max_fields extends AbstractResponse<orders_max_fields> {
        public orders_max_fields() {
        }

        public orders_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "required_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shipped_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_max_fields";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public orders_max_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_max_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public String getOrderDate() {
            return (String) get("order_date");
        }

        public orders_max_fields setOrderDate(String arg) {
            optimisticData.put(getKey("order_date"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public orders_max_fields setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public String getRequiredDate() {
            return (String) get("required_date");
        }

        public orders_max_fields setRequiredDate(String arg) {
            optimisticData.put(getKey("required_date"), arg);
            return this;
        }

        public String getShipAddress() {
            return (String) get("ship_address");
        }

        public orders_max_fields setShipAddress(String arg) {
            optimisticData.put(getKey("ship_address"), arg);
            return this;
        }

        public String getShipCity() {
            return (String) get("ship_city");
        }

        public orders_max_fields setShipCity(String arg) {
            optimisticData.put(getKey("ship_city"), arg);
            return this;
        }

        public String getShipCountry() {
            return (String) get("ship_country");
        }

        public orders_max_fields setShipCountry(String arg) {
            optimisticData.put(getKey("ship_country"), arg);
            return this;
        }

        public String getShipName() {
            return (String) get("ship_name");
        }

        public orders_max_fields setShipName(String arg) {
            optimisticData.put(getKey("ship_name"), arg);
            return this;
        }

        public String getShipPostalCode() {
            return (String) get("ship_postal_code");
        }

        public orders_max_fields setShipPostalCode(String arg) {
            optimisticData.put(getKey("ship_postal_code"), arg);
            return this;
        }

        public String getShipRegion() {
            return (String) get("ship_region");
        }

        public orders_max_fields setShipRegion(String arg) {
            optimisticData.put(getKey("ship_region"), arg);
            return this;
        }

        public Integer getShipVia() {
            return (Integer) get("ship_via");
        }

        public orders_max_fields setShipVia(Integer arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public String getShippedDate() {
            return (String) get("shipped_date");
        }

        public orders_max_fields setShippedDate(String arg) {
            optimisticData.put(getKey("shipped_date"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_date": return false;

                case "order_id": return false;

                case "required_date": return false;

                case "ship_address": return false;

                case "ship_city": return false;

                case "ship_country": return false;

                case "ship_name": return false;

                case "ship_postal_code": return false;

                case "ship_region": return false;

                case "ship_via": return false;

                case "shipped_date": return false;

                default: return false;
            }
        }
    }

    public static class orders_max_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderDate;

        private order_by orderId;

        private order_by requiredDate;

        private order_by shipAddress;

        private order_by shipCity;

        private order_by shipCountry;

        private order_by shipName;

        private order_by shipPostalCode;

        private order_by shipRegion;

        private order_by shipVia;

        private order_by shippedDate;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_max_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_max_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderDate() {
            return orderDate;
        }

        public orders_max_order_by setOrderDate(order_by orderDate) {
            this.orderDate = orderDate;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_max_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getRequiredDate() {
            return requiredDate;
        }

        public orders_max_order_by setRequiredDate(order_by requiredDate) {
            this.requiredDate = requiredDate;
            return this;
        }

        public order_by getShipAddress() {
            return shipAddress;
        }

        public orders_max_order_by setShipAddress(order_by shipAddress) {
            this.shipAddress = shipAddress;
            return this;
        }

        public order_by getShipCity() {
            return shipCity;
        }

        public orders_max_order_by setShipCity(order_by shipCity) {
            this.shipCity = shipCity;
            return this;
        }

        public order_by getShipCountry() {
            return shipCountry;
        }

        public orders_max_order_by setShipCountry(order_by shipCountry) {
            this.shipCountry = shipCountry;
            return this;
        }

        public order_by getShipName() {
            return shipName;
        }

        public orders_max_order_by setShipName(order_by shipName) {
            this.shipName = shipName;
            return this;
        }

        public order_by getShipPostalCode() {
            return shipPostalCode;
        }

        public orders_max_order_by setShipPostalCode(order_by shipPostalCode) {
            this.shipPostalCode = shipPostalCode;
            return this;
        }

        public order_by getShipRegion() {
            return shipRegion;
        }

        public orders_max_order_by setShipRegion(order_by shipRegion) {
            this.shipRegion = shipRegion;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_max_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public order_by getShippedDate() {
            return shippedDate;
        }

        public orders_max_order_by setShippedDate(order_by shippedDate) {
            this.shippedDate = shippedDate;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_date:");
                _queryBuilder.append(orderDate.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (requiredDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("required_date:");
                _queryBuilder.append(requiredDate.toString());
            }

            if (shipAddress != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_address:");
                _queryBuilder.append(shipAddress.toString());
            }

            if (shipCity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_city:");
                _queryBuilder.append(shipCity.toString());
            }

            if (shipCountry != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_country:");
                _queryBuilder.append(shipCountry.toString());
            }

            if (shipName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_name:");
                _queryBuilder.append(shipName.toString());
            }

            if (shipPostalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_postal_code:");
                _queryBuilder.append(shipPostalCode.toString());
            }

            if (shipRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_region:");
                _queryBuilder.append(shipRegion.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            if (shippedDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipped_date:");
                _queryBuilder.append(shippedDate.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_min_fieldsQueryDefinition {
        void define(orders_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class orders_min_fieldsQuery extends Query<orders_min_fieldsQuery> {
        orders_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_min_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_min_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_min_fieldsQuery orderDate() {
            startField("order_date");

            return this;
        }

        public orders_min_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_min_fieldsQuery requiredDate() {
            startField("required_date");

            return this;
        }

        public orders_min_fieldsQuery shipAddress() {
            startField("ship_address");

            return this;
        }

        public orders_min_fieldsQuery shipCity() {
            startField("ship_city");

            return this;
        }

        public orders_min_fieldsQuery shipCountry() {
            startField("ship_country");

            return this;
        }

        public orders_min_fieldsQuery shipName() {
            startField("ship_name");

            return this;
        }

        public orders_min_fieldsQuery shipPostalCode() {
            startField("ship_postal_code");

            return this;
        }

        public orders_min_fieldsQuery shipRegion() {
            startField("ship_region");

            return this;
        }

        public orders_min_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }

        public orders_min_fieldsQuery shippedDate() {
            startField("shipped_date");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class orders_min_fields extends AbstractResponse<orders_min_fields> {
        public orders_min_fields() {
        }

        public orders_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "required_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shipped_date": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_min_fields";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public orders_min_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_min_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public String getOrderDate() {
            return (String) get("order_date");
        }

        public orders_min_fields setOrderDate(String arg) {
            optimisticData.put(getKey("order_date"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public orders_min_fields setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public String getRequiredDate() {
            return (String) get("required_date");
        }

        public orders_min_fields setRequiredDate(String arg) {
            optimisticData.put(getKey("required_date"), arg);
            return this;
        }

        public String getShipAddress() {
            return (String) get("ship_address");
        }

        public orders_min_fields setShipAddress(String arg) {
            optimisticData.put(getKey("ship_address"), arg);
            return this;
        }

        public String getShipCity() {
            return (String) get("ship_city");
        }

        public orders_min_fields setShipCity(String arg) {
            optimisticData.put(getKey("ship_city"), arg);
            return this;
        }

        public String getShipCountry() {
            return (String) get("ship_country");
        }

        public orders_min_fields setShipCountry(String arg) {
            optimisticData.put(getKey("ship_country"), arg);
            return this;
        }

        public String getShipName() {
            return (String) get("ship_name");
        }

        public orders_min_fields setShipName(String arg) {
            optimisticData.put(getKey("ship_name"), arg);
            return this;
        }

        public String getShipPostalCode() {
            return (String) get("ship_postal_code");
        }

        public orders_min_fields setShipPostalCode(String arg) {
            optimisticData.put(getKey("ship_postal_code"), arg);
            return this;
        }

        public String getShipRegion() {
            return (String) get("ship_region");
        }

        public orders_min_fields setShipRegion(String arg) {
            optimisticData.put(getKey("ship_region"), arg);
            return this;
        }

        public Integer getShipVia() {
            return (Integer) get("ship_via");
        }

        public orders_min_fields setShipVia(Integer arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public String getShippedDate() {
            return (String) get("shipped_date");
        }

        public orders_min_fields setShippedDate(String arg) {
            optimisticData.put(getKey("shipped_date"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_date": return false;

                case "order_id": return false;

                case "required_date": return false;

                case "ship_address": return false;

                case "ship_city": return false;

                case "ship_country": return false;

                case "ship_name": return false;

                case "ship_postal_code": return false;

                case "ship_region": return false;

                case "ship_via": return false;

                case "shipped_date": return false;

                default: return false;
            }
        }
    }

    public static class orders_min_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderDate;

        private order_by orderId;

        private order_by requiredDate;

        private order_by shipAddress;

        private order_by shipCity;

        private order_by shipCountry;

        private order_by shipName;

        private order_by shipPostalCode;

        private order_by shipRegion;

        private order_by shipVia;

        private order_by shippedDate;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_min_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_min_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderDate() {
            return orderDate;
        }

        public orders_min_order_by setOrderDate(order_by orderDate) {
            this.orderDate = orderDate;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_min_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getRequiredDate() {
            return requiredDate;
        }

        public orders_min_order_by setRequiredDate(order_by requiredDate) {
            this.requiredDate = requiredDate;
            return this;
        }

        public order_by getShipAddress() {
            return shipAddress;
        }

        public orders_min_order_by setShipAddress(order_by shipAddress) {
            this.shipAddress = shipAddress;
            return this;
        }

        public order_by getShipCity() {
            return shipCity;
        }

        public orders_min_order_by setShipCity(order_by shipCity) {
            this.shipCity = shipCity;
            return this;
        }

        public order_by getShipCountry() {
            return shipCountry;
        }

        public orders_min_order_by setShipCountry(order_by shipCountry) {
            this.shipCountry = shipCountry;
            return this;
        }

        public order_by getShipName() {
            return shipName;
        }

        public orders_min_order_by setShipName(order_by shipName) {
            this.shipName = shipName;
            return this;
        }

        public order_by getShipPostalCode() {
            return shipPostalCode;
        }

        public orders_min_order_by setShipPostalCode(order_by shipPostalCode) {
            this.shipPostalCode = shipPostalCode;
            return this;
        }

        public order_by getShipRegion() {
            return shipRegion;
        }

        public orders_min_order_by setShipRegion(order_by shipRegion) {
            this.shipRegion = shipRegion;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_min_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public order_by getShippedDate() {
            return shippedDate;
        }

        public orders_min_order_by setShippedDate(order_by shippedDate) {
            this.shippedDate = shippedDate;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_date:");
                _queryBuilder.append(orderDate.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (requiredDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("required_date:");
                _queryBuilder.append(requiredDate.toString());
            }

            if (shipAddress != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_address:");
                _queryBuilder.append(shipAddress.toString());
            }

            if (shipCity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_city:");
                _queryBuilder.append(shipCity.toString());
            }

            if (shipCountry != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_country:");
                _queryBuilder.append(shipCountry.toString());
            }

            if (shipName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_name:");
                _queryBuilder.append(shipName.toString());
            }

            if (shipPostalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_postal_code:");
                _queryBuilder.append(shipPostalCode.toString());
            }

            if (shipRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_region:");
                _queryBuilder.append(shipRegion.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            if (shippedDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipped_date:");
                _queryBuilder.append(shippedDate.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_mutation_responseQueryDefinition {
        void define(orders_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "orders"
    */
    public static class orders_mutation_responseQuery extends Query<orders_mutation_responseQuery> {
        orders_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public orders_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public orders_mutation_responseQuery returning(ordersQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new ordersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "orders"
    */
    public static class orders_mutation_response extends AbstractResponse<orders_mutation_response> {
        public orders_mutation_response() {
        }

        public orders_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<orders> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new orders(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public orders_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<orders> getReturning() {
            return (List<orders>) get("returning");
        }

        public orders_mutation_response setReturning(List<orders> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class orders_obj_rel_insert_input implements Serializable {
        private orders_insert_input data;

        private orders_on_conflict onConflict;

        public orders_obj_rel_insert_input(orders_insert_input data) {
            this.data = data;
        }

        public orders_insert_input getData() {
            return data;
        }

        public orders_obj_rel_insert_input setData(orders_insert_input data) {
            this.data = data;
            return this;
        }

        public orders_on_conflict getOnConflict() {
            return onConflict;
        }

        public orders_obj_rel_insert_input setOnConflict(orders_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class orders_on_conflict implements Serializable {
        private orders_constraint constraint;

        private List<orders_update_column> updateColumns;

        public orders_on_conflict(orders_constraint constraint, List<orders_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public orders_constraint getConstraint() {
            return constraint;
        }

        public orders_on_conflict setConstraint(orders_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<orders_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public orders_on_conflict setUpdateColumns(List<orders_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (orders_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class orders_order_by implements Serializable {
        private order_by customerId;

        private order_by employeeId;

        private order_by freight;

        private order_by orderDate;

        private order_details_aggregate_order_by orderDetailsAggregate;

        private order_by orderId;

        private order_by requiredDate;

        private order_by shipAddress;

        private order_by shipCity;

        private order_by shipCountry;

        private order_by shipName;

        private order_by shipPostalCode;

        private order_by shipRegion;

        private order_by shipVia;

        private order_by shippedDate;

        public order_by getCustomerId() {
            return customerId;
        }

        public orders_order_by setCustomerId(order_by customerId) {
            this.customerId = customerId;
            return this;
        }

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderDate() {
            return orderDate;
        }

        public orders_order_by setOrderDate(order_by orderDate) {
            this.orderDate = orderDate;
            return this;
        }

        public order_details_aggregate_order_by getOrderDetailsAggregate() {
            return orderDetailsAggregate;
        }

        public orders_order_by setOrderDetailsAggregate(order_details_aggregate_order_by orderDetailsAggregate) {
            this.orderDetailsAggregate = orderDetailsAggregate;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getRequiredDate() {
            return requiredDate;
        }

        public orders_order_by setRequiredDate(order_by requiredDate) {
            this.requiredDate = requiredDate;
            return this;
        }

        public order_by getShipAddress() {
            return shipAddress;
        }

        public orders_order_by setShipAddress(order_by shipAddress) {
            this.shipAddress = shipAddress;
            return this;
        }

        public order_by getShipCity() {
            return shipCity;
        }

        public orders_order_by setShipCity(order_by shipCity) {
            this.shipCity = shipCity;
            return this;
        }

        public order_by getShipCountry() {
            return shipCountry;
        }

        public orders_order_by setShipCountry(order_by shipCountry) {
            this.shipCountry = shipCountry;
            return this;
        }

        public order_by getShipName() {
            return shipName;
        }

        public orders_order_by setShipName(order_by shipName) {
            this.shipName = shipName;
            return this;
        }

        public order_by getShipPostalCode() {
            return shipPostalCode;
        }

        public orders_order_by setShipPostalCode(order_by shipPostalCode) {
            this.shipPostalCode = shipPostalCode;
            return this;
        }

        public order_by getShipRegion() {
            return shipRegion;
        }

        public orders_order_by setShipRegion(order_by shipRegion) {
            this.shipRegion = shipRegion;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public order_by getShippedDate() {
            return shippedDate;
        }

        public orders_order_by setShippedDate(order_by shippedDate) {
            this.shippedDate = shippedDate;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                _queryBuilder.append(customerId.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_date:");
                _queryBuilder.append(orderDate.toString());
            }

            if (orderDetailsAggregate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_details_aggregate:");
                orderDetailsAggregate.appendTo(_queryBuilder);
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (requiredDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("required_date:");
                _queryBuilder.append(requiredDate.toString());
            }

            if (shipAddress != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_address:");
                _queryBuilder.append(shipAddress.toString());
            }

            if (shipCity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_city:");
                _queryBuilder.append(shipCity.toString());
            }

            if (shipCountry != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_country:");
                _queryBuilder.append(shipCountry.toString());
            }

            if (shipName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_name:");
                _queryBuilder.append(shipName.toString());
            }

            if (shipPostalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_postal_code:");
                _queryBuilder.append(shipPostalCode.toString());
            }

            if (shipRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_region:");
                _queryBuilder.append(shipRegion.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            if (shippedDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipped_date:");
                _queryBuilder.append(shippedDate.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "orders"
    */
    public enum orders_select_column {
        CUSTOMER_ID,

        EMPLOYEE_ID,

        FREIGHT,

        ORDER_DATE,

        ORDER_ID,

        REQUIRED_DATE,

        SHIP_ADDRESS,

        SHIP_CITY,

        SHIP_COUNTRY,

        SHIP_NAME,

        SHIP_POSTAL_CODE,

        SHIP_REGION,

        SHIP_VIA,

        SHIPPED_DATE,

        UNKNOWN_VALUE;

        public static orders_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "customer_id": {
                    return CUSTOMER_ID;
                }

                case "employee_id": {
                    return EMPLOYEE_ID;
                }

                case "freight": {
                    return FREIGHT;
                }

                case "order_date": {
                    return ORDER_DATE;
                }

                case "order_id": {
                    return ORDER_ID;
                }

                case "required_date": {
                    return REQUIRED_DATE;
                }

                case "ship_address": {
                    return SHIP_ADDRESS;
                }

                case "ship_city": {
                    return SHIP_CITY;
                }

                case "ship_country": {
                    return SHIP_COUNTRY;
                }

                case "ship_name": {
                    return SHIP_NAME;
                }

                case "ship_postal_code": {
                    return SHIP_POSTAL_CODE;
                }

                case "ship_region": {
                    return SHIP_REGION;
                }

                case "ship_via": {
                    return SHIP_VIA;
                }

                case "shipped_date": {
                    return SHIPPED_DATE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CUSTOMER_ID: {
                    return "customer_id";
                }

                case EMPLOYEE_ID: {
                    return "employee_id";
                }

                case FREIGHT: {
                    return "freight";
                }

                case ORDER_DATE: {
                    return "order_date";
                }

                case ORDER_ID: {
                    return "order_id";
                }

                case REQUIRED_DATE: {
                    return "required_date";
                }

                case SHIP_ADDRESS: {
                    return "ship_address";
                }

                case SHIP_CITY: {
                    return "ship_city";
                }

                case SHIP_COUNTRY: {
                    return "ship_country";
                }

                case SHIP_NAME: {
                    return "ship_name";
                }

                case SHIP_POSTAL_CODE: {
                    return "ship_postal_code";
                }

                case SHIP_REGION: {
                    return "ship_region";
                }

                case SHIP_VIA: {
                    return "ship_via";
                }

                case SHIPPED_DATE: {
                    return "shipped_date";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class orders_set_input implements Serializable {
        private String customerId;

        private Integer employeeId;

        private Double freight;

        private String orderDate;

        private Integer orderId;

        private String requiredDate;

        private String shipAddress;

        private String shipCity;

        private String shipCountry;

        private String shipName;

        private String shipPostalCode;

        private String shipRegion;

        private Integer shipVia;

        private String shippedDate;

        public String getCustomerId() {
            return customerId;
        }

        public orders_set_input setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public Integer getEmployeeId() {
            return employeeId;
        }

        public orders_set_input setEmployeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public Double getFreight() {
            return freight;
        }

        public orders_set_input setFreight(Double freight) {
            this.freight = freight;
            return this;
        }

        public String getOrderDate() {
            return orderDate;
        }

        public orders_set_input setOrderDate(String orderDate) {
            this.orderDate = orderDate;
            return this;
        }

        public Integer getOrderId() {
            return orderId;
        }

        public orders_set_input setOrderId(Integer orderId) {
            this.orderId = orderId;
            return this;
        }

        public String getRequiredDate() {
            return requiredDate;
        }

        public orders_set_input setRequiredDate(String requiredDate) {
            this.requiredDate = requiredDate;
            return this;
        }

        public String getShipAddress() {
            return shipAddress;
        }

        public orders_set_input setShipAddress(String shipAddress) {
            this.shipAddress = shipAddress;
            return this;
        }

        public String getShipCity() {
            return shipCity;
        }

        public orders_set_input setShipCity(String shipCity) {
            this.shipCity = shipCity;
            return this;
        }

        public String getShipCountry() {
            return shipCountry;
        }

        public orders_set_input setShipCountry(String shipCountry) {
            this.shipCountry = shipCountry;
            return this;
        }

        public String getShipName() {
            return shipName;
        }

        public orders_set_input setShipName(String shipName) {
            this.shipName = shipName;
            return this;
        }

        public String getShipPostalCode() {
            return shipPostalCode;
        }

        public orders_set_input setShipPostalCode(String shipPostalCode) {
            this.shipPostalCode = shipPostalCode;
            return this;
        }

        public String getShipRegion() {
            return shipRegion;
        }

        public orders_set_input setShipRegion(String shipRegion) {
            this.shipRegion = shipRegion;
            return this;
        }

        public Integer getShipVia() {
            return shipVia;
        }

        public orders_set_input setShipVia(Integer shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public String getShippedDate() {
            return shippedDate;
        }

        public orders_set_input setShippedDate(String shippedDate) {
            this.shippedDate = shippedDate;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (customerId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("customer_id:");
                Query.appendQuotedString(_queryBuilder, customerId.toString());
            }

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId);
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight);
            }

            if (orderDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_date:");
                Query.appendQuotedString(_queryBuilder, orderDate.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId);
            }

            if (requiredDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("required_date:");
                Query.appendQuotedString(_queryBuilder, requiredDate.toString());
            }

            if (shipAddress != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_address:");
                Query.appendQuotedString(_queryBuilder, shipAddress.toString());
            }

            if (shipCity != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_city:");
                Query.appendQuotedString(_queryBuilder, shipCity.toString());
            }

            if (shipCountry != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_country:");
                Query.appendQuotedString(_queryBuilder, shipCountry.toString());
            }

            if (shipName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_name:");
                Query.appendQuotedString(_queryBuilder, shipName.toString());
            }

            if (shipPostalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_postal_code:");
                Query.appendQuotedString(_queryBuilder, shipPostalCode.toString());
            }

            if (shipRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_region:");
                Query.appendQuotedString(_queryBuilder, shipRegion.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia);
            }

            if (shippedDate != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipped_date:");
                Query.appendQuotedString(_queryBuilder, shippedDate.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_stddev_fieldsQueryDefinition {
        void define(orders_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class orders_stddev_fieldsQuery extends Query<orders_stddev_fieldsQuery> {
        orders_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_stddev_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_stddev_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_stddev_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_stddev_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class orders_stddev_fields extends AbstractResponse<orders_stddev_fields> {
        public orders_stddev_fields() {
        }

        public orders_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_stddev_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public orders_stddev_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_stddev_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public orders_stddev_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getShipVia() {
            return (Double) get("ship_via");
        }

        public orders_stddev_fields setShipVia(Double arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_stddev_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_stddev_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_stddev_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_stddev_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_stddev_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_stddev_pop_fieldsQueryDefinition {
        void define(orders_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class orders_stddev_pop_fieldsQuery extends Query<orders_stddev_pop_fieldsQuery> {
        orders_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_stddev_pop_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_stddev_pop_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_stddev_pop_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_stddev_pop_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class orders_stddev_pop_fields extends AbstractResponse<orders_stddev_pop_fields> {
        public orders_stddev_pop_fields() {
        }

        public orders_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_stddev_pop_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public orders_stddev_pop_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_stddev_pop_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public orders_stddev_pop_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getShipVia() {
            return (Double) get("ship_via");
        }

        public orders_stddev_pop_fields setShipVia(Double arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_stddev_pop_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_stddev_pop_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_stddev_pop_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_stddev_pop_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_stddev_pop_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_stddev_samp_fieldsQueryDefinition {
        void define(orders_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class orders_stddev_samp_fieldsQuery extends Query<orders_stddev_samp_fieldsQuery> {
        orders_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_stddev_samp_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_stddev_samp_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_stddev_samp_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_stddev_samp_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class orders_stddev_samp_fields extends AbstractResponse<orders_stddev_samp_fields> {
        public orders_stddev_samp_fields() {
        }

        public orders_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_stddev_samp_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public orders_stddev_samp_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_stddev_samp_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public orders_stddev_samp_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getShipVia() {
            return (Double) get("ship_via");
        }

        public orders_stddev_samp_fields setShipVia(Double arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_stddev_samp_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_stddev_samp_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_stddev_samp_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_stddev_samp_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_stddev_samp_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_sum_fieldsQueryDefinition {
        void define(orders_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class orders_sum_fieldsQuery extends Query<orders_sum_fieldsQuery> {
        orders_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_sum_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_sum_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_sum_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_sum_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class orders_sum_fields extends AbstractResponse<orders_sum_fields> {
        public orders_sum_fields() {
        }

        public orders_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_sum_fields";
        }

        public Integer getEmployeeId() {
            return (Integer) get("employee_id");
        }

        public orders_sum_fields setEmployeeId(Integer arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_sum_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Integer getOrderId() {
            return (Integer) get("order_id");
        }

        public orders_sum_fields setOrderId(Integer arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Integer getShipVia() {
            return (Integer) get("ship_via");
        }

        public orders_sum_fields setShipVia(Integer arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_sum_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_sum_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_sum_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_sum_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_sum_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "orders"
    */
    public enum orders_update_column {
        CUSTOMER_ID,

        EMPLOYEE_ID,

        FREIGHT,

        ORDER_DATE,

        ORDER_ID,

        REQUIRED_DATE,

        SHIP_ADDRESS,

        SHIP_CITY,

        SHIP_COUNTRY,

        SHIP_NAME,

        SHIP_POSTAL_CODE,

        SHIP_REGION,

        SHIP_VIA,

        SHIPPED_DATE,

        UNKNOWN_VALUE;

        public static orders_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "customer_id": {
                    return CUSTOMER_ID;
                }

                case "employee_id": {
                    return EMPLOYEE_ID;
                }

                case "freight": {
                    return FREIGHT;
                }

                case "order_date": {
                    return ORDER_DATE;
                }

                case "order_id": {
                    return ORDER_ID;
                }

                case "required_date": {
                    return REQUIRED_DATE;
                }

                case "ship_address": {
                    return SHIP_ADDRESS;
                }

                case "ship_city": {
                    return SHIP_CITY;
                }

                case "ship_country": {
                    return SHIP_COUNTRY;
                }

                case "ship_name": {
                    return SHIP_NAME;
                }

                case "ship_postal_code": {
                    return SHIP_POSTAL_CODE;
                }

                case "ship_region": {
                    return SHIP_REGION;
                }

                case "ship_via": {
                    return SHIP_VIA;
                }

                case "shipped_date": {
                    return SHIPPED_DATE;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CUSTOMER_ID: {
                    return "customer_id";
                }

                case EMPLOYEE_ID: {
                    return "employee_id";
                }

                case FREIGHT: {
                    return "freight";
                }

                case ORDER_DATE: {
                    return "order_date";
                }

                case ORDER_ID: {
                    return "order_id";
                }

                case REQUIRED_DATE: {
                    return "required_date";
                }

                case SHIP_ADDRESS: {
                    return "ship_address";
                }

                case SHIP_CITY: {
                    return "ship_city";
                }

                case SHIP_COUNTRY: {
                    return "ship_country";
                }

                case SHIP_NAME: {
                    return "ship_name";
                }

                case SHIP_POSTAL_CODE: {
                    return "ship_postal_code";
                }

                case SHIP_REGION: {
                    return "ship_region";
                }

                case SHIP_VIA: {
                    return "ship_via";
                }

                case SHIPPED_DATE: {
                    return "shipped_date";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface orders_var_pop_fieldsQueryDefinition {
        void define(orders_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class orders_var_pop_fieldsQuery extends Query<orders_var_pop_fieldsQuery> {
        orders_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_var_pop_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_var_pop_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_var_pop_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_var_pop_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class orders_var_pop_fields extends AbstractResponse<orders_var_pop_fields> {
        public orders_var_pop_fields() {
        }

        public orders_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_var_pop_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public orders_var_pop_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_var_pop_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public orders_var_pop_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getShipVia() {
            return (Double) get("ship_via");
        }

        public orders_var_pop_fields setShipVia(Double arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_var_pop_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_var_pop_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_var_pop_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_var_pop_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_var_pop_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_var_samp_fieldsQueryDefinition {
        void define(orders_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class orders_var_samp_fieldsQuery extends Query<orders_var_samp_fieldsQuery> {
        orders_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_var_samp_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_var_samp_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_var_samp_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_var_samp_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class orders_var_samp_fields extends AbstractResponse<orders_var_samp_fields> {
        public orders_var_samp_fields() {
        }

        public orders_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_var_samp_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public orders_var_samp_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_var_samp_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public orders_var_samp_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getShipVia() {
            return (Double) get("ship_via");
        }

        public orders_var_samp_fields setShipVia(Double arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_var_samp_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_var_samp_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_var_samp_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_var_samp_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_var_samp_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface orders_variance_fieldsQueryDefinition {
        void define(orders_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class orders_variance_fieldsQuery extends Query<orders_variance_fieldsQuery> {
        orders_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public orders_variance_fieldsQuery employeeId() {
            startField("employee_id");

            return this;
        }

        public orders_variance_fieldsQuery freight() {
            startField("freight");

            return this;
        }

        public orders_variance_fieldsQuery orderId() {
            startField("order_id");

            return this;
        }

        public orders_variance_fieldsQuery shipVia() {
            startField("ship_via");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class orders_variance_fields extends AbstractResponse<orders_variance_fields> {
        public orders_variance_fields() {
        }

        public orders_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "employee_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "freight": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "ship_via": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "orders_variance_fields";
        }

        public Double getEmployeeId() {
            return (Double) get("employee_id");
        }

        public orders_variance_fields setEmployeeId(Double arg) {
            optimisticData.put(getKey("employee_id"), arg);
            return this;
        }

        public Double getFreight() {
            return (Double) get("freight");
        }

        public orders_variance_fields setFreight(Double arg) {
            optimisticData.put(getKey("freight"), arg);
            return this;
        }

        public Double getOrderId() {
            return (Double) get("order_id");
        }

        public orders_variance_fields setOrderId(Double arg) {
            optimisticData.put(getKey("order_id"), arg);
            return this;
        }

        public Double getShipVia() {
            return (Double) get("ship_via");
        }

        public orders_variance_fields setShipVia(Double arg) {
            optimisticData.put(getKey("ship_via"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "employee_id": return false;

                case "freight": return false;

                case "order_id": return false;

                case "ship_via": return false;

                default: return false;
            }
        }
    }

    public static class orders_variance_order_by implements Serializable {
        private order_by employeeId;

        private order_by freight;

        private order_by orderId;

        private order_by shipVia;

        public order_by getEmployeeId() {
            return employeeId;
        }

        public orders_variance_order_by setEmployeeId(order_by employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public order_by getFreight() {
            return freight;
        }

        public orders_variance_order_by setFreight(order_by freight) {
            this.freight = freight;
            return this;
        }

        public order_by getOrderId() {
            return orderId;
        }

        public orders_variance_order_by setOrderId(order_by orderId) {
            this.orderId = orderId;
            return this;
        }

        public order_by getShipVia() {
            return shipVia;
        }

        public orders_variance_order_by setShipVia(order_by shipVia) {
            this.shipVia = shipVia;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (employeeId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("employee_id:");
                _queryBuilder.append(employeeId.toString());
            }

            if (freight != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("freight:");
                _queryBuilder.append(freight.toString());
            }

            if (orderId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("order_id:");
                _queryBuilder.append(orderId.toString());
            }

            if (shipVia != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("ship_via:");
                _queryBuilder.append(shipVia.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface productsQueryDefinition {
        void define(productsQuery _queryBuilder);
    }

    /**
    * columns and relationships of "products"
    */
    public static class productsQuery extends Query<productsQuery> {
        productsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public productsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public productsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public productsQuery productId() {
            startField("product_id");

            return this;
        }

        public productsQuery productName() {
            startField("product_name");

            return this;
        }

        public productsQuery quantityPerUnit() {
            startField("quantity_per_unit");

            return this;
        }

        public productsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public productsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public productsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public productsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public productsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * columns and relationships of "products"
    */
    public static class products extends AbstractResponse<products> {
        public products() {
        }

        public products(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "product_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "product_name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "quantity_per_unit": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public products setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Integer getDiscontinued() {
            return (Integer) get("discontinued");
        }

        public products setDiscontinued(Integer arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public products setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public String getProductName() {
            return (String) get("product_name");
        }

        public products setProductName(String arg) {
            optimisticData.put(getKey("product_name"), arg);
            return this;
        }

        public String getQuantityPerUnit() {
            return (String) get("quantity_per_unit");
        }

        public products setQuantityPerUnit(String arg) {
            optimisticData.put(getKey("quantity_per_unit"), arg);
            return this;
        }

        public Integer getReorderLevel() {
            return (Integer) get("reorder_level");
        }

        public products setReorderLevel(Integer arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public products setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Integer getUnitsInStock() {
            return (Integer) get("units_in_stock");
        }

        public products setUnitsInStock(Integer arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Integer getUnitsOnOrder() {
            return (Integer) get("units_on_order");
        }

        public products setUnitsOnOrder(Integer arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "product_name": return false;

                case "quantity_per_unit": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public interface products_aggregateQueryDefinition {
        void define(products_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "products"
    */
    public static class products_aggregateQuery extends Query<products_aggregateQuery> {
        products_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_aggregateQuery aggregate(products_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new products_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregateQuery nodes(productsQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new productsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "products"
    */
    public static class products_aggregate extends AbstractResponse<products_aggregate> {
        public products_aggregate() {
        }

        public products_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        products_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<products> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new products(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_aggregate";
        }

        public products_aggregate_fields getAggregate() {
            return (products_aggregate_fields) get("aggregate");
        }

        public products_aggregate setAggregate(products_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<products> getNodes() {
            return (List<products>) get("nodes");
        }

        public products_aggregate setNodes(List<products> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface products_aggregate_fieldsQueryDefinition {
        void define(products_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "products"
    */
    public static class products_aggregate_fieldsQuery extends Query<products_aggregate_fieldsQuery> {
        products_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_aggregate_fieldsQuery avg(products_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new products_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<products_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public products_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public products_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public products_aggregate_fieldsQuery max(products_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new products_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery min(products_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new products_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery stddev(products_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new products_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery stddevPop(products_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new products_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery stddevSamp(products_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new products_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery sum(products_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new products_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery varPop(products_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new products_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery varSamp(products_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new products_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public products_aggregate_fieldsQuery variance(products_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new products_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "products"
    */
    public static class products_aggregate_fields extends AbstractResponse<products_aggregate_fields> {
        public products_aggregate_fields() {
        }

        public products_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        products_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        products_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        products_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        products_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        products_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        products_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        products_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        products_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        products_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        products_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_aggregate_fields";
        }

        public products_avg_fields getAvg() {
            return (products_avg_fields) get("avg");
        }

        public products_aggregate_fields setAvg(products_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public products_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public products_max_fields getMax() {
            return (products_max_fields) get("max");
        }

        public products_aggregate_fields setMax(products_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public products_min_fields getMin() {
            return (products_min_fields) get("min");
        }

        public products_aggregate_fields setMin(products_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public products_stddev_fields getStddev() {
            return (products_stddev_fields) get("stddev");
        }

        public products_aggregate_fields setStddev(products_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public products_stddev_pop_fields getStddevPop() {
            return (products_stddev_pop_fields) get("stddev_pop");
        }

        public products_aggregate_fields setStddevPop(products_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public products_stddev_samp_fields getStddevSamp() {
            return (products_stddev_samp_fields) get("stddev_samp");
        }

        public products_aggregate_fields setStddevSamp(products_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public products_sum_fields getSum() {
            return (products_sum_fields) get("sum");
        }

        public products_aggregate_fields setSum(products_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public products_var_pop_fields getVarPop() {
            return (products_var_pop_fields) get("var_pop");
        }

        public products_aggregate_fields setVarPop(products_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public products_var_samp_fields getVarSamp() {
            return (products_var_samp_fields) get("var_samp");
        }

        public products_aggregate_fields setVarSamp(products_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public products_variance_fields getVariance() {
            return (products_variance_fields) get("variance");
        }

        public products_aggregate_fields setVariance(products_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class products_aggregate_order_by implements Serializable {
        private products_avg_order_by avg;

        private order_by count;

        private products_max_order_by max;

        private products_min_order_by min;

        private products_stddev_order_by stddev;

        private products_stddev_pop_order_by stddevPop;

        private products_stddev_samp_order_by stddevSamp;

        private products_sum_order_by sum;

        private products_var_pop_order_by varPop;

        private products_var_samp_order_by varSamp;

        private products_variance_order_by variance;

        public products_avg_order_by getAvg() {
            return avg;
        }

        public products_aggregate_order_by setAvg(products_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public products_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public products_max_order_by getMax() {
            return max;
        }

        public products_aggregate_order_by setMax(products_max_order_by max) {
            this.max = max;
            return this;
        }

        public products_min_order_by getMin() {
            return min;
        }

        public products_aggregate_order_by setMin(products_min_order_by min) {
            this.min = min;
            return this;
        }

        public products_stddev_order_by getStddev() {
            return stddev;
        }

        public products_aggregate_order_by setStddev(products_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public products_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public products_aggregate_order_by setStddevPop(products_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public products_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public products_aggregate_order_by setStddevSamp(products_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public products_sum_order_by getSum() {
            return sum;
        }

        public products_aggregate_order_by setSum(products_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public products_var_pop_order_by getVarPop() {
            return varPop;
        }

        public products_aggregate_order_by setVarPop(products_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public products_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public products_aggregate_order_by setVarSamp(products_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public products_variance_order_by getVariance() {
            return variance;
        }

        public products_aggregate_order_by setVariance(products_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class products_arr_rel_insert_input implements Serializable {
        private List<products_insert_input> data;

        private products_on_conflict onConflict;

        public products_arr_rel_insert_input(List<products_insert_input> data) {
            this.data = data;
        }

        public List<products_insert_input> getData() {
            return data;
        }

        public products_arr_rel_insert_input setData(List<products_insert_input> data) {
            this.data = data;
            return this;
        }

        public products_on_conflict getOnConflict() {
            return onConflict;
        }

        public products_arr_rel_insert_input setOnConflict(products_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (products_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_avg_fieldsQueryDefinition {
        void define(products_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class products_avg_fieldsQuery extends Query<products_avg_fieldsQuery> {
        products_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_avg_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_avg_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_avg_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_avg_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_avg_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_avg_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_avg_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_avg_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class products_avg_fields extends AbstractResponse<products_avg_fields> {
        public products_avg_fields() {
        }

        public products_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_avg_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public products_avg_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Double getDiscontinued() {
            return (Double) get("discontinued");
        }

        public products_avg_fields setDiscontinued(Double arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public products_avg_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getReorderLevel() {
            return (Double) get("reorder_level");
        }

        public products_avg_fields setReorderLevel(Double arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public products_avg_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_avg_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Double getUnitsInStock() {
            return (Double) get("units_in_stock");
        }

        public products_avg_fields setUnitsInStock(Double arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Double getUnitsOnOrder() {
            return (Double) get("units_on_order");
        }

        public products_avg_fields setUnitsOnOrder(Double arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_avg_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_avg_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_avg_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_avg_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_avg_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_avg_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_avg_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_avg_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_avg_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class products_bool_exp implements Serializable {
        private List<products_bool_exp> And;

        private products_bool_exp Not;

        private List<products_bool_exp> Or;

        private Int_comparison_exp categoryId;

        private integer_comparison_exp discontinued;

        private Int_comparison_exp productId;

        private varchar_comparison_exp productName;

        private varchar_comparison_exp quantityPerUnit;

        private Int_comparison_exp reorderLevel;

        private Int_comparison_exp supplierId;

        private real_comparison_exp unitPrice;

        private Int_comparison_exp unitsInStock;

        private Int_comparison_exp unitsOnOrder;

        public List<products_bool_exp> getAnd() {
            return And;
        }

        public products_bool_exp setAnd(List<products_bool_exp> And) {
            this.And = And;
            return this;
        }

        public products_bool_exp getNot() {
            return Not;
        }

        public products_bool_exp setNot(products_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<products_bool_exp> getOr() {
            return Or;
        }

        public products_bool_exp setOr(List<products_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public Int_comparison_exp getCategoryId() {
            return categoryId;
        }

        public products_bool_exp setCategoryId(Int_comparison_exp categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public integer_comparison_exp getDiscontinued() {
            return discontinued;
        }

        public products_bool_exp setDiscontinued(integer_comparison_exp discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public Int_comparison_exp getProductId() {
            return productId;
        }

        public products_bool_exp setProductId(Int_comparison_exp productId) {
            this.productId = productId;
            return this;
        }

        public varchar_comparison_exp getProductName() {
            return productName;
        }

        public products_bool_exp setProductName(varchar_comparison_exp productName) {
            this.productName = productName;
            return this;
        }

        public varchar_comparison_exp getQuantityPerUnit() {
            return quantityPerUnit;
        }

        public products_bool_exp setQuantityPerUnit(varchar_comparison_exp quantityPerUnit) {
            this.quantityPerUnit = quantityPerUnit;
            return this;
        }

        public Int_comparison_exp getReorderLevel() {
            return reorderLevel;
        }

        public products_bool_exp setReorderLevel(Int_comparison_exp reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public Int_comparison_exp getSupplierId() {
            return supplierId;
        }

        public products_bool_exp setSupplierId(Int_comparison_exp supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public real_comparison_exp getUnitPrice() {
            return unitPrice;
        }

        public products_bool_exp setUnitPrice(real_comparison_exp unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public Int_comparison_exp getUnitsInStock() {
            return unitsInStock;
        }

        public products_bool_exp setUnitsInStock(Int_comparison_exp unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public Int_comparison_exp getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_bool_exp setUnitsOnOrder(Int_comparison_exp unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (products_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (products_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                categoryId.appendTo(_queryBuilder);
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                discontinued.appendTo(_queryBuilder);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                productId.appendTo(_queryBuilder);
            }

            if (productName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_name:");
                productName.appendTo(_queryBuilder);
            }

            if (quantityPerUnit != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity_per_unit:");
                quantityPerUnit.appendTo(_queryBuilder);
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                reorderLevel.appendTo(_queryBuilder);
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                supplierId.appendTo(_queryBuilder);
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                unitPrice.appendTo(_queryBuilder);
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                unitsInStock.appendTo(_queryBuilder);
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                unitsOnOrder.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "products"
    */
    public enum products_constraint {
        PK_PRODUCTS,

        UNKNOWN_VALUE;

        public static products_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_products": {
                    return PK_PRODUCTS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_PRODUCTS: {
                    return "pk_products";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class products_inc_input implements Serializable {
        private Integer categoryId;

        private Integer discontinued;

        private Integer productId;

        private Integer reorderLevel;

        private Integer supplierId;

        private Integer unitsInStock;

        private Integer unitsOnOrder;

        public Integer getCategoryId() {
            return categoryId;
        }

        public products_inc_input setCategoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public Integer getDiscontinued() {
            return discontinued;
        }

        public products_inc_input setDiscontinued(Integer discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public Integer getProductId() {
            return productId;
        }

        public products_inc_input setProductId(Integer productId) {
            this.productId = productId;
            return this;
        }

        public Integer getReorderLevel() {
            return reorderLevel;
        }

        public products_inc_input setReorderLevel(Integer reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public Integer getSupplierId() {
            return supplierId;
        }

        public products_inc_input setSupplierId(Integer supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public Integer getUnitsInStock() {
            return unitsInStock;
        }

        public products_inc_input setUnitsInStock(Integer unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public Integer getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_inc_input setUnitsOnOrder(Integer unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId);
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId);
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel);
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId);
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock);
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class products_insert_input implements Serializable {
        private Integer categoryId;

        private Integer discontinued;

        private Integer productId;

        private String productName;

        private String quantityPerUnit;

        private Integer reorderLevel;

        private Integer supplierId;

        private Double unitPrice;

        private Integer unitsInStock;

        private Integer unitsOnOrder;

        public Integer getCategoryId() {
            return categoryId;
        }

        public products_insert_input setCategoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public Integer getDiscontinued() {
            return discontinued;
        }

        public products_insert_input setDiscontinued(Integer discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public Integer getProductId() {
            return productId;
        }

        public products_insert_input setProductId(Integer productId) {
            this.productId = productId;
            return this;
        }

        public String getProductName() {
            return productName;
        }

        public products_insert_input setProductName(String productName) {
            this.productName = productName;
            return this;
        }

        public String getQuantityPerUnit() {
            return quantityPerUnit;
        }

        public products_insert_input setQuantityPerUnit(String quantityPerUnit) {
            this.quantityPerUnit = quantityPerUnit;
            return this;
        }

        public Integer getReorderLevel() {
            return reorderLevel;
        }

        public products_insert_input setReorderLevel(Integer reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public Integer getSupplierId() {
            return supplierId;
        }

        public products_insert_input setSupplierId(Integer supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public Double getUnitPrice() {
            return unitPrice;
        }

        public products_insert_input setUnitPrice(Double unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public Integer getUnitsInStock() {
            return unitsInStock;
        }

        public products_insert_input setUnitsInStock(Integer unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public Integer getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_insert_input setUnitsOnOrder(Integer unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId);
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId);
            }

            if (productName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_name:");
                Query.appendQuotedString(_queryBuilder, productName.toString());
            }

            if (quantityPerUnit != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity_per_unit:");
                Query.appendQuotedString(_queryBuilder, quantityPerUnit.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel);
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId);
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice);
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock);
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_max_fieldsQueryDefinition {
        void define(products_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class products_max_fieldsQuery extends Query<products_max_fieldsQuery> {
        products_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_max_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_max_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_max_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_max_fieldsQuery productName() {
            startField("product_name");

            return this;
        }

        public products_max_fieldsQuery quantityPerUnit() {
            startField("quantity_per_unit");

            return this;
        }

        public products_max_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_max_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_max_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_max_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_max_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class products_max_fields extends AbstractResponse<products_max_fields> {
        public products_max_fields() {
        }

        public products_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity_per_unit": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_max_fields";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public products_max_fields setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Integer getDiscontinued() {
            return (Integer) get("discontinued");
        }

        public products_max_fields setDiscontinued(Integer arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public products_max_fields setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public String getProductName() {
            return (String) get("product_name");
        }

        public products_max_fields setProductName(String arg) {
            optimisticData.put(getKey("product_name"), arg);
            return this;
        }

        public String getQuantityPerUnit() {
            return (String) get("quantity_per_unit");
        }

        public products_max_fields setQuantityPerUnit(String arg) {
            optimisticData.put(getKey("quantity_per_unit"), arg);
            return this;
        }

        public Integer getReorderLevel() {
            return (Integer) get("reorder_level");
        }

        public products_max_fields setReorderLevel(Integer arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public products_max_fields setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_max_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Integer getUnitsInStock() {
            return (Integer) get("units_in_stock");
        }

        public products_max_fields setUnitsInStock(Integer arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Integer getUnitsOnOrder() {
            return (Integer) get("units_on_order");
        }

        public products_max_fields setUnitsOnOrder(Integer arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "product_name": return false;

                case "quantity_per_unit": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_max_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by productName;

        private order_by quantityPerUnit;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_max_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_max_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_max_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getProductName() {
            return productName;
        }

        public products_max_order_by setProductName(order_by productName) {
            this.productName = productName;
            return this;
        }

        public order_by getQuantityPerUnit() {
            return quantityPerUnit;
        }

        public products_max_order_by setQuantityPerUnit(order_by quantityPerUnit) {
            this.quantityPerUnit = quantityPerUnit;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_max_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_max_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_max_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_max_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_max_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (productName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_name:");
                _queryBuilder.append(productName.toString());
            }

            if (quantityPerUnit != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity_per_unit:");
                _queryBuilder.append(quantityPerUnit.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_min_fieldsQueryDefinition {
        void define(products_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class products_min_fieldsQuery extends Query<products_min_fieldsQuery> {
        products_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_min_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_min_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_min_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_min_fieldsQuery productName() {
            startField("product_name");

            return this;
        }

        public products_min_fieldsQuery quantityPerUnit() {
            startField("quantity_per_unit");

            return this;
        }

        public products_min_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_min_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_min_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_min_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_min_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class products_min_fields extends AbstractResponse<products_min_fields> {
        public products_min_fields() {
        }

        public products_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "quantity_per_unit": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_min_fields";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public products_min_fields setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Integer getDiscontinued() {
            return (Integer) get("discontinued");
        }

        public products_min_fields setDiscontinued(Integer arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public products_min_fields setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public String getProductName() {
            return (String) get("product_name");
        }

        public products_min_fields setProductName(String arg) {
            optimisticData.put(getKey("product_name"), arg);
            return this;
        }

        public String getQuantityPerUnit() {
            return (String) get("quantity_per_unit");
        }

        public products_min_fields setQuantityPerUnit(String arg) {
            optimisticData.put(getKey("quantity_per_unit"), arg);
            return this;
        }

        public Integer getReorderLevel() {
            return (Integer) get("reorder_level");
        }

        public products_min_fields setReorderLevel(Integer arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public products_min_fields setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_min_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Integer getUnitsInStock() {
            return (Integer) get("units_in_stock");
        }

        public products_min_fields setUnitsInStock(Integer arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Integer getUnitsOnOrder() {
            return (Integer) get("units_on_order");
        }

        public products_min_fields setUnitsOnOrder(Integer arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "product_name": return false;

                case "quantity_per_unit": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_min_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by productName;

        private order_by quantityPerUnit;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_min_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_min_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_min_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getProductName() {
            return productName;
        }

        public products_min_order_by setProductName(order_by productName) {
            this.productName = productName;
            return this;
        }

        public order_by getQuantityPerUnit() {
            return quantityPerUnit;
        }

        public products_min_order_by setQuantityPerUnit(order_by quantityPerUnit) {
            this.quantityPerUnit = quantityPerUnit;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_min_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_min_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_min_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_min_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_min_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (productName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_name:");
                _queryBuilder.append(productName.toString());
            }

            if (quantityPerUnit != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity_per_unit:");
                _queryBuilder.append(quantityPerUnit.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_mutation_responseQueryDefinition {
        void define(products_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "products"
    */
    public static class products_mutation_responseQuery extends Query<products_mutation_responseQuery> {
        products_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public products_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public products_mutation_responseQuery returning(productsQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new productsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "products"
    */
    public static class products_mutation_response extends AbstractResponse<products_mutation_response> {
        public products_mutation_response() {
        }

        public products_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<products> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new products(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public products_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<products> getReturning() {
            return (List<products>) get("returning");
        }

        public products_mutation_response setReturning(List<products> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class products_obj_rel_insert_input implements Serializable {
        private products_insert_input data;

        private products_on_conflict onConflict;

        public products_obj_rel_insert_input(products_insert_input data) {
            this.data = data;
        }

        public products_insert_input getData() {
            return data;
        }

        public products_obj_rel_insert_input setData(products_insert_input data) {
            this.data = data;
            return this;
        }

        public products_on_conflict getOnConflict() {
            return onConflict;
        }

        public products_obj_rel_insert_input setOnConflict(products_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class products_on_conflict implements Serializable {
        private products_constraint constraint;

        private List<products_update_column> updateColumns;

        public products_on_conflict(products_constraint constraint, List<products_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public products_constraint getConstraint() {
            return constraint;
        }

        public products_on_conflict setConstraint(products_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<products_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public products_on_conflict setUpdateColumns(List<products_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (products_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class products_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by productName;

        private order_by quantityPerUnit;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getProductName() {
            return productName;
        }

        public products_order_by setProductName(order_by productName) {
            this.productName = productName;
            return this;
        }

        public order_by getQuantityPerUnit() {
            return quantityPerUnit;
        }

        public products_order_by setQuantityPerUnit(order_by quantityPerUnit) {
            this.quantityPerUnit = quantityPerUnit;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (productName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_name:");
                _queryBuilder.append(productName.toString());
            }

            if (quantityPerUnit != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity_per_unit:");
                _queryBuilder.append(quantityPerUnit.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "products"
    */
    public enum products_select_column {
        CATEGORY_ID,

        DISCONTINUED,

        PRODUCT_ID,

        PRODUCT_NAME,

        QUANTITY_PER_UNIT,

        REORDER_LEVEL,

        SUPPLIER_ID,

        UNIT_PRICE,

        UNITS_IN_STOCK,

        UNITS_ON_ORDER,

        UNKNOWN_VALUE;

        public static products_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "category_id": {
                    return CATEGORY_ID;
                }

                case "discontinued": {
                    return DISCONTINUED;
                }

                case "product_id": {
                    return PRODUCT_ID;
                }

                case "product_name": {
                    return PRODUCT_NAME;
                }

                case "quantity_per_unit": {
                    return QUANTITY_PER_UNIT;
                }

                case "reorder_level": {
                    return REORDER_LEVEL;
                }

                case "supplier_id": {
                    return SUPPLIER_ID;
                }

                case "unit_price": {
                    return UNIT_PRICE;
                }

                case "units_in_stock": {
                    return UNITS_IN_STOCK;
                }

                case "units_on_order": {
                    return UNITS_ON_ORDER;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CATEGORY_ID: {
                    return "category_id";
                }

                case DISCONTINUED: {
                    return "discontinued";
                }

                case PRODUCT_ID: {
                    return "product_id";
                }

                case PRODUCT_NAME: {
                    return "product_name";
                }

                case QUANTITY_PER_UNIT: {
                    return "quantity_per_unit";
                }

                case REORDER_LEVEL: {
                    return "reorder_level";
                }

                case SUPPLIER_ID: {
                    return "supplier_id";
                }

                case UNIT_PRICE: {
                    return "unit_price";
                }

                case UNITS_IN_STOCK: {
                    return "units_in_stock";
                }

                case UNITS_ON_ORDER: {
                    return "units_on_order";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class products_set_input implements Serializable {
        private Integer categoryId;

        private Integer discontinued;

        private Integer productId;

        private String productName;

        private String quantityPerUnit;

        private Integer reorderLevel;

        private Integer supplierId;

        private Double unitPrice;

        private Integer unitsInStock;

        private Integer unitsOnOrder;

        public Integer getCategoryId() {
            return categoryId;
        }

        public products_set_input setCategoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public Integer getDiscontinued() {
            return discontinued;
        }

        public products_set_input setDiscontinued(Integer discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public Integer getProductId() {
            return productId;
        }

        public products_set_input setProductId(Integer productId) {
            this.productId = productId;
            return this;
        }

        public String getProductName() {
            return productName;
        }

        public products_set_input setProductName(String productName) {
            this.productName = productName;
            return this;
        }

        public String getQuantityPerUnit() {
            return quantityPerUnit;
        }

        public products_set_input setQuantityPerUnit(String quantityPerUnit) {
            this.quantityPerUnit = quantityPerUnit;
            return this;
        }

        public Integer getReorderLevel() {
            return reorderLevel;
        }

        public products_set_input setReorderLevel(Integer reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public Integer getSupplierId() {
            return supplierId;
        }

        public products_set_input setSupplierId(Integer supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public Double getUnitPrice() {
            return unitPrice;
        }

        public products_set_input setUnitPrice(Double unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public Integer getUnitsInStock() {
            return unitsInStock;
        }

        public products_set_input setUnitsInStock(Integer unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public Integer getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_set_input setUnitsOnOrder(Integer unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId);
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued);
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId);
            }

            if (productName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_name:");
                Query.appendQuotedString(_queryBuilder, productName.toString());
            }

            if (quantityPerUnit != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("quantity_per_unit:");
                Query.appendQuotedString(_queryBuilder, quantityPerUnit.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel);
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId);
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice);
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock);
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_stddev_fieldsQueryDefinition {
        void define(products_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class products_stddev_fieldsQuery extends Query<products_stddev_fieldsQuery> {
        products_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_stddev_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_stddev_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_stddev_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_stddev_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_stddev_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_stddev_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_stddev_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_stddev_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class products_stddev_fields extends AbstractResponse<products_stddev_fields> {
        public products_stddev_fields() {
        }

        public products_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_stddev_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public products_stddev_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Double getDiscontinued() {
            return (Double) get("discontinued");
        }

        public products_stddev_fields setDiscontinued(Double arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public products_stddev_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getReorderLevel() {
            return (Double) get("reorder_level");
        }

        public products_stddev_fields setReorderLevel(Double arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public products_stddev_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_stddev_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Double getUnitsInStock() {
            return (Double) get("units_in_stock");
        }

        public products_stddev_fields setUnitsInStock(Double arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Double getUnitsOnOrder() {
            return (Double) get("units_on_order");
        }

        public products_stddev_fields setUnitsOnOrder(Double arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_stddev_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_stddev_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_stddev_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_stddev_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_stddev_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_stddev_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_stddev_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_stddev_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_stddev_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_stddev_pop_fieldsQueryDefinition {
        void define(products_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class products_stddev_pop_fieldsQuery extends Query<products_stddev_pop_fieldsQuery> {
        products_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_stddev_pop_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_stddev_pop_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_stddev_pop_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_stddev_pop_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_stddev_pop_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_stddev_pop_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_stddev_pop_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_stddev_pop_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class products_stddev_pop_fields extends AbstractResponse<products_stddev_pop_fields> {
        public products_stddev_pop_fields() {
        }

        public products_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_stddev_pop_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public products_stddev_pop_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Double getDiscontinued() {
            return (Double) get("discontinued");
        }

        public products_stddev_pop_fields setDiscontinued(Double arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public products_stddev_pop_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getReorderLevel() {
            return (Double) get("reorder_level");
        }

        public products_stddev_pop_fields setReorderLevel(Double arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public products_stddev_pop_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_stddev_pop_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Double getUnitsInStock() {
            return (Double) get("units_in_stock");
        }

        public products_stddev_pop_fields setUnitsInStock(Double arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Double getUnitsOnOrder() {
            return (Double) get("units_on_order");
        }

        public products_stddev_pop_fields setUnitsOnOrder(Double arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_stddev_pop_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_stddev_pop_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_stddev_pop_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_stddev_pop_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_stddev_pop_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_stddev_pop_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_stddev_pop_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_stddev_pop_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_stddev_pop_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_stddev_samp_fieldsQueryDefinition {
        void define(products_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class products_stddev_samp_fieldsQuery extends Query<products_stddev_samp_fieldsQuery> {
        products_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_stddev_samp_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_stddev_samp_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_stddev_samp_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_stddev_samp_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_stddev_samp_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_stddev_samp_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_stddev_samp_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_stddev_samp_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class products_stddev_samp_fields extends AbstractResponse<products_stddev_samp_fields> {
        public products_stddev_samp_fields() {
        }

        public products_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_stddev_samp_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public products_stddev_samp_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Double getDiscontinued() {
            return (Double) get("discontinued");
        }

        public products_stddev_samp_fields setDiscontinued(Double arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public products_stddev_samp_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getReorderLevel() {
            return (Double) get("reorder_level");
        }

        public products_stddev_samp_fields setReorderLevel(Double arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public products_stddev_samp_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_stddev_samp_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Double getUnitsInStock() {
            return (Double) get("units_in_stock");
        }

        public products_stddev_samp_fields setUnitsInStock(Double arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Double getUnitsOnOrder() {
            return (Double) get("units_on_order");
        }

        public products_stddev_samp_fields setUnitsOnOrder(Double arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_stddev_samp_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_stddev_samp_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_stddev_samp_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_stddev_samp_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_stddev_samp_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_stddev_samp_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_stddev_samp_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_stddev_samp_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_stddev_samp_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_sum_fieldsQueryDefinition {
        void define(products_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class products_sum_fieldsQuery extends Query<products_sum_fieldsQuery> {
        products_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_sum_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_sum_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_sum_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_sum_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_sum_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_sum_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_sum_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_sum_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class products_sum_fields extends AbstractResponse<products_sum_fields> {
        public products_sum_fields() {
        }

        public products_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_sum_fields";
        }

        public Integer getCategoryId() {
            return (Integer) get("category_id");
        }

        public products_sum_fields setCategoryId(Integer arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Integer getDiscontinued() {
            return (Integer) get("discontinued");
        }

        public products_sum_fields setDiscontinued(Integer arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Integer getProductId() {
            return (Integer) get("product_id");
        }

        public products_sum_fields setProductId(Integer arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Integer getReorderLevel() {
            return (Integer) get("reorder_level");
        }

        public products_sum_fields setReorderLevel(Integer arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public products_sum_fields setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_sum_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Integer getUnitsInStock() {
            return (Integer) get("units_in_stock");
        }

        public products_sum_fields setUnitsInStock(Integer arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Integer getUnitsOnOrder() {
            return (Integer) get("units_on_order");
        }

        public products_sum_fields setUnitsOnOrder(Integer arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_sum_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_sum_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_sum_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_sum_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_sum_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_sum_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_sum_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_sum_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_sum_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "products"
    */
    public enum products_update_column {
        CATEGORY_ID,

        DISCONTINUED,

        PRODUCT_ID,

        PRODUCT_NAME,

        QUANTITY_PER_UNIT,

        REORDER_LEVEL,

        SUPPLIER_ID,

        UNIT_PRICE,

        UNITS_IN_STOCK,

        UNITS_ON_ORDER,

        UNKNOWN_VALUE;

        public static products_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "category_id": {
                    return CATEGORY_ID;
                }

                case "discontinued": {
                    return DISCONTINUED;
                }

                case "product_id": {
                    return PRODUCT_ID;
                }

                case "product_name": {
                    return PRODUCT_NAME;
                }

                case "quantity_per_unit": {
                    return QUANTITY_PER_UNIT;
                }

                case "reorder_level": {
                    return REORDER_LEVEL;
                }

                case "supplier_id": {
                    return SUPPLIER_ID;
                }

                case "unit_price": {
                    return UNIT_PRICE;
                }

                case "units_in_stock": {
                    return UNITS_IN_STOCK;
                }

                case "units_on_order": {
                    return UNITS_ON_ORDER;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case CATEGORY_ID: {
                    return "category_id";
                }

                case DISCONTINUED: {
                    return "discontinued";
                }

                case PRODUCT_ID: {
                    return "product_id";
                }

                case PRODUCT_NAME: {
                    return "product_name";
                }

                case QUANTITY_PER_UNIT: {
                    return "quantity_per_unit";
                }

                case REORDER_LEVEL: {
                    return "reorder_level";
                }

                case SUPPLIER_ID: {
                    return "supplier_id";
                }

                case UNIT_PRICE: {
                    return "unit_price";
                }

                case UNITS_IN_STOCK: {
                    return "units_in_stock";
                }

                case UNITS_ON_ORDER: {
                    return "units_on_order";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface products_var_pop_fieldsQueryDefinition {
        void define(products_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class products_var_pop_fieldsQuery extends Query<products_var_pop_fieldsQuery> {
        products_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_var_pop_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_var_pop_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_var_pop_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_var_pop_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_var_pop_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_var_pop_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_var_pop_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_var_pop_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class products_var_pop_fields extends AbstractResponse<products_var_pop_fields> {
        public products_var_pop_fields() {
        }

        public products_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_var_pop_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public products_var_pop_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Double getDiscontinued() {
            return (Double) get("discontinued");
        }

        public products_var_pop_fields setDiscontinued(Double arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public products_var_pop_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getReorderLevel() {
            return (Double) get("reorder_level");
        }

        public products_var_pop_fields setReorderLevel(Double arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public products_var_pop_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_var_pop_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Double getUnitsInStock() {
            return (Double) get("units_in_stock");
        }

        public products_var_pop_fields setUnitsInStock(Double arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Double getUnitsOnOrder() {
            return (Double) get("units_on_order");
        }

        public products_var_pop_fields setUnitsOnOrder(Double arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_var_pop_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_var_pop_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_var_pop_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_var_pop_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_var_pop_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_var_pop_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_var_pop_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_var_pop_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_var_pop_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_var_samp_fieldsQueryDefinition {
        void define(products_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class products_var_samp_fieldsQuery extends Query<products_var_samp_fieldsQuery> {
        products_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_var_samp_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_var_samp_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_var_samp_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_var_samp_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_var_samp_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_var_samp_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_var_samp_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_var_samp_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class products_var_samp_fields extends AbstractResponse<products_var_samp_fields> {
        public products_var_samp_fields() {
        }

        public products_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_var_samp_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public products_var_samp_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Double getDiscontinued() {
            return (Double) get("discontinued");
        }

        public products_var_samp_fields setDiscontinued(Double arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public products_var_samp_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getReorderLevel() {
            return (Double) get("reorder_level");
        }

        public products_var_samp_fields setReorderLevel(Double arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public products_var_samp_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_var_samp_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Double getUnitsInStock() {
            return (Double) get("units_in_stock");
        }

        public products_var_samp_fields setUnitsInStock(Double arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Double getUnitsOnOrder() {
            return (Double) get("units_on_order");
        }

        public products_var_samp_fields setUnitsOnOrder(Double arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_var_samp_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_var_samp_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_var_samp_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_var_samp_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_var_samp_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_var_samp_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_var_samp_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_var_samp_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_var_samp_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface products_variance_fieldsQueryDefinition {
        void define(products_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class products_variance_fieldsQuery extends Query<products_variance_fieldsQuery> {
        products_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public products_variance_fieldsQuery categoryId() {
            startField("category_id");

            return this;
        }

        public products_variance_fieldsQuery discontinued() {
            startField("discontinued");

            return this;
        }

        public products_variance_fieldsQuery productId() {
            startField("product_id");

            return this;
        }

        public products_variance_fieldsQuery reorderLevel() {
            startField("reorder_level");

            return this;
        }

        public products_variance_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }

        public products_variance_fieldsQuery unitPrice() {
            startField("unit_price");

            return this;
        }

        public products_variance_fieldsQuery unitsInStock() {
            startField("units_in_stock");

            return this;
        }

        public products_variance_fieldsQuery unitsOnOrder() {
            startField("units_on_order");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class products_variance_fields extends AbstractResponse<products_variance_fields> {
        public products_variance_fields() {
        }

        public products_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "category_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "discontinued": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "product_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "reorder_level": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "unit_price": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_in_stock": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "units_on_order": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "products_variance_fields";
        }

        public Double getCategoryId() {
            return (Double) get("category_id");
        }

        public products_variance_fields setCategoryId(Double arg) {
            optimisticData.put(getKey("category_id"), arg);
            return this;
        }

        public Double getDiscontinued() {
            return (Double) get("discontinued");
        }

        public products_variance_fields setDiscontinued(Double arg) {
            optimisticData.put(getKey("discontinued"), arg);
            return this;
        }

        public Double getProductId() {
            return (Double) get("product_id");
        }

        public products_variance_fields setProductId(Double arg) {
            optimisticData.put(getKey("product_id"), arg);
            return this;
        }

        public Double getReorderLevel() {
            return (Double) get("reorder_level");
        }

        public products_variance_fields setReorderLevel(Double arg) {
            optimisticData.put(getKey("reorder_level"), arg);
            return this;
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public products_variance_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public Double getUnitPrice() {
            return (Double) get("unit_price");
        }

        public products_variance_fields setUnitPrice(Double arg) {
            optimisticData.put(getKey("unit_price"), arg);
            return this;
        }

        public Double getUnitsInStock() {
            return (Double) get("units_in_stock");
        }

        public products_variance_fields setUnitsInStock(Double arg) {
            optimisticData.put(getKey("units_in_stock"), arg);
            return this;
        }

        public Double getUnitsOnOrder() {
            return (Double) get("units_on_order");
        }

        public products_variance_fields setUnitsOnOrder(Double arg) {
            optimisticData.put(getKey("units_on_order"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "category_id": return false;

                case "discontinued": return false;

                case "product_id": return false;

                case "reorder_level": return false;

                case "supplier_id": return false;

                case "unit_price": return false;

                case "units_in_stock": return false;

                case "units_on_order": return false;

                default: return false;
            }
        }
    }

    public static class products_variance_order_by implements Serializable {
        private order_by categoryId;

        private order_by discontinued;

        private order_by productId;

        private order_by reorderLevel;

        private order_by supplierId;

        private order_by unitPrice;

        private order_by unitsInStock;

        private order_by unitsOnOrder;

        public order_by getCategoryId() {
            return categoryId;
        }

        public products_variance_order_by setCategoryId(order_by categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public order_by getDiscontinued() {
            return discontinued;
        }

        public products_variance_order_by setDiscontinued(order_by discontinued) {
            this.discontinued = discontinued;
            return this;
        }

        public order_by getProductId() {
            return productId;
        }

        public products_variance_order_by setProductId(order_by productId) {
            this.productId = productId;
            return this;
        }

        public order_by getReorderLevel() {
            return reorderLevel;
        }

        public products_variance_order_by setReorderLevel(order_by reorderLevel) {
            this.reorderLevel = reorderLevel;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public products_variance_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public order_by getUnitPrice() {
            return unitPrice;
        }

        public products_variance_order_by setUnitPrice(order_by unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public order_by getUnitsInStock() {
            return unitsInStock;
        }

        public products_variance_order_by setUnitsInStock(order_by unitsInStock) {
            this.unitsInStock = unitsInStock;
            return this;
        }

        public order_by getUnitsOnOrder() {
            return unitsOnOrder;
        }

        public products_variance_order_by setUnitsOnOrder(order_by unitsOnOrder) {
            this.unitsOnOrder = unitsOnOrder;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (categoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("category_id:");
                _queryBuilder.append(categoryId.toString());
            }

            if (discontinued != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("discontinued:");
                _queryBuilder.append(discontinued.toString());
            }

            if (productId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("product_id:");
                _queryBuilder.append(productId.toString());
            }

            if (reorderLevel != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("reorder_level:");
                _queryBuilder.append(reorderLevel.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            if (unitPrice != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("unit_price:");
                _queryBuilder.append(unitPrice.toString());
            }

            if (unitsInStock != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_in_stock:");
                _queryBuilder.append(unitsInStock.toString());
            }

            if (unitsOnOrder != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("units_on_order:");
                _queryBuilder.append(unitsOnOrder.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface query_rootQueryDefinition {
        void define(query_rootQuery _queryBuilder);
    }

    /**
    * query root
    */
    public static class query_rootQuery extends Query<query_rootQuery> {
        query_rootQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public class CategoriesArguments extends Arguments {
            CategoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CategoriesArguments distinctOn(List<categories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CategoriesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CategoriesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CategoriesArguments orderBy(List<categories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CategoriesArguments where(categories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CategoriesArgumentsDefinition {
            void define(CategoriesArguments args);
        }

        /**
        * fetch data from the table: "categories"
        */
        public query_rootQuery categories(categoriesQueryDefinition queryDef) {
            return categories(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "categories"
        */
        public query_rootQuery categories(CategoriesArgumentsDefinition argsDef, categoriesQueryDefinition queryDef) {
            startField("categories");

            CategoriesArguments args = new CategoriesArguments(_queryBuilder);
            argsDef.define(args);
            CategoriesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new categoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CategoriesAggregateArguments extends Arguments {
            CategoriesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CategoriesAggregateArguments distinctOn(List<categories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CategoriesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CategoriesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CategoriesAggregateArguments orderBy(List<categories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CategoriesAggregateArguments where(categories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CategoriesAggregateArgumentsDefinition {
            void define(CategoriesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "categories"
        */
        public query_rootQuery categoriesAggregate(categories_aggregateQueryDefinition queryDef) {
            return categoriesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "categories"
        */
        public query_rootQuery categoriesAggregate(CategoriesAggregateArgumentsDefinition argsDef, categories_aggregateQueryDefinition queryDef) {
            startField("categories_aggregate");

            CategoriesAggregateArguments args = new CategoriesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CategoriesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new categories_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "categories" using primary key columns
        */
        public query_rootQuery categoriesByPk(int categoryId, categoriesQueryDefinition queryDef) {
            startField("categories_by_pk");

            _queryBuilder.append("(category_id:");
            _queryBuilder.append(categoryId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new categoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerCustomerDemoArguments extends Arguments {
            CustomerCustomerDemoArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerCustomerDemoArguments distinctOn(List<customer_customer_demo_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerCustomerDemoArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerCustomerDemoArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerCustomerDemoArguments orderBy(List<customer_customer_demo_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerCustomerDemoArguments where(customer_customer_demo_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerCustomerDemoArgumentsDefinition {
            void define(CustomerCustomerDemoArguments args);
        }

        /**
        * fetch data from the table: "customer_customer_demo"
        */
        public query_rootQuery customerCustomerDemo(customer_customer_demoQueryDefinition queryDef) {
            return customerCustomerDemo(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "customer_customer_demo"
        */
        public query_rootQuery customerCustomerDemo(CustomerCustomerDemoArgumentsDefinition argsDef, customer_customer_demoQueryDefinition queryDef) {
            startField("customer_customer_demo");

            CustomerCustomerDemoArguments args = new CustomerCustomerDemoArguments(_queryBuilder);
            argsDef.define(args);
            CustomerCustomerDemoArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerCustomerDemoAggregateArguments extends Arguments {
            CustomerCustomerDemoAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerCustomerDemoAggregateArguments distinctOn(List<customer_customer_demo_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerCustomerDemoAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerCustomerDemoAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerCustomerDemoAggregateArguments orderBy(List<customer_customer_demo_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerCustomerDemoAggregateArguments where(customer_customer_demo_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerCustomerDemoAggregateArgumentsDefinition {
            void define(CustomerCustomerDemoAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "customer_customer_demo"
        */
        public query_rootQuery customerCustomerDemoAggregate(customer_customer_demo_aggregateQueryDefinition queryDef) {
            return customerCustomerDemoAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "customer_customer_demo"
        */
        public query_rootQuery customerCustomerDemoAggregate(CustomerCustomerDemoAggregateArgumentsDefinition argsDef, customer_customer_demo_aggregateQueryDefinition queryDef) {
            startField("customer_customer_demo_aggregate");

            CustomerCustomerDemoAggregateArguments args = new CustomerCustomerDemoAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CustomerCustomerDemoAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demo_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "customer_customer_demo" using primary key columns
        */
        public query_rootQuery customerCustomerDemoByPk(String customerId, String customerTypeId, customer_customer_demoQueryDefinition queryDef) {
            startField("customer_customer_demo_by_pk");

            _queryBuilder.append("(customer_id:");
            Query.appendQuotedString(_queryBuilder, customerId.toString());

            _queryBuilder.append(",customer_type_id:");
            Query.appendQuotedString(_queryBuilder, customerTypeId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerDemographicsArguments extends Arguments {
            CustomerDemographicsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerDemographicsArguments distinctOn(List<customer_demographics_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerDemographicsArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerDemographicsArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerDemographicsArguments orderBy(List<customer_demographics_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerDemographicsArguments where(customer_demographics_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerDemographicsArgumentsDefinition {
            void define(CustomerDemographicsArguments args);
        }

        /**
        * fetch data from the table: "customer_demographics"
        */
        public query_rootQuery customerDemographics(customer_demographicsQueryDefinition queryDef) {
            return customerDemographics(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "customer_demographics"
        */
        public query_rootQuery customerDemographics(CustomerDemographicsArgumentsDefinition argsDef, customer_demographicsQueryDefinition queryDef) {
            startField("customer_demographics");

            CustomerDemographicsArguments args = new CustomerDemographicsArguments(_queryBuilder);
            argsDef.define(args);
            CustomerDemographicsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_demographicsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerDemographicsAggregateArguments extends Arguments {
            CustomerDemographicsAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerDemographicsAggregateArguments distinctOn(List<customer_demographics_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerDemographicsAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerDemographicsAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerDemographicsAggregateArguments orderBy(List<customer_demographics_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerDemographicsAggregateArguments where(customer_demographics_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerDemographicsAggregateArgumentsDefinition {
            void define(CustomerDemographicsAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "customer_demographics"
        */
        public query_rootQuery customerDemographicsAggregate(customer_demographics_aggregateQueryDefinition queryDef) {
            return customerDemographicsAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "customer_demographics"
        */
        public query_rootQuery customerDemographicsAggregate(CustomerDemographicsAggregateArgumentsDefinition argsDef, customer_demographics_aggregateQueryDefinition queryDef) {
            startField("customer_demographics_aggregate");

            CustomerDemographicsAggregateArguments args = new CustomerDemographicsAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CustomerDemographicsAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "customer_demographics" using primary key columns
        */
        public query_rootQuery customerDemographicsByPk(String customerTypeId, customer_demographicsQueryDefinition queryDef) {
            startField("customer_demographics_by_pk");

            _queryBuilder.append("(customer_type_id:");
            Query.appendQuotedString(_queryBuilder, customerTypeId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_demographicsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomersArguments extends Arguments {
            CustomersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomersArguments distinctOn(List<customers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomersArguments orderBy(List<customers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomersArguments where(customers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomersArgumentsDefinition {
            void define(CustomersArguments args);
        }

        /**
        * fetch data from the table: "customers"
        */
        public query_rootQuery customers(customersQueryDefinition queryDef) {
            return customers(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "customers"
        */
        public query_rootQuery customers(CustomersArgumentsDefinition argsDef, customersQueryDefinition queryDef) {
            startField("customers");

            CustomersArguments args = new CustomersArguments(_queryBuilder);
            argsDef.define(args);
            CustomersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomersAggregateArguments extends Arguments {
            CustomersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomersAggregateArguments distinctOn(List<customers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomersAggregateArguments orderBy(List<customers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomersAggregateArguments where(customers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomersAggregateArgumentsDefinition {
            void define(CustomersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "customers"
        */
        public query_rootQuery customersAggregate(customers_aggregateQueryDefinition queryDef) {
            return customersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "customers"
        */
        public query_rootQuery customersAggregate(CustomersAggregateArgumentsDefinition argsDef, customers_aggregateQueryDefinition queryDef) {
            startField("customers_aggregate");

            CustomersAggregateArguments args = new CustomersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CustomersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customers_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "customers" using primary key columns
        */
        public query_rootQuery customersByPk(String customerId, customersQueryDefinition queryDef) {
            startField("customers_by_pk");

            _queryBuilder.append("(customer_id:");
            Query.appendQuotedString(_queryBuilder, customerId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeeTerritoriesArguments extends Arguments {
            EmployeeTerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeeTerritoriesArguments distinctOn(List<employee_territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeeTerritoriesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeeTerritoriesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeeTerritoriesArguments orderBy(List<employee_territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeeTerritoriesArguments where(employee_territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeeTerritoriesArgumentsDefinition {
            void define(EmployeeTerritoriesArguments args);
        }

        /**
        * fetch data from the table: "employee_territories"
        */
        public query_rootQuery employeeTerritories(employee_territoriesQueryDefinition queryDef) {
            return employeeTerritories(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "employee_territories"
        */
        public query_rootQuery employeeTerritories(EmployeeTerritoriesArgumentsDefinition argsDef, employee_territoriesQueryDefinition queryDef) {
            startField("employee_territories");

            EmployeeTerritoriesArguments args = new EmployeeTerritoriesArguments(_queryBuilder);
            argsDef.define(args);
            EmployeeTerritoriesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employee_territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeeTerritoriesAggregateArguments extends Arguments {
            EmployeeTerritoriesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeeTerritoriesAggregateArguments distinctOn(List<employee_territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeeTerritoriesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeeTerritoriesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeeTerritoriesAggregateArguments orderBy(List<employee_territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeeTerritoriesAggregateArguments where(employee_territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeeTerritoriesAggregateArgumentsDefinition {
            void define(EmployeeTerritoriesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "employee_territories"
        */
        public query_rootQuery employeeTerritoriesAggregate(employee_territories_aggregateQueryDefinition queryDef) {
            return employeeTerritoriesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "employee_territories"
        */
        public query_rootQuery employeeTerritoriesAggregate(EmployeeTerritoriesAggregateArgumentsDefinition argsDef, employee_territories_aggregateQueryDefinition queryDef) {
            startField("employee_territories_aggregate");

            EmployeeTerritoriesAggregateArguments args = new EmployeeTerritoriesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            EmployeeTerritoriesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "employee_territories" using primary key columns
        */
        public query_rootQuery employeeTerritoriesByPk(int employeeId, String territoryId, employee_territoriesQueryDefinition queryDef) {
            startField("employee_territories_by_pk");

            _queryBuilder.append("(employee_id:");
            _queryBuilder.append(employeeId);

            _queryBuilder.append(",territory_id:");
            Query.appendQuotedString(_queryBuilder, territoryId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employee_territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeesArguments extends Arguments {
            EmployeesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeesArguments distinctOn(List<employees_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeesArguments orderBy(List<employees_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeesArguments where(employees_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeesArgumentsDefinition {
            void define(EmployeesArguments args);
        }

        /**
        * fetch data from the table: "employees"
        */
        public query_rootQuery employees(employeesQueryDefinition queryDef) {
            return employees(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "employees"
        */
        public query_rootQuery employees(EmployeesArgumentsDefinition argsDef, employeesQueryDefinition queryDef) {
            startField("employees");

            EmployeesArguments args = new EmployeesArguments(_queryBuilder);
            argsDef.define(args);
            EmployeesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employeesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeesAggregateArguments extends Arguments {
            EmployeesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeesAggregateArguments distinctOn(List<employees_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeesAggregateArguments orderBy(List<employees_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeesAggregateArguments where(employees_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeesAggregateArgumentsDefinition {
            void define(EmployeesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "employees"
        */
        public query_rootQuery employeesAggregate(employees_aggregateQueryDefinition queryDef) {
            return employeesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "employees"
        */
        public query_rootQuery employeesAggregate(EmployeesAggregateArgumentsDefinition argsDef, employees_aggregateQueryDefinition queryDef) {
            startField("employees_aggregate");

            EmployeesAggregateArguments args = new EmployeesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            EmployeesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employees_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "employees" using primary key columns
        */
        public query_rootQuery employeesByPk(int employeeId, employeesQueryDefinition queryDef) {
            startField("employees_by_pk");

            _queryBuilder.append("(employee_id:");
            _queryBuilder.append(employeeId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employeesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrderDetailsArguments extends Arguments {
            OrderDetailsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrderDetailsArguments distinctOn(List<order_details_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrderDetailsArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrderDetailsArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrderDetailsArguments orderBy(List<order_details_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrderDetailsArguments where(order_details_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrderDetailsArgumentsDefinition {
            void define(OrderDetailsArguments args);
        }

        /**
        * fetch data from the table: "order_details"
        */
        public query_rootQuery orderDetails(order_detailsQueryDefinition queryDef) {
            return orderDetails(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "order_details"
        */
        public query_rootQuery orderDetails(OrderDetailsArgumentsDefinition argsDef, order_detailsQueryDefinition queryDef) {
            startField("order_details");

            OrderDetailsArguments args = new OrderDetailsArguments(_queryBuilder);
            argsDef.define(args);
            OrderDetailsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new order_detailsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrderDetailsAggregateArguments extends Arguments {
            OrderDetailsAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrderDetailsAggregateArguments distinctOn(List<order_details_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrderDetailsAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrderDetailsAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrderDetailsAggregateArguments orderBy(List<order_details_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrderDetailsAggregateArguments where(order_details_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrderDetailsAggregateArgumentsDefinition {
            void define(OrderDetailsAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "order_details"
        */
        public query_rootQuery orderDetailsAggregate(order_details_aggregateQueryDefinition queryDef) {
            return orderDetailsAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "order_details"
        */
        public query_rootQuery orderDetailsAggregate(OrderDetailsAggregateArgumentsDefinition argsDef, order_details_aggregateQueryDefinition queryDef) {
            startField("order_details_aggregate");

            OrderDetailsAggregateArguments args = new OrderDetailsAggregateArguments(_queryBuilder);
            argsDef.define(args);
            OrderDetailsAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new order_details_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "order_details" using primary key columns
        */
        public query_rootQuery orderDetailsByPk(int orderId, int productId, order_detailsQueryDefinition queryDef) {
            startField("order_details_by_pk");

            _queryBuilder.append("(order_id:");
            _queryBuilder.append(orderId);

            _queryBuilder.append(",product_id:");
            _queryBuilder.append(productId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new order_detailsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrdersArguments extends Arguments {
            OrdersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrdersArguments distinctOn(List<orders_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrdersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrdersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrdersArguments orderBy(List<orders_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrdersArguments where(orders_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrdersArgumentsDefinition {
            void define(OrdersArguments args);
        }

        /**
        * fetch data from the table: "orders"
        */
        public query_rootQuery orders(ordersQueryDefinition queryDef) {
            return orders(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "orders"
        */
        public query_rootQuery orders(OrdersArgumentsDefinition argsDef, ordersQueryDefinition queryDef) {
            startField("orders");

            OrdersArguments args = new OrdersArguments(_queryBuilder);
            argsDef.define(args);
            OrdersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ordersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrdersAggregateArguments extends Arguments {
            OrdersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrdersAggregateArguments distinctOn(List<orders_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrdersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrdersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrdersAggregateArguments orderBy(List<orders_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrdersAggregateArguments where(orders_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrdersAggregateArgumentsDefinition {
            void define(OrdersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "orders"
        */
        public query_rootQuery ordersAggregate(orders_aggregateQueryDefinition queryDef) {
            return ordersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "orders"
        */
        public query_rootQuery ordersAggregate(OrdersAggregateArgumentsDefinition argsDef, orders_aggregateQueryDefinition queryDef) {
            startField("orders_aggregate");

            OrdersAggregateArguments args = new OrdersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            OrdersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new orders_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "orders" using primary key columns
        */
        public query_rootQuery ordersByPk(int orderId, ordersQueryDefinition queryDef) {
            startField("orders_by_pk");

            _queryBuilder.append("(order_id:");
            _queryBuilder.append(orderId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ordersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ProductsArguments extends Arguments {
            ProductsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ProductsArguments distinctOn(List<products_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ProductsArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ProductsArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ProductsArguments orderBy(List<products_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ProductsArguments where(products_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ProductsArgumentsDefinition {
            void define(ProductsArguments args);
        }

        /**
        * fetch data from the table: "products"
        */
        public query_rootQuery products(productsQueryDefinition queryDef) {
            return products(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "products"
        */
        public query_rootQuery products(ProductsArgumentsDefinition argsDef, productsQueryDefinition queryDef) {
            startField("products");

            ProductsArguments args = new ProductsArguments(_queryBuilder);
            argsDef.define(args);
            ProductsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new productsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ProductsAggregateArguments extends Arguments {
            ProductsAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ProductsAggregateArguments distinctOn(List<products_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ProductsAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ProductsAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ProductsAggregateArguments orderBy(List<products_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ProductsAggregateArguments where(products_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ProductsAggregateArgumentsDefinition {
            void define(ProductsAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "products"
        */
        public query_rootQuery productsAggregate(products_aggregateQueryDefinition queryDef) {
            return productsAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "products"
        */
        public query_rootQuery productsAggregate(ProductsAggregateArgumentsDefinition argsDef, products_aggregateQueryDefinition queryDef) {
            startField("products_aggregate");

            ProductsAggregateArguments args = new ProductsAggregateArguments(_queryBuilder);
            argsDef.define(args);
            ProductsAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new products_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "products" using primary key columns
        */
        public query_rootQuery productsByPk(int productId, productsQueryDefinition queryDef) {
            startField("products_by_pk");

            _queryBuilder.append("(product_id:");
            _queryBuilder.append(productId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new productsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class RegionArguments extends Arguments {
            RegionArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public RegionArguments distinctOn(List<region_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public RegionArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public RegionArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public RegionArguments orderBy(List<region_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public RegionArguments where(region_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface RegionArgumentsDefinition {
            void define(RegionArguments args);
        }

        /**
        * fetch data from the table: "region"
        */
        public query_rootQuery region(regionQueryDefinition queryDef) {
            return region(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "region"
        */
        public query_rootQuery region(RegionArgumentsDefinition argsDef, regionQueryDefinition queryDef) {
            startField("region");

            RegionArguments args = new RegionArguments(_queryBuilder);
            argsDef.define(args);
            RegionArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new regionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class RegionAggregateArguments extends Arguments {
            RegionAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public RegionAggregateArguments distinctOn(List<region_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public RegionAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public RegionAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public RegionAggregateArguments orderBy(List<region_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public RegionAggregateArguments where(region_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface RegionAggregateArgumentsDefinition {
            void define(RegionAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "region"
        */
        public query_rootQuery regionAggregate(region_aggregateQueryDefinition queryDef) {
            return regionAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "region"
        */
        public query_rootQuery regionAggregate(RegionAggregateArgumentsDefinition argsDef, region_aggregateQueryDefinition queryDef) {
            startField("region_aggregate");

            RegionAggregateArguments args = new RegionAggregateArguments(_queryBuilder);
            argsDef.define(args);
            RegionAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new region_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "region" using primary key columns
        */
        public query_rootQuery regionByPk(int regionId, regionQueryDefinition queryDef) {
            startField("region_by_pk");

            _queryBuilder.append("(region_id:");
            _queryBuilder.append(regionId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new regionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ShippersArguments extends Arguments {
            ShippersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ShippersArguments distinctOn(List<shippers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ShippersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ShippersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ShippersArguments orderBy(List<shippers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ShippersArguments where(shippers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ShippersArgumentsDefinition {
            void define(ShippersArguments args);
        }

        /**
        * fetch data from the table: "shippers"
        */
        public query_rootQuery shippers(shippersQueryDefinition queryDef) {
            return shippers(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "shippers"
        */
        public query_rootQuery shippers(ShippersArgumentsDefinition argsDef, shippersQueryDefinition queryDef) {
            startField("shippers");

            ShippersArguments args = new ShippersArguments(_queryBuilder);
            argsDef.define(args);
            ShippersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new shippersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ShippersAggregateArguments extends Arguments {
            ShippersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ShippersAggregateArguments distinctOn(List<shippers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ShippersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ShippersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ShippersAggregateArguments orderBy(List<shippers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ShippersAggregateArguments where(shippers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ShippersAggregateArgumentsDefinition {
            void define(ShippersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "shippers"
        */
        public query_rootQuery shippersAggregate(shippers_aggregateQueryDefinition queryDef) {
            return shippersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "shippers"
        */
        public query_rootQuery shippersAggregate(ShippersAggregateArgumentsDefinition argsDef, shippers_aggregateQueryDefinition queryDef) {
            startField("shippers_aggregate");

            ShippersAggregateArguments args = new ShippersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            ShippersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new shippers_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "shippers" using primary key columns
        */
        public query_rootQuery shippersByPk(int shipperId, shippersQueryDefinition queryDef) {
            startField("shippers_by_pk");

            _queryBuilder.append("(shipper_id:");
            _queryBuilder.append(shipperId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new shippersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SuppliersArguments extends Arguments {
            SuppliersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public SuppliersArguments distinctOn(List<suppliers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public SuppliersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public SuppliersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public SuppliersArguments orderBy(List<suppliers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public SuppliersArguments where(suppliers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface SuppliersArgumentsDefinition {
            void define(SuppliersArguments args);
        }

        /**
        * fetch data from the table: "suppliers"
        */
        public query_rootQuery suppliers(suppliersQueryDefinition queryDef) {
            return suppliers(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "suppliers"
        */
        public query_rootQuery suppliers(SuppliersArgumentsDefinition argsDef, suppliersQueryDefinition queryDef) {
            startField("suppliers");

            SuppliersArguments args = new SuppliersArguments(_queryBuilder);
            argsDef.define(args);
            SuppliersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new suppliersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SuppliersAggregateArguments extends Arguments {
            SuppliersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public SuppliersAggregateArguments distinctOn(List<suppliers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public SuppliersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public SuppliersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public SuppliersAggregateArguments orderBy(List<suppliers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public SuppliersAggregateArguments where(suppliers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface SuppliersAggregateArgumentsDefinition {
            void define(SuppliersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "suppliers"
        */
        public query_rootQuery suppliersAggregate(suppliers_aggregateQueryDefinition queryDef) {
            return suppliersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "suppliers"
        */
        public query_rootQuery suppliersAggregate(SuppliersAggregateArgumentsDefinition argsDef, suppliers_aggregateQueryDefinition queryDef) {
            startField("suppliers_aggregate");

            SuppliersAggregateArguments args = new SuppliersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            SuppliersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new suppliers_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "suppliers" using primary key columns
        */
        public query_rootQuery suppliersByPk(int supplierId, suppliersQueryDefinition queryDef) {
            startField("suppliers_by_pk");

            _queryBuilder.append("(supplier_id:");
            _queryBuilder.append(supplierId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new suppliersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class TerritoriesArguments extends Arguments {
            TerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public TerritoriesArguments distinctOn(List<territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public TerritoriesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public TerritoriesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public TerritoriesArguments orderBy(List<territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public TerritoriesArguments where(territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface TerritoriesArgumentsDefinition {
            void define(TerritoriesArguments args);
        }

        /**
        * fetch data from the table: "territories"
        */
        public query_rootQuery territories(territoriesQueryDefinition queryDef) {
            return territories(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "territories"
        */
        public query_rootQuery territories(TerritoriesArgumentsDefinition argsDef, territoriesQueryDefinition queryDef) {
            startField("territories");

            TerritoriesArguments args = new TerritoriesArguments(_queryBuilder);
            argsDef.define(args);
            TerritoriesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class TerritoriesAggregateArguments extends Arguments {
            TerritoriesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public TerritoriesAggregateArguments distinctOn(List<territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public TerritoriesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public TerritoriesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public TerritoriesAggregateArguments orderBy(List<territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public TerritoriesAggregateArguments where(territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface TerritoriesAggregateArgumentsDefinition {
            void define(TerritoriesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "territories"
        */
        public query_rootQuery territoriesAggregate(territories_aggregateQueryDefinition queryDef) {
            return territoriesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "territories"
        */
        public query_rootQuery territoriesAggregate(TerritoriesAggregateArgumentsDefinition argsDef, territories_aggregateQueryDefinition queryDef) {
            startField("territories_aggregate");

            TerritoriesAggregateArguments args = new TerritoriesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            TerritoriesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new territories_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "territories" using primary key columns
        */
        public query_rootQuery territoriesByPk(String territoryId, territoriesQueryDefinition queryDef) {
            startField("territories_by_pk");

            _queryBuilder.append("(territory_id:");
            Query.appendQuotedString(_queryBuilder, territoryId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UsStatesArguments extends Arguments {
            UsStatesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public UsStatesArguments distinctOn(List<us_states_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public UsStatesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public UsStatesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public UsStatesArguments orderBy(List<us_states_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public UsStatesArguments where(us_states_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UsStatesArgumentsDefinition {
            void define(UsStatesArguments args);
        }

        /**
        * fetch data from the table: "us_states"
        */
        public query_rootQuery usStates(us_statesQueryDefinition queryDef) {
            return usStates(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "us_states"
        */
        public query_rootQuery usStates(UsStatesArgumentsDefinition argsDef, us_statesQueryDefinition queryDef) {
            startField("us_states");

            UsStatesArguments args = new UsStatesArguments(_queryBuilder);
            argsDef.define(args);
            UsStatesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new us_statesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UsStatesAggregateArguments extends Arguments {
            UsStatesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public UsStatesAggregateArguments distinctOn(List<us_states_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public UsStatesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public UsStatesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public UsStatesAggregateArguments orderBy(List<us_states_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public UsStatesAggregateArguments where(us_states_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UsStatesAggregateArgumentsDefinition {
            void define(UsStatesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "us_states"
        */
        public query_rootQuery usStatesAggregate(us_states_aggregateQueryDefinition queryDef) {
            return usStatesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "us_states"
        */
        public query_rootQuery usStatesAggregate(UsStatesAggregateArgumentsDefinition argsDef, us_states_aggregateQueryDefinition queryDef) {
            startField("us_states_aggregate");

            UsStatesAggregateArguments args = new UsStatesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            UsStatesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new us_states_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "us_states" using primary key columns
        */
        public query_rootQuery usStatesByPk(int stateId, us_statesQueryDefinition queryDef) {
            startField("us_states_by_pk");

            _queryBuilder.append("(state_id:");
            _queryBuilder.append(stateId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new us_statesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public String toString() {
            return _queryBuilder.toString();
        }
    }

    /**
    * query root
    */
    public static class query_root extends AbstractResponse<query_root> {
        public query_root() {
        }

        public query_root(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "categories": {
                        List<categories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new categories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "categories_aggregate": {
                        responseData.put(key, new categories_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "categories_by_pk": {
                        categories optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customer_customer_demo": {
                        List<customer_customer_demo> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_customer_demo(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "customer_customer_demo_aggregate": {
                        responseData.put(key, new customer_customer_demo_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customer_customer_demo_by_pk": {
                        customer_customer_demo optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_customer_demo(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customer_demographics": {
                        List<customer_demographics> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_demographics(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "customer_demographics_aggregate": {
                        responseData.put(key, new customer_demographics_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customer_demographics_by_pk": {
                        customer_demographics optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customers": {
                        List<customers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "customers_aggregate": {
                        responseData.put(key, new customers_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customers_by_pk": {
                        customers optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employee_territories": {
                        List<employee_territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employee_territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "employee_territories_aggregate": {
                        responseData.put(key, new employee_territories_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "employee_territories_by_pk": {
                        employee_territories optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employees": {
                        List<employees> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employees(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "employees_aggregate": {
                        responseData.put(key, new employees_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "employees_by_pk": {
                        employees optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_details": {
                        List<order_details> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new order_details(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "order_details_aggregate": {
                        responseData.put(key, new order_details_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "order_details_by_pk": {
                        order_details optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "orders": {
                        List<orders> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new orders(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "orders_aggregate": {
                        responseData.put(key, new orders_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "orders_by_pk": {
                        orders optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "products": {
                        List<products> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new products(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "products_aggregate": {
                        responseData.put(key, new products_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "products_by_pk": {
                        products optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        List<region> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new region(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "region_aggregate": {
                        responseData.put(key, new region_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "region_by_pk": {
                        region optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shippers": {
                        List<shippers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new shippers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "shippers_aggregate": {
                        responseData.put(key, new shippers_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "shippers_by_pk": {
                        shippers optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "suppliers": {
                        List<suppliers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new suppliers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "suppliers_aggregate": {
                        responseData.put(key, new suppliers_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "suppliers_by_pk": {
                        suppliers optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "territories": {
                        List<territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "territories_aggregate": {
                        responseData.put(key, new territories_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "territories_by_pk": {
                        territories optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "us_states": {
                        List<us_states> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new us_states(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "us_states_aggregate": {
                        responseData.put(key, new us_states_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "us_states_by_pk": {
                        us_states optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "query_root";
        }

        /**
        * fetch data from the table: "categories"
        */

        public List<categories> getCategories() {
            return (List<categories>) get("categories");
        }

        public query_root setCategories(List<categories> arg) {
            optimisticData.put(getKey("categories"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "categories"
        */

        public categories_aggregate getCategoriesAggregate() {
            return (categories_aggregate) get("categories_aggregate");
        }

        public query_root setCategoriesAggregate(categories_aggregate arg) {
            optimisticData.put(getKey("categories_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "categories" using primary key columns
        */

        public categories getCategoriesByPk() {
            return (categories) get("categories_by_pk");
        }

        public query_root setCategoriesByPk(categories arg) {
            optimisticData.put(getKey("categories_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_customer_demo"
        */

        public List<customer_customer_demo> getCustomerCustomerDemo() {
            return (List<customer_customer_demo>) get("customer_customer_demo");
        }

        public query_root setCustomerCustomerDemo(List<customer_customer_demo> arg) {
            optimisticData.put(getKey("customer_customer_demo"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "customer_customer_demo"
        */

        public customer_customer_demo_aggregate getCustomerCustomerDemoAggregate() {
            return (customer_customer_demo_aggregate) get("customer_customer_demo_aggregate");
        }

        public query_root setCustomerCustomerDemoAggregate(customer_customer_demo_aggregate arg) {
            optimisticData.put(getKey("customer_customer_demo_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_customer_demo" using primary key columns
        */

        public customer_customer_demo getCustomerCustomerDemoByPk() {
            return (customer_customer_demo) get("customer_customer_demo_by_pk");
        }

        public query_root setCustomerCustomerDemoByPk(customer_customer_demo arg) {
            optimisticData.put(getKey("customer_customer_demo_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_demographics"
        */

        public List<customer_demographics> getCustomerDemographics() {
            return (List<customer_demographics>) get("customer_demographics");
        }

        public query_root setCustomerDemographics(List<customer_demographics> arg) {
            optimisticData.put(getKey("customer_demographics"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "customer_demographics"
        */

        public customer_demographics_aggregate getCustomerDemographicsAggregate() {
            return (customer_demographics_aggregate) get("customer_demographics_aggregate");
        }

        public query_root setCustomerDemographicsAggregate(customer_demographics_aggregate arg) {
            optimisticData.put(getKey("customer_demographics_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_demographics" using primary key columns
        */

        public customer_demographics getCustomerDemographicsByPk() {
            return (customer_demographics) get("customer_demographics_by_pk");
        }

        public query_root setCustomerDemographicsByPk(customer_demographics arg) {
            optimisticData.put(getKey("customer_demographics_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customers"
        */

        public List<customers> getCustomers() {
            return (List<customers>) get("customers");
        }

        public query_root setCustomers(List<customers> arg) {
            optimisticData.put(getKey("customers"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "customers"
        */

        public customers_aggregate getCustomersAggregate() {
            return (customers_aggregate) get("customers_aggregate");
        }

        public query_root setCustomersAggregate(customers_aggregate arg) {
            optimisticData.put(getKey("customers_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customers" using primary key columns
        */

        public customers getCustomersByPk() {
            return (customers) get("customers_by_pk");
        }

        public query_root setCustomersByPk(customers arg) {
            optimisticData.put(getKey("customers_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employee_territories"
        */

        public List<employee_territories> getEmployeeTerritories() {
            return (List<employee_territories>) get("employee_territories");
        }

        public query_root setEmployeeTerritories(List<employee_territories> arg) {
            optimisticData.put(getKey("employee_territories"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "employee_territories"
        */

        public employee_territories_aggregate getEmployeeTerritoriesAggregate() {
            return (employee_territories_aggregate) get("employee_territories_aggregate");
        }

        public query_root setEmployeeTerritoriesAggregate(employee_territories_aggregate arg) {
            optimisticData.put(getKey("employee_territories_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employee_territories" using primary key columns
        */

        public employee_territories getEmployeeTerritoriesByPk() {
            return (employee_territories) get("employee_territories_by_pk");
        }

        public query_root setEmployeeTerritoriesByPk(employee_territories arg) {
            optimisticData.put(getKey("employee_territories_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employees"
        */

        public List<employees> getEmployees() {
            return (List<employees>) get("employees");
        }

        public query_root setEmployees(List<employees> arg) {
            optimisticData.put(getKey("employees"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "employees"
        */

        public employees_aggregate getEmployeesAggregate() {
            return (employees_aggregate) get("employees_aggregate");
        }

        public query_root setEmployeesAggregate(employees_aggregate arg) {
            optimisticData.put(getKey("employees_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employees" using primary key columns
        */

        public employees getEmployeesByPk() {
            return (employees) get("employees_by_pk");
        }

        public query_root setEmployeesByPk(employees arg) {
            optimisticData.put(getKey("employees_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "order_details"
        */

        public List<order_details> getOrderDetails() {
            return (List<order_details>) get("order_details");
        }

        public query_root setOrderDetails(List<order_details> arg) {
            optimisticData.put(getKey("order_details"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "order_details"
        */

        public order_details_aggregate getOrderDetailsAggregate() {
            return (order_details_aggregate) get("order_details_aggregate");
        }

        public query_root setOrderDetailsAggregate(order_details_aggregate arg) {
            optimisticData.put(getKey("order_details_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "order_details" using primary key columns
        */

        public order_details getOrderDetailsByPk() {
            return (order_details) get("order_details_by_pk");
        }

        public query_root setOrderDetailsByPk(order_details arg) {
            optimisticData.put(getKey("order_details_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "orders"
        */

        public List<orders> getOrders() {
            return (List<orders>) get("orders");
        }

        public query_root setOrders(List<orders> arg) {
            optimisticData.put(getKey("orders"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "orders"
        */

        public orders_aggregate getOrdersAggregate() {
            return (orders_aggregate) get("orders_aggregate");
        }

        public query_root setOrdersAggregate(orders_aggregate arg) {
            optimisticData.put(getKey("orders_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "orders" using primary key columns
        */

        public orders getOrdersByPk() {
            return (orders) get("orders_by_pk");
        }

        public query_root setOrdersByPk(orders arg) {
            optimisticData.put(getKey("orders_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "products"
        */

        public List<products> getProducts() {
            return (List<products>) get("products");
        }

        public query_root setProducts(List<products> arg) {
            optimisticData.put(getKey("products"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "products"
        */

        public products_aggregate getProductsAggregate() {
            return (products_aggregate) get("products_aggregate");
        }

        public query_root setProductsAggregate(products_aggregate arg) {
            optimisticData.put(getKey("products_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "products" using primary key columns
        */

        public products getProductsByPk() {
            return (products) get("products_by_pk");
        }

        public query_root setProductsByPk(products arg) {
            optimisticData.put(getKey("products_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "region"
        */

        public List<region> getRegion() {
            return (List<region>) get("region");
        }

        public query_root setRegion(List<region> arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "region"
        */

        public region_aggregate getRegionAggregate() {
            return (region_aggregate) get("region_aggregate");
        }

        public query_root setRegionAggregate(region_aggregate arg) {
            optimisticData.put(getKey("region_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "region" using primary key columns
        */

        public region getRegionByPk() {
            return (region) get("region_by_pk");
        }

        public query_root setRegionByPk(region arg) {
            optimisticData.put(getKey("region_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "shippers"
        */

        public List<shippers> getShippers() {
            return (List<shippers>) get("shippers");
        }

        public query_root setShippers(List<shippers> arg) {
            optimisticData.put(getKey("shippers"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "shippers"
        */

        public shippers_aggregate getShippersAggregate() {
            return (shippers_aggregate) get("shippers_aggregate");
        }

        public query_root setShippersAggregate(shippers_aggregate arg) {
            optimisticData.put(getKey("shippers_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "shippers" using primary key columns
        */

        public shippers getShippersByPk() {
            return (shippers) get("shippers_by_pk");
        }

        public query_root setShippersByPk(shippers arg) {
            optimisticData.put(getKey("shippers_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "suppliers"
        */

        public List<suppliers> getSuppliers() {
            return (List<suppliers>) get("suppliers");
        }

        public query_root setSuppliers(List<suppliers> arg) {
            optimisticData.put(getKey("suppliers"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "suppliers"
        */

        public suppliers_aggregate getSuppliersAggregate() {
            return (suppliers_aggregate) get("suppliers_aggregate");
        }

        public query_root setSuppliersAggregate(suppliers_aggregate arg) {
            optimisticData.put(getKey("suppliers_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "suppliers" using primary key columns
        */

        public suppliers getSuppliersByPk() {
            return (suppliers) get("suppliers_by_pk");
        }

        public query_root setSuppliersByPk(suppliers arg) {
            optimisticData.put(getKey("suppliers_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "territories"
        */

        public List<territories> getTerritories() {
            return (List<territories>) get("territories");
        }

        public query_root setTerritories(List<territories> arg) {
            optimisticData.put(getKey("territories"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "territories"
        */

        public territories_aggregate getTerritoriesAggregate() {
            return (territories_aggregate) get("territories_aggregate");
        }

        public query_root setTerritoriesAggregate(territories_aggregate arg) {
            optimisticData.put(getKey("territories_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "territories" using primary key columns
        */

        public territories getTerritoriesByPk() {
            return (territories) get("territories_by_pk");
        }

        public query_root setTerritoriesByPk(territories arg) {
            optimisticData.put(getKey("territories_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "us_states"
        */

        public List<us_states> getUsStates() {
            return (List<us_states>) get("us_states");
        }

        public query_root setUsStates(List<us_states> arg) {
            optimisticData.put(getKey("us_states"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "us_states"
        */

        public us_states_aggregate getUsStatesAggregate() {
            return (us_states_aggregate) get("us_states_aggregate");
        }

        public query_root setUsStatesAggregate(us_states_aggregate arg) {
            optimisticData.put(getKey("us_states_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "us_states" using primary key columns
        */

        public us_states getUsStatesByPk() {
            return (us_states) get("us_states_by_pk");
        }

        public query_root setUsStatesByPk(us_states arg) {
            optimisticData.put(getKey("us_states_by_pk"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "categories": return true;

                case "categories_aggregate": return true;

                case "categories_by_pk": return true;

                case "customer_customer_demo": return true;

                case "customer_customer_demo_aggregate": return true;

                case "customer_customer_demo_by_pk": return true;

                case "customer_demographics": return true;

                case "customer_demographics_aggregate": return true;

                case "customer_demographics_by_pk": return true;

                case "customers": return true;

                case "customers_aggregate": return true;

                case "customers_by_pk": return true;

                case "employee_territories": return true;

                case "employee_territories_aggregate": return true;

                case "employee_territories_by_pk": return true;

                case "employees": return true;

                case "employees_aggregate": return true;

                case "employees_by_pk": return true;

                case "order_details": return true;

                case "order_details_aggregate": return true;

                case "order_details_by_pk": return true;

                case "orders": return true;

                case "orders_aggregate": return true;

                case "orders_by_pk": return true;

                case "products": return true;

                case "products_aggregate": return true;

                case "products_by_pk": return true;

                case "region": return true;

                case "region_aggregate": return true;

                case "region_by_pk": return true;

                case "shippers": return true;

                case "shippers_aggregate": return true;

                case "shippers_by_pk": return true;

                case "suppliers": return true;

                case "suppliers_aggregate": return true;

                case "suppliers_by_pk": return true;

                case "territories": return true;

                case "territories_aggregate": return true;

                case "territories_by_pk": return true;

                case "us_states": return true;

                case "us_states_aggregate": return true;

                case "us_states_by_pk": return true;

                default: return false;
            }
        }
    }

    public static class real_comparison_exp implements Serializable {
        private Double Eq;

        private Double Gt;

        private Double Gte;

        private List<Double> In;

        private Boolean IsNull;

        private Double Lt;

        private Double Lte;

        private Double Neq;

        private List<Double> Nin;

        public Double getEq() {
            return Eq;
        }

        public real_comparison_exp setEq(Double Eq) {
            this.Eq = Eq;
            return this;
        }

        public Double getGt() {
            return Gt;
        }

        public real_comparison_exp setGt(Double Gt) {
            this.Gt = Gt;
            return this;
        }

        public Double getGte() {
            return Gte;
        }

        public real_comparison_exp setGte(Double Gte) {
            this.Gte = Gte;
            return this;
        }

        public List<Double> getIn() {
            return In;
        }

        public real_comparison_exp setIn(List<Double> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public real_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public Double getLt() {
            return Lt;
        }

        public real_comparison_exp setLt(Double Lt) {
            this.Lt = Lt;
            return this;
        }

        public Double getLte() {
            return Lte;
        }

        public real_comparison_exp setLte(Double Lte) {
            this.Lte = Lte;
            return this;
        }

        public Double getNeq() {
            return Neq;
        }

        public real_comparison_exp setNeq(Double Neq) {
            this.Neq = Neq;
            return this;
        }

        public List<Double> getNin() {
            return Nin;
        }

        public real_comparison_exp setNin(List<Double> Nin) {
            this.Nin = Nin;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                _queryBuilder.append(Eq);
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                _queryBuilder.append(Gt);
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                _queryBuilder.append(Gte);
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (Double item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    _queryBuilder.append(item1);
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                _queryBuilder.append(Lt);
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                _queryBuilder.append(Lte);
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                _queryBuilder.append(Neq);
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (Double item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    _queryBuilder.append(item1);
                }
                _queryBuilder.append(']');
            }

            _queryBuilder.append('}');
        }
    }

    public interface regionQueryDefinition {
        void define(regionQuery _queryBuilder);
    }

    /**
    * columns and relationships of "region"
    */
    public static class regionQuery extends Query<regionQuery> {
        regionQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public regionQuery regionDescription() {
            startField("region_description");

            return this;
        }

        public regionQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * columns and relationships of "region"
    */
    public static class region extends AbstractResponse<region> {
        public region() {
        }

        public region(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_description": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "region_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region";
        }

        public String getRegionDescription() {
            return (String) get("region_description");
        }

        public region setRegionDescription(String arg) {
            optimisticData.put(getKey("region_description"), arg);
            return this;
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public region setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_description": return false;

                case "region_id": return false;

                default: return false;
            }
        }
    }

    public interface region_aggregateQueryDefinition {
        void define(region_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "region"
    */
    public static class region_aggregateQuery extends Query<region_aggregateQuery> {
        region_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_aggregateQuery aggregate(region_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new region_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregateQuery nodes(regionQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new regionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "region"
    */
    public static class region_aggregate extends AbstractResponse<region_aggregate> {
        public region_aggregate() {
        }

        public region_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        region_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<region> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new region(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_aggregate";
        }

        public region_aggregate_fields getAggregate() {
            return (region_aggregate_fields) get("aggregate");
        }

        public region_aggregate setAggregate(region_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<region> getNodes() {
            return (List<region>) get("nodes");
        }

        public region_aggregate setNodes(List<region> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface region_aggregate_fieldsQueryDefinition {
        void define(region_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "region"
    */
    public static class region_aggregate_fieldsQuery extends Query<region_aggregate_fieldsQuery> {
        region_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_aggregate_fieldsQuery avg(region_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new region_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<region_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public region_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public region_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public region_aggregate_fieldsQuery max(region_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new region_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery min(region_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new region_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery stddev(region_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new region_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery stddevPop(region_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new region_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery stddevSamp(region_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new region_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery sum(region_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new region_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery varPop(region_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new region_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery varSamp(region_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new region_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public region_aggregate_fieldsQuery variance(region_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new region_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "region"
    */
    public static class region_aggregate_fields extends AbstractResponse<region_aggregate_fields> {
        public region_aggregate_fields() {
        }

        public region_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        region_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        region_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        region_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        region_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        region_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        region_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        region_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        region_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        region_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        region_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_aggregate_fields";
        }

        public region_avg_fields getAvg() {
            return (region_avg_fields) get("avg");
        }

        public region_aggregate_fields setAvg(region_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public region_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public region_max_fields getMax() {
            return (region_max_fields) get("max");
        }

        public region_aggregate_fields setMax(region_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public region_min_fields getMin() {
            return (region_min_fields) get("min");
        }

        public region_aggregate_fields setMin(region_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public region_stddev_fields getStddev() {
            return (region_stddev_fields) get("stddev");
        }

        public region_aggregate_fields setStddev(region_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public region_stddev_pop_fields getStddevPop() {
            return (region_stddev_pop_fields) get("stddev_pop");
        }

        public region_aggregate_fields setStddevPop(region_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public region_stddev_samp_fields getStddevSamp() {
            return (region_stddev_samp_fields) get("stddev_samp");
        }

        public region_aggregate_fields setStddevSamp(region_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public region_sum_fields getSum() {
            return (region_sum_fields) get("sum");
        }

        public region_aggregate_fields setSum(region_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public region_var_pop_fields getVarPop() {
            return (region_var_pop_fields) get("var_pop");
        }

        public region_aggregate_fields setVarPop(region_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public region_var_samp_fields getVarSamp() {
            return (region_var_samp_fields) get("var_samp");
        }

        public region_aggregate_fields setVarSamp(region_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public region_variance_fields getVariance() {
            return (region_variance_fields) get("variance");
        }

        public region_aggregate_fields setVariance(region_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class region_aggregate_order_by implements Serializable {
        private region_avg_order_by avg;

        private order_by count;

        private region_max_order_by max;

        private region_min_order_by min;

        private region_stddev_order_by stddev;

        private region_stddev_pop_order_by stddevPop;

        private region_stddev_samp_order_by stddevSamp;

        private region_sum_order_by sum;

        private region_var_pop_order_by varPop;

        private region_var_samp_order_by varSamp;

        private region_variance_order_by variance;

        public region_avg_order_by getAvg() {
            return avg;
        }

        public region_aggregate_order_by setAvg(region_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public region_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public region_max_order_by getMax() {
            return max;
        }

        public region_aggregate_order_by setMax(region_max_order_by max) {
            this.max = max;
            return this;
        }

        public region_min_order_by getMin() {
            return min;
        }

        public region_aggregate_order_by setMin(region_min_order_by min) {
            this.min = min;
            return this;
        }

        public region_stddev_order_by getStddev() {
            return stddev;
        }

        public region_aggregate_order_by setStddev(region_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public region_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public region_aggregate_order_by setStddevPop(region_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public region_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public region_aggregate_order_by setStddevSamp(region_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public region_sum_order_by getSum() {
            return sum;
        }

        public region_aggregate_order_by setSum(region_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public region_var_pop_order_by getVarPop() {
            return varPop;
        }

        public region_aggregate_order_by setVarPop(region_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public region_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public region_aggregate_order_by setVarSamp(region_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public region_variance_order_by getVariance() {
            return variance;
        }

        public region_aggregate_order_by setVariance(region_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class region_arr_rel_insert_input implements Serializable {
        private List<region_insert_input> data;

        private region_on_conflict onConflict;

        public region_arr_rel_insert_input(List<region_insert_input> data) {
            this.data = data;
        }

        public List<region_insert_input> getData() {
            return data;
        }

        public region_arr_rel_insert_input setData(List<region_insert_input> data) {
            this.data = data;
            return this;
        }

        public region_on_conflict getOnConflict() {
            return onConflict;
        }

        public region_arr_rel_insert_input setOnConflict(region_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (region_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_avg_fieldsQueryDefinition {
        void define(region_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class region_avg_fieldsQuery extends Query<region_avg_fieldsQuery> {
        region_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_avg_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class region_avg_fields extends AbstractResponse<region_avg_fields> {
        public region_avg_fields() {
        }

        public region_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_avg_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public region_avg_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_avg_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_avg_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class region_bool_exp implements Serializable {
        private List<region_bool_exp> And;

        private region_bool_exp Not;

        private List<region_bool_exp> Or;

        private bpchar_comparison_exp regionDescription;

        private Int_comparison_exp regionId;

        public List<region_bool_exp> getAnd() {
            return And;
        }

        public region_bool_exp setAnd(List<region_bool_exp> And) {
            this.And = And;
            return this;
        }

        public region_bool_exp getNot() {
            return Not;
        }

        public region_bool_exp setNot(region_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<region_bool_exp> getOr() {
            return Or;
        }

        public region_bool_exp setOr(List<region_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public bpchar_comparison_exp getRegionDescription() {
            return regionDescription;
        }

        public region_bool_exp setRegionDescription(bpchar_comparison_exp regionDescription) {
            this.regionDescription = regionDescription;
            return this;
        }

        public Int_comparison_exp getRegionId() {
            return regionId;
        }

        public region_bool_exp setRegionId(Int_comparison_exp regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (region_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (region_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (regionDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_description:");
                regionDescription.appendTo(_queryBuilder);
            }

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                regionId.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "region"
    */
    public enum region_constraint {
        PK_REGION,

        UNKNOWN_VALUE;

        public static region_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_region": {
                    return PK_REGION;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_REGION: {
                    return "pk_region";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class region_inc_input implements Serializable {
        private Integer regionId;

        public Integer getRegionId() {
            return regionId;
        }

        public region_inc_input setRegionId(Integer regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId);
            }

            _queryBuilder.append('}');
        }
    }

    public static class region_insert_input implements Serializable {
        private String regionDescription;

        private Integer regionId;

        public String getRegionDescription() {
            return regionDescription;
        }

        public region_insert_input setRegionDescription(String regionDescription) {
            this.regionDescription = regionDescription;
            return this;
        }

        public Integer getRegionId() {
            return regionId;
        }

        public region_insert_input setRegionId(Integer regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_description:");
                Query.appendQuotedString(_queryBuilder, regionDescription.toString());
            }

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId);
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_max_fieldsQueryDefinition {
        void define(region_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class region_max_fieldsQuery extends Query<region_max_fieldsQuery> {
        region_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_max_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class region_max_fields extends AbstractResponse<region_max_fields> {
        public region_max_fields() {
        }

        public region_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_max_fields";
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public region_max_fields setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_max_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_max_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_min_fieldsQueryDefinition {
        void define(region_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class region_min_fieldsQuery extends Query<region_min_fieldsQuery> {
        region_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_min_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class region_min_fields extends AbstractResponse<region_min_fields> {
        public region_min_fields() {
        }

        public region_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_min_fields";
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public region_min_fields setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_min_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_min_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_mutation_responseQueryDefinition {
        void define(region_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "region"
    */
    public static class region_mutation_responseQuery extends Query<region_mutation_responseQuery> {
        region_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public region_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public region_mutation_responseQuery returning(regionQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new regionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "region"
    */
    public static class region_mutation_response extends AbstractResponse<region_mutation_response> {
        public region_mutation_response() {
        }

        public region_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<region> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new region(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public region_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<region> getReturning() {
            return (List<region>) get("returning");
        }

        public region_mutation_response setReturning(List<region> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class region_obj_rel_insert_input implements Serializable {
        private region_insert_input data;

        private region_on_conflict onConflict;

        public region_obj_rel_insert_input(region_insert_input data) {
            this.data = data;
        }

        public region_insert_input getData() {
            return data;
        }

        public region_obj_rel_insert_input setData(region_insert_input data) {
            this.data = data;
            return this;
        }

        public region_on_conflict getOnConflict() {
            return onConflict;
        }

        public region_obj_rel_insert_input setOnConflict(region_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class region_on_conflict implements Serializable {
        private region_constraint constraint;

        private List<region_update_column> updateColumns;

        public region_on_conflict(region_constraint constraint, List<region_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public region_constraint getConstraint() {
            return constraint;
        }

        public region_on_conflict setConstraint(region_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<region_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public region_on_conflict setUpdateColumns(List<region_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (region_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class region_order_by implements Serializable {
        private order_by regionDescription;

        private order_by regionId;

        public order_by getRegionDescription() {
            return regionDescription;
        }

        public region_order_by setRegionDescription(order_by regionDescription) {
            this.regionDescription = regionDescription;
            return this;
        }

        public order_by getRegionId() {
            return regionId;
        }

        public region_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_description:");
                _queryBuilder.append(regionDescription.toString());
            }

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "region"
    */
    public enum region_select_column {
        REGION_DESCRIPTION,

        REGION_ID,

        UNKNOWN_VALUE;

        public static region_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "region_description": {
                    return REGION_DESCRIPTION;
                }

                case "region_id": {
                    return REGION_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case REGION_DESCRIPTION: {
                    return "region_description";
                }

                case REGION_ID: {
                    return "region_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class region_set_input implements Serializable {
        private String regionDescription;

        private Integer regionId;

        public String getRegionDescription() {
            return regionDescription;
        }

        public region_set_input setRegionDescription(String regionDescription) {
            this.regionDescription = regionDescription;
            return this;
        }

        public Integer getRegionId() {
            return regionId;
        }

        public region_set_input setRegionId(Integer regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_description:");
                Query.appendQuotedString(_queryBuilder, regionDescription.toString());
            }

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId);
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_stddev_fieldsQueryDefinition {
        void define(region_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class region_stddev_fieldsQuery extends Query<region_stddev_fieldsQuery> {
        region_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_stddev_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class region_stddev_fields extends AbstractResponse<region_stddev_fields> {
        public region_stddev_fields() {
        }

        public region_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_stddev_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public region_stddev_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_stddev_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_stddev_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_stddev_pop_fieldsQueryDefinition {
        void define(region_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class region_stddev_pop_fieldsQuery extends Query<region_stddev_pop_fieldsQuery> {
        region_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_stddev_pop_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class region_stddev_pop_fields extends AbstractResponse<region_stddev_pop_fields> {
        public region_stddev_pop_fields() {
        }

        public region_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_stddev_pop_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public region_stddev_pop_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_stddev_pop_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_stddev_pop_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_stddev_samp_fieldsQueryDefinition {
        void define(region_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class region_stddev_samp_fieldsQuery extends Query<region_stddev_samp_fieldsQuery> {
        region_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_stddev_samp_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class region_stddev_samp_fields extends AbstractResponse<region_stddev_samp_fields> {
        public region_stddev_samp_fields() {
        }

        public region_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_stddev_samp_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public region_stddev_samp_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_stddev_samp_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_stddev_samp_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_sum_fieldsQueryDefinition {
        void define(region_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class region_sum_fieldsQuery extends Query<region_sum_fieldsQuery> {
        region_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_sum_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class region_sum_fields extends AbstractResponse<region_sum_fields> {
        public region_sum_fields() {
        }

        public region_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_sum_fields";
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public region_sum_fields setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_sum_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_sum_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "region"
    */
    public enum region_update_column {
        REGION_DESCRIPTION,

        REGION_ID,

        UNKNOWN_VALUE;

        public static region_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "region_description": {
                    return REGION_DESCRIPTION;
                }

                case "region_id": {
                    return REGION_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case REGION_DESCRIPTION: {
                    return "region_description";
                }

                case REGION_ID: {
                    return "region_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface region_var_pop_fieldsQueryDefinition {
        void define(region_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class region_var_pop_fieldsQuery extends Query<region_var_pop_fieldsQuery> {
        region_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_var_pop_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class region_var_pop_fields extends AbstractResponse<region_var_pop_fields> {
        public region_var_pop_fields() {
        }

        public region_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_var_pop_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public region_var_pop_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_var_pop_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_var_pop_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_var_samp_fieldsQueryDefinition {
        void define(region_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class region_var_samp_fieldsQuery extends Query<region_var_samp_fieldsQuery> {
        region_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_var_samp_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class region_var_samp_fields extends AbstractResponse<region_var_samp_fields> {
        public region_var_samp_fields() {
        }

        public region_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_var_samp_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public region_var_samp_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_var_samp_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_var_samp_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface region_variance_fieldsQueryDefinition {
        void define(region_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class region_variance_fieldsQuery extends Query<region_variance_fieldsQuery> {
        region_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public region_variance_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class region_variance_fields extends AbstractResponse<region_variance_fields> {
        public region_variance_fields() {
        }

        public region_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "region_variance_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public region_variance_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class region_variance_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public region_variance_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippersQueryDefinition {
        void define(shippersQuery _queryBuilder);
    }

    /**
    * columns and relationships of "shippers"
    */
    public static class shippersQuery extends Query<shippersQuery> {
        shippersQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippersQuery companyName() {
            startField("company_name");

            return this;
        }

        public shippersQuery phone() {
            startField("phone");

            return this;
        }

        public shippersQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * columns and relationships of "shippers"
    */
    public static class shippers extends AbstractResponse<shippers> {
        public shippers() {
        }

        public shippers(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "company_name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shipper_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers";
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public shippers setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public shippers setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public Integer getShipperId() {
            return (Integer) get("shipper_id");
        }

        public shippers setShipperId(Integer arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "company_name": return false;

                case "phone": return false;

                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public interface shippers_aggregateQueryDefinition {
        void define(shippers_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "shippers"
    */
    public static class shippers_aggregateQuery extends Query<shippers_aggregateQuery> {
        shippers_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_aggregateQuery aggregate(shippers_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new shippers_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregateQuery nodes(shippersQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new shippersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "shippers"
    */
    public static class shippers_aggregate extends AbstractResponse<shippers_aggregate> {
        public shippers_aggregate() {
        }

        public shippers_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        shippers_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<shippers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new shippers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_aggregate";
        }

        public shippers_aggregate_fields getAggregate() {
            return (shippers_aggregate_fields) get("aggregate");
        }

        public shippers_aggregate setAggregate(shippers_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<shippers> getNodes() {
            return (List<shippers>) get("nodes");
        }

        public shippers_aggregate setNodes(List<shippers> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface shippers_aggregate_fieldsQueryDefinition {
        void define(shippers_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "shippers"
    */
    public static class shippers_aggregate_fieldsQuery extends Query<shippers_aggregate_fieldsQuery> {
        shippers_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_aggregate_fieldsQuery avg(shippers_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new shippers_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<shippers_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public shippers_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public shippers_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public shippers_aggregate_fieldsQuery max(shippers_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new shippers_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery min(shippers_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new shippers_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery stddev(shippers_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new shippers_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery stddevPop(shippers_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new shippers_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery stddevSamp(shippers_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new shippers_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery sum(shippers_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new shippers_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery varPop(shippers_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new shippers_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery varSamp(shippers_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new shippers_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public shippers_aggregate_fieldsQuery variance(shippers_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new shippers_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "shippers"
    */
    public static class shippers_aggregate_fields extends AbstractResponse<shippers_aggregate_fields> {
        public shippers_aggregate_fields() {
        }

        public shippers_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        shippers_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        shippers_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        shippers_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        shippers_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        shippers_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        shippers_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        shippers_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        shippers_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        shippers_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        shippers_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_aggregate_fields";
        }

        public shippers_avg_fields getAvg() {
            return (shippers_avg_fields) get("avg");
        }

        public shippers_aggregate_fields setAvg(shippers_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public shippers_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public shippers_max_fields getMax() {
            return (shippers_max_fields) get("max");
        }

        public shippers_aggregate_fields setMax(shippers_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public shippers_min_fields getMin() {
            return (shippers_min_fields) get("min");
        }

        public shippers_aggregate_fields setMin(shippers_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public shippers_stddev_fields getStddev() {
            return (shippers_stddev_fields) get("stddev");
        }

        public shippers_aggregate_fields setStddev(shippers_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public shippers_stddev_pop_fields getStddevPop() {
            return (shippers_stddev_pop_fields) get("stddev_pop");
        }

        public shippers_aggregate_fields setStddevPop(shippers_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public shippers_stddev_samp_fields getStddevSamp() {
            return (shippers_stddev_samp_fields) get("stddev_samp");
        }

        public shippers_aggregate_fields setStddevSamp(shippers_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public shippers_sum_fields getSum() {
            return (shippers_sum_fields) get("sum");
        }

        public shippers_aggregate_fields setSum(shippers_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public shippers_var_pop_fields getVarPop() {
            return (shippers_var_pop_fields) get("var_pop");
        }

        public shippers_aggregate_fields setVarPop(shippers_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public shippers_var_samp_fields getVarSamp() {
            return (shippers_var_samp_fields) get("var_samp");
        }

        public shippers_aggregate_fields setVarSamp(shippers_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public shippers_variance_fields getVariance() {
            return (shippers_variance_fields) get("variance");
        }

        public shippers_aggregate_fields setVariance(shippers_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class shippers_aggregate_order_by implements Serializable {
        private shippers_avg_order_by avg;

        private order_by count;

        private shippers_max_order_by max;

        private shippers_min_order_by min;

        private shippers_stddev_order_by stddev;

        private shippers_stddev_pop_order_by stddevPop;

        private shippers_stddev_samp_order_by stddevSamp;

        private shippers_sum_order_by sum;

        private shippers_var_pop_order_by varPop;

        private shippers_var_samp_order_by varSamp;

        private shippers_variance_order_by variance;

        public shippers_avg_order_by getAvg() {
            return avg;
        }

        public shippers_aggregate_order_by setAvg(shippers_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public shippers_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public shippers_max_order_by getMax() {
            return max;
        }

        public shippers_aggregate_order_by setMax(shippers_max_order_by max) {
            this.max = max;
            return this;
        }

        public shippers_min_order_by getMin() {
            return min;
        }

        public shippers_aggregate_order_by setMin(shippers_min_order_by min) {
            this.min = min;
            return this;
        }

        public shippers_stddev_order_by getStddev() {
            return stddev;
        }

        public shippers_aggregate_order_by setStddev(shippers_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public shippers_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public shippers_aggregate_order_by setStddevPop(shippers_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public shippers_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public shippers_aggregate_order_by setStddevSamp(shippers_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public shippers_sum_order_by getSum() {
            return sum;
        }

        public shippers_aggregate_order_by setSum(shippers_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public shippers_var_pop_order_by getVarPop() {
            return varPop;
        }

        public shippers_aggregate_order_by setVarPop(shippers_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public shippers_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public shippers_aggregate_order_by setVarSamp(shippers_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public shippers_variance_order_by getVariance() {
            return variance;
        }

        public shippers_aggregate_order_by setVariance(shippers_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class shippers_arr_rel_insert_input implements Serializable {
        private List<shippers_insert_input> data;

        private shippers_on_conflict onConflict;

        public shippers_arr_rel_insert_input(List<shippers_insert_input> data) {
            this.data = data;
        }

        public List<shippers_insert_input> getData() {
            return data;
        }

        public shippers_arr_rel_insert_input setData(List<shippers_insert_input> data) {
            this.data = data;
            return this;
        }

        public shippers_on_conflict getOnConflict() {
            return onConflict;
        }

        public shippers_arr_rel_insert_input setOnConflict(shippers_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (shippers_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_avg_fieldsQueryDefinition {
        void define(shippers_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class shippers_avg_fieldsQuery extends Query<shippers_avg_fieldsQuery> {
        shippers_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_avg_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class shippers_avg_fields extends AbstractResponse<shippers_avg_fields> {
        public shippers_avg_fields() {
        }

        public shippers_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_avg_fields";
        }

        public Double getShipperId() {
            return (Double) get("shipper_id");
        }

        public shippers_avg_fields setShipperId(Double arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_avg_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_avg_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class shippers_bool_exp implements Serializable {
        private List<shippers_bool_exp> And;

        private shippers_bool_exp Not;

        private List<shippers_bool_exp> Or;

        private varchar_comparison_exp companyName;

        private varchar_comparison_exp phone;

        private Int_comparison_exp shipperId;

        public List<shippers_bool_exp> getAnd() {
            return And;
        }

        public shippers_bool_exp setAnd(List<shippers_bool_exp> And) {
            this.And = And;
            return this;
        }

        public shippers_bool_exp getNot() {
            return Not;
        }

        public shippers_bool_exp setNot(shippers_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<shippers_bool_exp> getOr() {
            return Or;
        }

        public shippers_bool_exp setOr(List<shippers_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public varchar_comparison_exp getCompanyName() {
            return companyName;
        }

        public shippers_bool_exp setCompanyName(varchar_comparison_exp companyName) {
            this.companyName = companyName;
            return this;
        }

        public varchar_comparison_exp getPhone() {
            return phone;
        }

        public shippers_bool_exp setPhone(varchar_comparison_exp phone) {
            this.phone = phone;
            return this;
        }

        public Int_comparison_exp getShipperId() {
            return shipperId;
        }

        public shippers_bool_exp setShipperId(Int_comparison_exp shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (shippers_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (shippers_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                companyName.appendTo(_queryBuilder);
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                phone.appendTo(_queryBuilder);
            }

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                shipperId.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "shippers"
    */
    public enum shippers_constraint {
        PK_SHIPPERS,

        UNKNOWN_VALUE;

        public static shippers_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_shippers": {
                    return PK_SHIPPERS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_SHIPPERS: {
                    return "pk_shippers";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class shippers_inc_input implements Serializable {
        private Integer shipperId;

        public Integer getShipperId() {
            return shipperId;
        }

        public shippers_inc_input setShipperId(Integer shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId);
            }

            _queryBuilder.append('}');
        }
    }

    public static class shippers_insert_input implements Serializable {
        private String companyName;

        private String phone;

        private Integer shipperId;

        public String getCompanyName() {
            return companyName;
        }

        public shippers_insert_input setCompanyName(String companyName) {
            this.companyName = companyName;
            return this;
        }

        public String getPhone() {
            return phone;
        }

        public shippers_insert_input setPhone(String phone) {
            this.phone = phone;
            return this;
        }

        public Integer getShipperId() {
            return shipperId;
        }

        public shippers_insert_input setShipperId(Integer shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                Query.appendQuotedString(_queryBuilder, companyName.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                Query.appendQuotedString(_queryBuilder, phone.toString());
            }

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId);
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_max_fieldsQueryDefinition {
        void define(shippers_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class shippers_max_fieldsQuery extends Query<shippers_max_fieldsQuery> {
        shippers_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_max_fieldsQuery companyName() {
            startField("company_name");

            return this;
        }

        public shippers_max_fieldsQuery phone() {
            startField("phone");

            return this;
        }

        public shippers_max_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class shippers_max_fields extends AbstractResponse<shippers_max_fields> {
        public shippers_max_fields() {
        }

        public shippers_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "company_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shipper_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_max_fields";
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public shippers_max_fields setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public shippers_max_fields setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public Integer getShipperId() {
            return (Integer) get("shipper_id");
        }

        public shippers_max_fields setShipperId(Integer arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "company_name": return false;

                case "phone": return false;

                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_max_order_by implements Serializable {
        private order_by companyName;

        private order_by phone;

        private order_by shipperId;

        public order_by getCompanyName() {
            return companyName;
        }

        public shippers_max_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public shippers_max_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_max_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_min_fieldsQueryDefinition {
        void define(shippers_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class shippers_min_fieldsQuery extends Query<shippers_min_fieldsQuery> {
        shippers_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_min_fieldsQuery companyName() {
            startField("company_name");

            return this;
        }

        public shippers_min_fieldsQuery phone() {
            startField("phone");

            return this;
        }

        public shippers_min_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class shippers_min_fields extends AbstractResponse<shippers_min_fields> {
        public shippers_min_fields() {
        }

        public shippers_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "company_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shipper_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_min_fields";
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public shippers_min_fields setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public shippers_min_fields setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public Integer getShipperId() {
            return (Integer) get("shipper_id");
        }

        public shippers_min_fields setShipperId(Integer arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "company_name": return false;

                case "phone": return false;

                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_min_order_by implements Serializable {
        private order_by companyName;

        private order_by phone;

        private order_by shipperId;

        public order_by getCompanyName() {
            return companyName;
        }

        public shippers_min_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public shippers_min_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_min_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_mutation_responseQueryDefinition {
        void define(shippers_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "shippers"
    */
    public static class shippers_mutation_responseQuery extends Query<shippers_mutation_responseQuery> {
        shippers_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public shippers_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public shippers_mutation_responseQuery returning(shippersQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new shippersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "shippers"
    */
    public static class shippers_mutation_response extends AbstractResponse<shippers_mutation_response> {
        public shippers_mutation_response() {
        }

        public shippers_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<shippers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new shippers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public shippers_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<shippers> getReturning() {
            return (List<shippers>) get("returning");
        }

        public shippers_mutation_response setReturning(List<shippers> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class shippers_obj_rel_insert_input implements Serializable {
        private shippers_insert_input data;

        private shippers_on_conflict onConflict;

        public shippers_obj_rel_insert_input(shippers_insert_input data) {
            this.data = data;
        }

        public shippers_insert_input getData() {
            return data;
        }

        public shippers_obj_rel_insert_input setData(shippers_insert_input data) {
            this.data = data;
            return this;
        }

        public shippers_on_conflict getOnConflict() {
            return onConflict;
        }

        public shippers_obj_rel_insert_input setOnConflict(shippers_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class shippers_on_conflict implements Serializable {
        private shippers_constraint constraint;

        private List<shippers_update_column> updateColumns;

        public shippers_on_conflict(shippers_constraint constraint, List<shippers_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public shippers_constraint getConstraint() {
            return constraint;
        }

        public shippers_on_conflict setConstraint(shippers_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<shippers_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public shippers_on_conflict setUpdateColumns(List<shippers_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (shippers_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class shippers_order_by implements Serializable {
        private order_by companyName;

        private order_by phone;

        private order_by shipperId;

        public order_by getCompanyName() {
            return companyName;
        }

        public shippers_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public shippers_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "shippers"
    */
    public enum shippers_select_column {
        COMPANY_NAME,

        PHONE,

        SHIPPER_ID,

        UNKNOWN_VALUE;

        public static shippers_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "company_name": {
                    return COMPANY_NAME;
                }

                case "phone": {
                    return PHONE;
                }

                case "shipper_id": {
                    return SHIPPER_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case COMPANY_NAME: {
                    return "company_name";
                }

                case PHONE: {
                    return "phone";
                }

                case SHIPPER_ID: {
                    return "shipper_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class shippers_set_input implements Serializable {
        private String companyName;

        private String phone;

        private Integer shipperId;

        public String getCompanyName() {
            return companyName;
        }

        public shippers_set_input setCompanyName(String companyName) {
            this.companyName = companyName;
            return this;
        }

        public String getPhone() {
            return phone;
        }

        public shippers_set_input setPhone(String phone) {
            this.phone = phone;
            return this;
        }

        public Integer getShipperId() {
            return shipperId;
        }

        public shippers_set_input setShipperId(Integer shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                Query.appendQuotedString(_queryBuilder, companyName.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                Query.appendQuotedString(_queryBuilder, phone.toString());
            }

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId);
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_stddev_fieldsQueryDefinition {
        void define(shippers_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class shippers_stddev_fieldsQuery extends Query<shippers_stddev_fieldsQuery> {
        shippers_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_stddev_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class shippers_stddev_fields extends AbstractResponse<shippers_stddev_fields> {
        public shippers_stddev_fields() {
        }

        public shippers_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_stddev_fields";
        }

        public Double getShipperId() {
            return (Double) get("shipper_id");
        }

        public shippers_stddev_fields setShipperId(Double arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_stddev_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_stddev_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_stddev_pop_fieldsQueryDefinition {
        void define(shippers_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class shippers_stddev_pop_fieldsQuery extends Query<shippers_stddev_pop_fieldsQuery> {
        shippers_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_stddev_pop_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class shippers_stddev_pop_fields extends AbstractResponse<shippers_stddev_pop_fields> {
        public shippers_stddev_pop_fields() {
        }

        public shippers_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_stddev_pop_fields";
        }

        public Double getShipperId() {
            return (Double) get("shipper_id");
        }

        public shippers_stddev_pop_fields setShipperId(Double arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_stddev_pop_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_stddev_pop_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_stddev_samp_fieldsQueryDefinition {
        void define(shippers_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class shippers_stddev_samp_fieldsQuery extends Query<shippers_stddev_samp_fieldsQuery> {
        shippers_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_stddev_samp_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class shippers_stddev_samp_fields extends AbstractResponse<shippers_stddev_samp_fields> {
        public shippers_stddev_samp_fields() {
        }

        public shippers_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_stddev_samp_fields";
        }

        public Double getShipperId() {
            return (Double) get("shipper_id");
        }

        public shippers_stddev_samp_fields setShipperId(Double arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_stddev_samp_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_stddev_samp_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_sum_fieldsQueryDefinition {
        void define(shippers_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class shippers_sum_fieldsQuery extends Query<shippers_sum_fieldsQuery> {
        shippers_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_sum_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class shippers_sum_fields extends AbstractResponse<shippers_sum_fields> {
        public shippers_sum_fields() {
        }

        public shippers_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_sum_fields";
        }

        public Integer getShipperId() {
            return (Integer) get("shipper_id");
        }

        public shippers_sum_fields setShipperId(Integer arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_sum_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_sum_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "shippers"
    */
    public enum shippers_update_column {
        COMPANY_NAME,

        PHONE,

        SHIPPER_ID,

        UNKNOWN_VALUE;

        public static shippers_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "company_name": {
                    return COMPANY_NAME;
                }

                case "phone": {
                    return PHONE;
                }

                case "shipper_id": {
                    return SHIPPER_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case COMPANY_NAME: {
                    return "company_name";
                }

                case PHONE: {
                    return "phone";
                }

                case SHIPPER_ID: {
                    return "shipper_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface shippers_var_pop_fieldsQueryDefinition {
        void define(shippers_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class shippers_var_pop_fieldsQuery extends Query<shippers_var_pop_fieldsQuery> {
        shippers_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_var_pop_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class shippers_var_pop_fields extends AbstractResponse<shippers_var_pop_fields> {
        public shippers_var_pop_fields() {
        }

        public shippers_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_var_pop_fields";
        }

        public Double getShipperId() {
            return (Double) get("shipper_id");
        }

        public shippers_var_pop_fields setShipperId(Double arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_var_pop_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_var_pop_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_var_samp_fieldsQueryDefinition {
        void define(shippers_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class shippers_var_samp_fieldsQuery extends Query<shippers_var_samp_fieldsQuery> {
        shippers_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_var_samp_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class shippers_var_samp_fields extends AbstractResponse<shippers_var_samp_fields> {
        public shippers_var_samp_fields() {
        }

        public shippers_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_var_samp_fields";
        }

        public Double getShipperId() {
            return (Double) get("shipper_id");
        }

        public shippers_var_samp_fields setShipperId(Double arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_var_samp_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_var_samp_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface shippers_variance_fieldsQueryDefinition {
        void define(shippers_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class shippers_variance_fieldsQuery extends Query<shippers_variance_fieldsQuery> {
        shippers_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public shippers_variance_fieldsQuery shipperId() {
            startField("shipper_id");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class shippers_variance_fields extends AbstractResponse<shippers_variance_fields> {
        public shippers_variance_fields() {
        }

        public shippers_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "shipper_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "shippers_variance_fields";
        }

        public Double getShipperId() {
            return (Double) get("shipper_id");
        }

        public shippers_variance_fields setShipperId(Double arg) {
            optimisticData.put(getKey("shipper_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "shipper_id": return false;

                default: return false;
            }
        }
    }

    public static class shippers_variance_order_by implements Serializable {
        private order_by shipperId;

        public order_by getShipperId() {
            return shipperId;
        }

        public shippers_variance_order_by setShipperId(order_by shipperId) {
            this.shipperId = shipperId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (shipperId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("shipper_id:");
                _queryBuilder.append(shipperId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface subscription_rootQueryDefinition {
        void define(subscription_rootQuery _queryBuilder);
    }

    /**
    * subscription root
    */
    public static class subscription_rootQuery extends Query<subscription_rootQuery> {
        subscription_rootQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public class CategoriesArguments extends Arguments {
            CategoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CategoriesArguments distinctOn(List<categories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CategoriesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CategoriesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CategoriesArguments orderBy(List<categories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CategoriesArguments where(categories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CategoriesArgumentsDefinition {
            void define(CategoriesArguments args);
        }

        /**
        * fetch data from the table: "categories"
        */
        public subscription_rootQuery categories(categoriesQueryDefinition queryDef) {
            return categories(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "categories"
        */
        public subscription_rootQuery categories(CategoriesArgumentsDefinition argsDef, categoriesQueryDefinition queryDef) {
            startField("categories");

            CategoriesArguments args = new CategoriesArguments(_queryBuilder);
            argsDef.define(args);
            CategoriesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new categoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CategoriesAggregateArguments extends Arguments {
            CategoriesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CategoriesAggregateArguments distinctOn(List<categories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CategoriesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CategoriesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CategoriesAggregateArguments orderBy(List<categories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (categories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CategoriesAggregateArguments where(categories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CategoriesAggregateArgumentsDefinition {
            void define(CategoriesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "categories"
        */
        public subscription_rootQuery categoriesAggregate(categories_aggregateQueryDefinition queryDef) {
            return categoriesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "categories"
        */
        public subscription_rootQuery categoriesAggregate(CategoriesAggregateArgumentsDefinition argsDef, categories_aggregateQueryDefinition queryDef) {
            startField("categories_aggregate");

            CategoriesAggregateArguments args = new CategoriesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CategoriesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new categories_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "categories" using primary key columns
        */
        public subscription_rootQuery categoriesByPk(int categoryId, categoriesQueryDefinition queryDef) {
            startField("categories_by_pk");

            _queryBuilder.append("(category_id:");
            _queryBuilder.append(categoryId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new categoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerCustomerDemoArguments extends Arguments {
            CustomerCustomerDemoArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerCustomerDemoArguments distinctOn(List<customer_customer_demo_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerCustomerDemoArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerCustomerDemoArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerCustomerDemoArguments orderBy(List<customer_customer_demo_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerCustomerDemoArguments where(customer_customer_demo_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerCustomerDemoArgumentsDefinition {
            void define(CustomerCustomerDemoArguments args);
        }

        /**
        * fetch data from the table: "customer_customer_demo"
        */
        public subscription_rootQuery customerCustomerDemo(customer_customer_demoQueryDefinition queryDef) {
            return customerCustomerDemo(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "customer_customer_demo"
        */
        public subscription_rootQuery customerCustomerDemo(CustomerCustomerDemoArgumentsDefinition argsDef, customer_customer_demoQueryDefinition queryDef) {
            startField("customer_customer_demo");

            CustomerCustomerDemoArguments args = new CustomerCustomerDemoArguments(_queryBuilder);
            argsDef.define(args);
            CustomerCustomerDemoArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerCustomerDemoAggregateArguments extends Arguments {
            CustomerCustomerDemoAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerCustomerDemoAggregateArguments distinctOn(List<customer_customer_demo_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerCustomerDemoAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerCustomerDemoAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerCustomerDemoAggregateArguments orderBy(List<customer_customer_demo_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_customer_demo_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerCustomerDemoAggregateArguments where(customer_customer_demo_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerCustomerDemoAggregateArgumentsDefinition {
            void define(CustomerCustomerDemoAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "customer_customer_demo"
        */
        public subscription_rootQuery customerCustomerDemoAggregate(customer_customer_demo_aggregateQueryDefinition queryDef) {
            return customerCustomerDemoAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "customer_customer_demo"
        */
        public subscription_rootQuery customerCustomerDemoAggregate(CustomerCustomerDemoAggregateArgumentsDefinition argsDef, customer_customer_demo_aggregateQueryDefinition queryDef) {
            startField("customer_customer_demo_aggregate");

            CustomerCustomerDemoAggregateArguments args = new CustomerCustomerDemoAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CustomerCustomerDemoAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demo_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "customer_customer_demo" using primary key columns
        */
        public subscription_rootQuery customerCustomerDemoByPk(String customerId, String customerTypeId, customer_customer_demoQueryDefinition queryDef) {
            startField("customer_customer_demo_by_pk");

            _queryBuilder.append("(customer_id:");
            Query.appendQuotedString(_queryBuilder, customerId.toString());

            _queryBuilder.append(",customer_type_id:");
            Query.appendQuotedString(_queryBuilder, customerTypeId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_customer_demoQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerDemographicsArguments extends Arguments {
            CustomerDemographicsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerDemographicsArguments distinctOn(List<customer_demographics_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerDemographicsArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerDemographicsArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerDemographicsArguments orderBy(List<customer_demographics_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerDemographicsArguments where(customer_demographics_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerDemographicsArgumentsDefinition {
            void define(CustomerDemographicsArguments args);
        }

        /**
        * fetch data from the table: "customer_demographics"
        */
        public subscription_rootQuery customerDemographics(customer_demographicsQueryDefinition queryDef) {
            return customerDemographics(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "customer_demographics"
        */
        public subscription_rootQuery customerDemographics(CustomerDemographicsArgumentsDefinition argsDef, customer_demographicsQueryDefinition queryDef) {
            startField("customer_demographics");

            CustomerDemographicsArguments args = new CustomerDemographicsArguments(_queryBuilder);
            argsDef.define(args);
            CustomerDemographicsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_demographicsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomerDemographicsAggregateArguments extends Arguments {
            CustomerDemographicsAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomerDemographicsAggregateArguments distinctOn(List<customer_demographics_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomerDemographicsAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomerDemographicsAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomerDemographicsAggregateArguments orderBy(List<customer_demographics_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customer_demographics_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomerDemographicsAggregateArguments where(customer_demographics_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomerDemographicsAggregateArgumentsDefinition {
            void define(CustomerDemographicsAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "customer_demographics"
        */
        public subscription_rootQuery customerDemographicsAggregate(customer_demographics_aggregateQueryDefinition queryDef) {
            return customerDemographicsAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "customer_demographics"
        */
        public subscription_rootQuery customerDemographicsAggregate(CustomerDemographicsAggregateArgumentsDefinition argsDef, customer_demographics_aggregateQueryDefinition queryDef) {
            startField("customer_demographics_aggregate");

            CustomerDemographicsAggregateArguments args = new CustomerDemographicsAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CustomerDemographicsAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customer_demographics_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "customer_demographics" using primary key columns
        */
        public subscription_rootQuery customerDemographicsByPk(String customerTypeId, customer_demographicsQueryDefinition queryDef) {
            startField("customer_demographics_by_pk");

            _queryBuilder.append("(customer_type_id:");
            Query.appendQuotedString(_queryBuilder, customerTypeId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customer_demographicsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomersArguments extends Arguments {
            CustomersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomersArguments distinctOn(List<customers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomersArguments orderBy(List<customers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomersArguments where(customers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomersArgumentsDefinition {
            void define(CustomersArguments args);
        }

        /**
        * fetch data from the table: "customers"
        */
        public subscription_rootQuery customers(customersQueryDefinition queryDef) {
            return customers(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "customers"
        */
        public subscription_rootQuery customers(CustomersArgumentsDefinition argsDef, customersQueryDefinition queryDef) {
            startField("customers");

            CustomersArguments args = new CustomersArguments(_queryBuilder);
            argsDef.define(args);
            CustomersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CustomersAggregateArguments extends Arguments {
            CustomersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public CustomersAggregateArguments distinctOn(List<customers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public CustomersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public CustomersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public CustomersAggregateArguments orderBy(List<customers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (customers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public CustomersAggregateArguments where(customers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface CustomersAggregateArgumentsDefinition {
            void define(CustomersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "customers"
        */
        public subscription_rootQuery customersAggregate(customers_aggregateQueryDefinition queryDef) {
            return customersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "customers"
        */
        public subscription_rootQuery customersAggregate(CustomersAggregateArgumentsDefinition argsDef, customers_aggregateQueryDefinition queryDef) {
            startField("customers_aggregate");

            CustomersAggregateArguments args = new CustomersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            CustomersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new customers_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "customers" using primary key columns
        */
        public subscription_rootQuery customersByPk(String customerId, customersQueryDefinition queryDef) {
            startField("customers_by_pk");

            _queryBuilder.append("(customer_id:");
            Query.appendQuotedString(_queryBuilder, customerId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new customersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeeTerritoriesArguments extends Arguments {
            EmployeeTerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeeTerritoriesArguments distinctOn(List<employee_territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeeTerritoriesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeeTerritoriesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeeTerritoriesArguments orderBy(List<employee_territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeeTerritoriesArguments where(employee_territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeeTerritoriesArgumentsDefinition {
            void define(EmployeeTerritoriesArguments args);
        }

        /**
        * fetch data from the table: "employee_territories"
        */
        public subscription_rootQuery employeeTerritories(employee_territoriesQueryDefinition queryDef) {
            return employeeTerritories(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "employee_territories"
        */
        public subscription_rootQuery employeeTerritories(EmployeeTerritoriesArgumentsDefinition argsDef, employee_territoriesQueryDefinition queryDef) {
            startField("employee_territories");

            EmployeeTerritoriesArguments args = new EmployeeTerritoriesArguments(_queryBuilder);
            argsDef.define(args);
            EmployeeTerritoriesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employee_territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeeTerritoriesAggregateArguments extends Arguments {
            EmployeeTerritoriesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeeTerritoriesAggregateArguments distinctOn(List<employee_territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeeTerritoriesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeeTerritoriesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeeTerritoriesAggregateArguments orderBy(List<employee_territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employee_territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeeTerritoriesAggregateArguments where(employee_territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeeTerritoriesAggregateArgumentsDefinition {
            void define(EmployeeTerritoriesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "employee_territories"
        */
        public subscription_rootQuery employeeTerritoriesAggregate(employee_territories_aggregateQueryDefinition queryDef) {
            return employeeTerritoriesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "employee_territories"
        */
        public subscription_rootQuery employeeTerritoriesAggregate(EmployeeTerritoriesAggregateArgumentsDefinition argsDef, employee_territories_aggregateQueryDefinition queryDef) {
            startField("employee_territories_aggregate");

            EmployeeTerritoriesAggregateArguments args = new EmployeeTerritoriesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            EmployeeTerritoriesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employee_territories_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "employee_territories" using primary key columns
        */
        public subscription_rootQuery employeeTerritoriesByPk(int employeeId, String territoryId, employee_territoriesQueryDefinition queryDef) {
            startField("employee_territories_by_pk");

            _queryBuilder.append("(employee_id:");
            _queryBuilder.append(employeeId);

            _queryBuilder.append(",territory_id:");
            Query.appendQuotedString(_queryBuilder, territoryId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employee_territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeesArguments extends Arguments {
            EmployeesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeesArguments distinctOn(List<employees_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeesArguments orderBy(List<employees_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeesArguments where(employees_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeesArgumentsDefinition {
            void define(EmployeesArguments args);
        }

        /**
        * fetch data from the table: "employees"
        */
        public subscription_rootQuery employees(employeesQueryDefinition queryDef) {
            return employees(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "employees"
        */
        public subscription_rootQuery employees(EmployeesArgumentsDefinition argsDef, employeesQueryDefinition queryDef) {
            startField("employees");

            EmployeesArguments args = new EmployeesArguments(_queryBuilder);
            argsDef.define(args);
            EmployeesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employeesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class EmployeesAggregateArguments extends Arguments {
            EmployeesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public EmployeesAggregateArguments distinctOn(List<employees_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public EmployeesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public EmployeesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public EmployeesAggregateArguments orderBy(List<employees_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (employees_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public EmployeesAggregateArguments where(employees_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface EmployeesAggregateArgumentsDefinition {
            void define(EmployeesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "employees"
        */
        public subscription_rootQuery employeesAggregate(employees_aggregateQueryDefinition queryDef) {
            return employeesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "employees"
        */
        public subscription_rootQuery employeesAggregate(EmployeesAggregateArgumentsDefinition argsDef, employees_aggregateQueryDefinition queryDef) {
            startField("employees_aggregate");

            EmployeesAggregateArguments args = new EmployeesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            EmployeesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new employees_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "employees" using primary key columns
        */
        public subscription_rootQuery employeesByPk(int employeeId, employeesQueryDefinition queryDef) {
            startField("employees_by_pk");

            _queryBuilder.append("(employee_id:");
            _queryBuilder.append(employeeId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new employeesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrderDetailsArguments extends Arguments {
            OrderDetailsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrderDetailsArguments distinctOn(List<order_details_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrderDetailsArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrderDetailsArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrderDetailsArguments orderBy(List<order_details_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrderDetailsArguments where(order_details_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrderDetailsArgumentsDefinition {
            void define(OrderDetailsArguments args);
        }

        /**
        * fetch data from the table: "order_details"
        */
        public subscription_rootQuery orderDetails(order_detailsQueryDefinition queryDef) {
            return orderDetails(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "order_details"
        */
        public subscription_rootQuery orderDetails(OrderDetailsArgumentsDefinition argsDef, order_detailsQueryDefinition queryDef) {
            startField("order_details");

            OrderDetailsArguments args = new OrderDetailsArguments(_queryBuilder);
            argsDef.define(args);
            OrderDetailsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new order_detailsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrderDetailsAggregateArguments extends Arguments {
            OrderDetailsAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrderDetailsAggregateArguments distinctOn(List<order_details_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrderDetailsAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrderDetailsAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrderDetailsAggregateArguments orderBy(List<order_details_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (order_details_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrderDetailsAggregateArguments where(order_details_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrderDetailsAggregateArgumentsDefinition {
            void define(OrderDetailsAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "order_details"
        */
        public subscription_rootQuery orderDetailsAggregate(order_details_aggregateQueryDefinition queryDef) {
            return orderDetailsAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "order_details"
        */
        public subscription_rootQuery orderDetailsAggregate(OrderDetailsAggregateArgumentsDefinition argsDef, order_details_aggregateQueryDefinition queryDef) {
            startField("order_details_aggregate");

            OrderDetailsAggregateArguments args = new OrderDetailsAggregateArguments(_queryBuilder);
            argsDef.define(args);
            OrderDetailsAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new order_details_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "order_details" using primary key columns
        */
        public subscription_rootQuery orderDetailsByPk(int orderId, int productId, order_detailsQueryDefinition queryDef) {
            startField("order_details_by_pk");

            _queryBuilder.append("(order_id:");
            _queryBuilder.append(orderId);

            _queryBuilder.append(",product_id:");
            _queryBuilder.append(productId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new order_detailsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrdersArguments extends Arguments {
            OrdersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrdersArguments distinctOn(List<orders_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrdersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrdersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrdersArguments orderBy(List<orders_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrdersArguments where(orders_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrdersArgumentsDefinition {
            void define(OrdersArguments args);
        }

        /**
        * fetch data from the table: "orders"
        */
        public subscription_rootQuery orders(ordersQueryDefinition queryDef) {
            return orders(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "orders"
        */
        public subscription_rootQuery orders(OrdersArgumentsDefinition argsDef, ordersQueryDefinition queryDef) {
            startField("orders");

            OrdersArguments args = new OrdersArguments(_queryBuilder);
            argsDef.define(args);
            OrdersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new ordersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class OrdersAggregateArguments extends Arguments {
            OrdersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public OrdersAggregateArguments distinctOn(List<orders_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public OrdersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public OrdersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public OrdersAggregateArguments orderBy(List<orders_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (orders_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public OrdersAggregateArguments where(orders_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface OrdersAggregateArgumentsDefinition {
            void define(OrdersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "orders"
        */
        public subscription_rootQuery ordersAggregate(orders_aggregateQueryDefinition queryDef) {
            return ordersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "orders"
        */
        public subscription_rootQuery ordersAggregate(OrdersAggregateArgumentsDefinition argsDef, orders_aggregateQueryDefinition queryDef) {
            startField("orders_aggregate");

            OrdersAggregateArguments args = new OrdersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            OrdersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new orders_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "orders" using primary key columns
        */
        public subscription_rootQuery ordersByPk(int orderId, ordersQueryDefinition queryDef) {
            startField("orders_by_pk");

            _queryBuilder.append("(order_id:");
            _queryBuilder.append(orderId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new ordersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ProductsArguments extends Arguments {
            ProductsArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ProductsArguments distinctOn(List<products_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ProductsArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ProductsArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ProductsArguments orderBy(List<products_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ProductsArguments where(products_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ProductsArgumentsDefinition {
            void define(ProductsArguments args);
        }

        /**
        * fetch data from the table: "products"
        */
        public subscription_rootQuery products(productsQueryDefinition queryDef) {
            return products(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "products"
        */
        public subscription_rootQuery products(ProductsArgumentsDefinition argsDef, productsQueryDefinition queryDef) {
            startField("products");

            ProductsArguments args = new ProductsArguments(_queryBuilder);
            argsDef.define(args);
            ProductsArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new productsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ProductsAggregateArguments extends Arguments {
            ProductsAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ProductsAggregateArguments distinctOn(List<products_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ProductsAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ProductsAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ProductsAggregateArguments orderBy(List<products_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (products_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ProductsAggregateArguments where(products_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ProductsAggregateArgumentsDefinition {
            void define(ProductsAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "products"
        */
        public subscription_rootQuery productsAggregate(products_aggregateQueryDefinition queryDef) {
            return productsAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "products"
        */
        public subscription_rootQuery productsAggregate(ProductsAggregateArgumentsDefinition argsDef, products_aggregateQueryDefinition queryDef) {
            startField("products_aggregate");

            ProductsAggregateArguments args = new ProductsAggregateArguments(_queryBuilder);
            argsDef.define(args);
            ProductsAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new products_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "products" using primary key columns
        */
        public subscription_rootQuery productsByPk(int productId, productsQueryDefinition queryDef) {
            startField("products_by_pk");

            _queryBuilder.append("(product_id:");
            _queryBuilder.append(productId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new productsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class RegionArguments extends Arguments {
            RegionArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public RegionArguments distinctOn(List<region_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public RegionArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public RegionArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public RegionArguments orderBy(List<region_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public RegionArguments where(region_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface RegionArgumentsDefinition {
            void define(RegionArguments args);
        }

        /**
        * fetch data from the table: "region"
        */
        public subscription_rootQuery region(regionQueryDefinition queryDef) {
            return region(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "region"
        */
        public subscription_rootQuery region(RegionArgumentsDefinition argsDef, regionQueryDefinition queryDef) {
            startField("region");

            RegionArguments args = new RegionArguments(_queryBuilder);
            argsDef.define(args);
            RegionArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new regionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class RegionAggregateArguments extends Arguments {
            RegionAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public RegionAggregateArguments distinctOn(List<region_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public RegionAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public RegionAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public RegionAggregateArguments orderBy(List<region_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (region_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public RegionAggregateArguments where(region_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface RegionAggregateArgumentsDefinition {
            void define(RegionAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "region"
        */
        public subscription_rootQuery regionAggregate(region_aggregateQueryDefinition queryDef) {
            return regionAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "region"
        */
        public subscription_rootQuery regionAggregate(RegionAggregateArgumentsDefinition argsDef, region_aggregateQueryDefinition queryDef) {
            startField("region_aggregate");

            RegionAggregateArguments args = new RegionAggregateArguments(_queryBuilder);
            argsDef.define(args);
            RegionAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new region_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "region" using primary key columns
        */
        public subscription_rootQuery regionByPk(int regionId, regionQueryDefinition queryDef) {
            startField("region_by_pk");

            _queryBuilder.append("(region_id:");
            _queryBuilder.append(regionId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new regionQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ShippersArguments extends Arguments {
            ShippersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ShippersArguments distinctOn(List<shippers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ShippersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ShippersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ShippersArguments orderBy(List<shippers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ShippersArguments where(shippers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ShippersArgumentsDefinition {
            void define(ShippersArguments args);
        }

        /**
        * fetch data from the table: "shippers"
        */
        public subscription_rootQuery shippers(shippersQueryDefinition queryDef) {
            return shippers(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "shippers"
        */
        public subscription_rootQuery shippers(ShippersArgumentsDefinition argsDef, shippersQueryDefinition queryDef) {
            startField("shippers");

            ShippersArguments args = new ShippersArguments(_queryBuilder);
            argsDef.define(args);
            ShippersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new shippersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class ShippersAggregateArguments extends Arguments {
            ShippersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public ShippersAggregateArguments distinctOn(List<shippers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public ShippersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public ShippersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public ShippersAggregateArguments orderBy(List<shippers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (shippers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public ShippersAggregateArguments where(shippers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface ShippersAggregateArgumentsDefinition {
            void define(ShippersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "shippers"
        */
        public subscription_rootQuery shippersAggregate(shippers_aggregateQueryDefinition queryDef) {
            return shippersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "shippers"
        */
        public subscription_rootQuery shippersAggregate(ShippersAggregateArgumentsDefinition argsDef, shippers_aggregateQueryDefinition queryDef) {
            startField("shippers_aggregate");

            ShippersAggregateArguments args = new ShippersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            ShippersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new shippers_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "shippers" using primary key columns
        */
        public subscription_rootQuery shippersByPk(int shipperId, shippersQueryDefinition queryDef) {
            startField("shippers_by_pk");

            _queryBuilder.append("(shipper_id:");
            _queryBuilder.append(shipperId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new shippersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SuppliersArguments extends Arguments {
            SuppliersArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public SuppliersArguments distinctOn(List<suppliers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public SuppliersArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public SuppliersArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public SuppliersArguments orderBy(List<suppliers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public SuppliersArguments where(suppliers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface SuppliersArgumentsDefinition {
            void define(SuppliersArguments args);
        }

        /**
        * fetch data from the table: "suppliers"
        */
        public subscription_rootQuery suppliers(suppliersQueryDefinition queryDef) {
            return suppliers(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "suppliers"
        */
        public subscription_rootQuery suppliers(SuppliersArgumentsDefinition argsDef, suppliersQueryDefinition queryDef) {
            startField("suppliers");

            SuppliersArguments args = new SuppliersArguments(_queryBuilder);
            argsDef.define(args);
            SuppliersArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new suppliersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class SuppliersAggregateArguments extends Arguments {
            SuppliersAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public SuppliersAggregateArguments distinctOn(List<suppliers_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public SuppliersAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public SuppliersAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public SuppliersAggregateArguments orderBy(List<suppliers_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public SuppliersAggregateArguments where(suppliers_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface SuppliersAggregateArgumentsDefinition {
            void define(SuppliersAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "suppliers"
        */
        public subscription_rootQuery suppliersAggregate(suppliers_aggregateQueryDefinition queryDef) {
            return suppliersAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "suppliers"
        */
        public subscription_rootQuery suppliersAggregate(SuppliersAggregateArgumentsDefinition argsDef, suppliers_aggregateQueryDefinition queryDef) {
            startField("suppliers_aggregate");

            SuppliersAggregateArguments args = new SuppliersAggregateArguments(_queryBuilder);
            argsDef.define(args);
            SuppliersAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new suppliers_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "suppliers" using primary key columns
        */
        public subscription_rootQuery suppliersByPk(int supplierId, suppliersQueryDefinition queryDef) {
            startField("suppliers_by_pk");

            _queryBuilder.append("(supplier_id:");
            _queryBuilder.append(supplierId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new suppliersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class TerritoriesArguments extends Arguments {
            TerritoriesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public TerritoriesArguments distinctOn(List<territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public TerritoriesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public TerritoriesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public TerritoriesArguments orderBy(List<territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public TerritoriesArguments where(territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface TerritoriesArgumentsDefinition {
            void define(TerritoriesArguments args);
        }

        /**
        * fetch data from the table: "territories"
        */
        public subscription_rootQuery territories(territoriesQueryDefinition queryDef) {
            return territories(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "territories"
        */
        public subscription_rootQuery territories(TerritoriesArgumentsDefinition argsDef, territoriesQueryDefinition queryDef) {
            startField("territories");

            TerritoriesArguments args = new TerritoriesArguments(_queryBuilder);
            argsDef.define(args);
            TerritoriesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class TerritoriesAggregateArguments extends Arguments {
            TerritoriesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public TerritoriesAggregateArguments distinctOn(List<territories_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public TerritoriesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public TerritoriesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public TerritoriesAggregateArguments orderBy(List<territories_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public TerritoriesAggregateArguments where(territories_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface TerritoriesAggregateArgumentsDefinition {
            void define(TerritoriesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "territories"
        */
        public subscription_rootQuery territoriesAggregate(territories_aggregateQueryDefinition queryDef) {
            return territoriesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "territories"
        */
        public subscription_rootQuery territoriesAggregate(TerritoriesAggregateArgumentsDefinition argsDef, territories_aggregateQueryDefinition queryDef) {
            startField("territories_aggregate");

            TerritoriesAggregateArguments args = new TerritoriesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            TerritoriesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new territories_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "territories" using primary key columns
        */
        public subscription_rootQuery territoriesByPk(String territoryId, territoriesQueryDefinition queryDef) {
            startField("territories_by_pk");

            _queryBuilder.append("(territory_id:");
            Query.appendQuotedString(_queryBuilder, territoryId.toString());

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UsStatesArguments extends Arguments {
            UsStatesArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public UsStatesArguments distinctOn(List<us_states_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public UsStatesArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public UsStatesArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public UsStatesArguments orderBy(List<us_states_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public UsStatesArguments where(us_states_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UsStatesArgumentsDefinition {
            void define(UsStatesArguments args);
        }

        /**
        * fetch data from the table: "us_states"
        */
        public subscription_rootQuery usStates(us_statesQueryDefinition queryDef) {
            return usStates(args -> {}, queryDef);
        }

        /**
        * fetch data from the table: "us_states"
        */
        public subscription_rootQuery usStates(UsStatesArgumentsDefinition argsDef, us_statesQueryDefinition queryDef) {
            startField("us_states");

            UsStatesArguments args = new UsStatesArguments(_queryBuilder);
            argsDef.define(args);
            UsStatesArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new us_statesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class UsStatesAggregateArguments extends Arguments {
            UsStatesAggregateArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            /**
            * distinct select on columns
            */
            public UsStatesAggregateArguments distinctOn(List<us_states_select_column> value) {
                if (value != null) {
                    startArgument("distinct_on");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * limit the nuber of rows returned
            */
            public UsStatesAggregateArguments limit(Integer value) {
                if (value != null) {
                    startArgument("limit");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * skip the first n rows. Use only with order_by
            */
            public UsStatesAggregateArguments offset(Integer value) {
                if (value != null) {
                    startArgument("offset");
                    _queryBuilder.append(value);
                }
                return this;
            }

            /**
            * sort the rows by one or more columns
            */
            public UsStatesAggregateArguments orderBy(List<us_states_order_by> value) {
                if (value != null) {
                    startArgument("order_by");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_order_by item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        item1.appendTo(_queryBuilder);
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            /**
            * filter the rows returned
            */
            public UsStatesAggregateArguments where(us_states_bool_exp value) {
                if (value != null) {
                    startArgument("where");
                    value.appendTo(_queryBuilder);
                }
                return this;
            }
        }

        public interface UsStatesAggregateArgumentsDefinition {
            void define(UsStatesAggregateArguments args);
        }

        /**
        * fetch aggregated fields from the table: "us_states"
        */
        public subscription_rootQuery usStatesAggregate(us_states_aggregateQueryDefinition queryDef) {
            return usStatesAggregate(args -> {}, queryDef);
        }

        /**
        * fetch aggregated fields from the table: "us_states"
        */
        public subscription_rootQuery usStatesAggregate(UsStatesAggregateArgumentsDefinition argsDef, us_states_aggregateQueryDefinition queryDef) {
            startField("us_states_aggregate");

            UsStatesAggregateArguments args = new UsStatesAggregateArguments(_queryBuilder);
            argsDef.define(args);
            UsStatesAggregateArguments.end(args);

            _queryBuilder.append('{');
            queryDef.define(new us_states_aggregateQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        /**
        * fetch data from the table: "us_states" using primary key columns
        */
        public subscription_rootQuery usStatesByPk(int stateId, us_statesQueryDefinition queryDef) {
            startField("us_states_by_pk");

            _queryBuilder.append("(state_id:");
            _queryBuilder.append(stateId);

            _queryBuilder.append(')');

            _queryBuilder.append('{');
            queryDef.define(new us_statesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * subscription root
    */
    public static class subscription_root extends AbstractResponse<subscription_root> {
        public subscription_root() {
        }

        public subscription_root(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "categories": {
                        List<categories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new categories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "categories_aggregate": {
                        responseData.put(key, new categories_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "categories_by_pk": {
                        categories optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new categories(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customer_customer_demo": {
                        List<customer_customer_demo> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_customer_demo(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "customer_customer_demo_aggregate": {
                        responseData.put(key, new customer_customer_demo_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customer_customer_demo_by_pk": {
                        customer_customer_demo optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_customer_demo(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customer_demographics": {
                        List<customer_demographics> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customer_demographics(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "customer_demographics_aggregate": {
                        responseData.put(key, new customer_demographics_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customer_demographics_by_pk": {
                        customer_demographics optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customer_demographics(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "customers": {
                        List<customers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new customers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "customers_aggregate": {
                        responseData.put(key, new customers_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "customers_by_pk": {
                        customers optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new customers(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employee_territories": {
                        List<employee_territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employee_territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "employee_territories_aggregate": {
                        responseData.put(key, new employee_territories_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "employee_territories_by_pk": {
                        employee_territories optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employee_territories(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "employees": {
                        List<employees> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new employees(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "employees_aggregate": {
                        responseData.put(key, new employees_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "employees_by_pk": {
                        employees optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new employees(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "order_details": {
                        List<order_details> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new order_details(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "order_details_aggregate": {
                        responseData.put(key, new order_details_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "order_details_by_pk": {
                        order_details optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new order_details(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "orders": {
                        List<orders> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new orders(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "orders_aggregate": {
                        responseData.put(key, new orders_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "orders_by_pk": {
                        orders optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new orders(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "products": {
                        List<products> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new products(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "products_aggregate": {
                        responseData.put(key, new products_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "products_by_pk": {
                        products optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new products(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        List<region> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new region(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "region_aggregate": {
                        responseData.put(key, new region_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "region_by_pk": {
                        region optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new region(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "shippers": {
                        List<shippers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new shippers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "shippers_aggregate": {
                        responseData.put(key, new shippers_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "shippers_by_pk": {
                        shippers optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new shippers(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "suppliers": {
                        List<suppliers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new suppliers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "suppliers_aggregate": {
                        responseData.put(key, new suppliers_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "suppliers_by_pk": {
                        suppliers optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "territories": {
                        List<territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "territories_aggregate": {
                        responseData.put(key, new territories_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "territories_by_pk": {
                        territories optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "us_states": {
                        List<us_states> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new us_states(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "us_states_aggregate": {
                        responseData.put(key, new us_states_aggregate(jsonAsObject(field.getValue(), key)));

                        break;
                    }

                    case "us_states_by_pk": {
                        us_states optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "subscription_root";
        }

        /**
        * fetch data from the table: "categories"
        */

        public List<categories> getCategories() {
            return (List<categories>) get("categories");
        }

        public subscription_root setCategories(List<categories> arg) {
            optimisticData.put(getKey("categories"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "categories"
        */

        public categories_aggregate getCategoriesAggregate() {
            return (categories_aggregate) get("categories_aggregate");
        }

        public subscription_root setCategoriesAggregate(categories_aggregate arg) {
            optimisticData.put(getKey("categories_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "categories" using primary key columns
        */

        public categories getCategoriesByPk() {
            return (categories) get("categories_by_pk");
        }

        public subscription_root setCategoriesByPk(categories arg) {
            optimisticData.put(getKey("categories_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_customer_demo"
        */

        public List<customer_customer_demo> getCustomerCustomerDemo() {
            return (List<customer_customer_demo>) get("customer_customer_demo");
        }

        public subscription_root setCustomerCustomerDemo(List<customer_customer_demo> arg) {
            optimisticData.put(getKey("customer_customer_demo"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "customer_customer_demo"
        */

        public customer_customer_demo_aggregate getCustomerCustomerDemoAggregate() {
            return (customer_customer_demo_aggregate) get("customer_customer_demo_aggregate");
        }

        public subscription_root setCustomerCustomerDemoAggregate(customer_customer_demo_aggregate arg) {
            optimisticData.put(getKey("customer_customer_demo_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_customer_demo" using primary key columns
        */

        public customer_customer_demo getCustomerCustomerDemoByPk() {
            return (customer_customer_demo) get("customer_customer_demo_by_pk");
        }

        public subscription_root setCustomerCustomerDemoByPk(customer_customer_demo arg) {
            optimisticData.put(getKey("customer_customer_demo_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_demographics"
        */

        public List<customer_demographics> getCustomerDemographics() {
            return (List<customer_demographics>) get("customer_demographics");
        }

        public subscription_root setCustomerDemographics(List<customer_demographics> arg) {
            optimisticData.put(getKey("customer_demographics"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "customer_demographics"
        */

        public customer_demographics_aggregate getCustomerDemographicsAggregate() {
            return (customer_demographics_aggregate) get("customer_demographics_aggregate");
        }

        public subscription_root setCustomerDemographicsAggregate(customer_demographics_aggregate arg) {
            optimisticData.put(getKey("customer_demographics_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customer_demographics" using primary key columns
        */

        public customer_demographics getCustomerDemographicsByPk() {
            return (customer_demographics) get("customer_demographics_by_pk");
        }

        public subscription_root setCustomerDemographicsByPk(customer_demographics arg) {
            optimisticData.put(getKey("customer_demographics_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customers"
        */

        public List<customers> getCustomers() {
            return (List<customers>) get("customers");
        }

        public subscription_root setCustomers(List<customers> arg) {
            optimisticData.put(getKey("customers"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "customers"
        */

        public customers_aggregate getCustomersAggregate() {
            return (customers_aggregate) get("customers_aggregate");
        }

        public subscription_root setCustomersAggregate(customers_aggregate arg) {
            optimisticData.put(getKey("customers_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "customers" using primary key columns
        */

        public customers getCustomersByPk() {
            return (customers) get("customers_by_pk");
        }

        public subscription_root setCustomersByPk(customers arg) {
            optimisticData.put(getKey("customers_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employee_territories"
        */

        public List<employee_territories> getEmployeeTerritories() {
            return (List<employee_territories>) get("employee_territories");
        }

        public subscription_root setEmployeeTerritories(List<employee_territories> arg) {
            optimisticData.put(getKey("employee_territories"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "employee_territories"
        */

        public employee_territories_aggregate getEmployeeTerritoriesAggregate() {
            return (employee_territories_aggregate) get("employee_territories_aggregate");
        }

        public subscription_root setEmployeeTerritoriesAggregate(employee_territories_aggregate arg) {
            optimisticData.put(getKey("employee_territories_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employee_territories" using primary key columns
        */

        public employee_territories getEmployeeTerritoriesByPk() {
            return (employee_territories) get("employee_territories_by_pk");
        }

        public subscription_root setEmployeeTerritoriesByPk(employee_territories arg) {
            optimisticData.put(getKey("employee_territories_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employees"
        */

        public List<employees> getEmployees() {
            return (List<employees>) get("employees");
        }

        public subscription_root setEmployees(List<employees> arg) {
            optimisticData.put(getKey("employees"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "employees"
        */

        public employees_aggregate getEmployeesAggregate() {
            return (employees_aggregate) get("employees_aggregate");
        }

        public subscription_root setEmployeesAggregate(employees_aggregate arg) {
            optimisticData.put(getKey("employees_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "employees" using primary key columns
        */

        public employees getEmployeesByPk() {
            return (employees) get("employees_by_pk");
        }

        public subscription_root setEmployeesByPk(employees arg) {
            optimisticData.put(getKey("employees_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "order_details"
        */

        public List<order_details> getOrderDetails() {
            return (List<order_details>) get("order_details");
        }

        public subscription_root setOrderDetails(List<order_details> arg) {
            optimisticData.put(getKey("order_details"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "order_details"
        */

        public order_details_aggregate getOrderDetailsAggregate() {
            return (order_details_aggregate) get("order_details_aggregate");
        }

        public subscription_root setOrderDetailsAggregate(order_details_aggregate arg) {
            optimisticData.put(getKey("order_details_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "order_details" using primary key columns
        */

        public order_details getOrderDetailsByPk() {
            return (order_details) get("order_details_by_pk");
        }

        public subscription_root setOrderDetailsByPk(order_details arg) {
            optimisticData.put(getKey("order_details_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "orders"
        */

        public List<orders> getOrders() {
            return (List<orders>) get("orders");
        }

        public subscription_root setOrders(List<orders> arg) {
            optimisticData.put(getKey("orders"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "orders"
        */

        public orders_aggregate getOrdersAggregate() {
            return (orders_aggregate) get("orders_aggregate");
        }

        public subscription_root setOrdersAggregate(orders_aggregate arg) {
            optimisticData.put(getKey("orders_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "orders" using primary key columns
        */

        public orders getOrdersByPk() {
            return (orders) get("orders_by_pk");
        }

        public subscription_root setOrdersByPk(orders arg) {
            optimisticData.put(getKey("orders_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "products"
        */

        public List<products> getProducts() {
            return (List<products>) get("products");
        }

        public subscription_root setProducts(List<products> arg) {
            optimisticData.put(getKey("products"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "products"
        */

        public products_aggregate getProductsAggregate() {
            return (products_aggregate) get("products_aggregate");
        }

        public subscription_root setProductsAggregate(products_aggregate arg) {
            optimisticData.put(getKey("products_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "products" using primary key columns
        */

        public products getProductsByPk() {
            return (products) get("products_by_pk");
        }

        public subscription_root setProductsByPk(products arg) {
            optimisticData.put(getKey("products_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "region"
        */

        public List<region> getRegion() {
            return (List<region>) get("region");
        }

        public subscription_root setRegion(List<region> arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "region"
        */

        public region_aggregate getRegionAggregate() {
            return (region_aggregate) get("region_aggregate");
        }

        public subscription_root setRegionAggregate(region_aggregate arg) {
            optimisticData.put(getKey("region_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "region" using primary key columns
        */

        public region getRegionByPk() {
            return (region) get("region_by_pk");
        }

        public subscription_root setRegionByPk(region arg) {
            optimisticData.put(getKey("region_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "shippers"
        */

        public List<shippers> getShippers() {
            return (List<shippers>) get("shippers");
        }

        public subscription_root setShippers(List<shippers> arg) {
            optimisticData.put(getKey("shippers"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "shippers"
        */

        public shippers_aggregate getShippersAggregate() {
            return (shippers_aggregate) get("shippers_aggregate");
        }

        public subscription_root setShippersAggregate(shippers_aggregate arg) {
            optimisticData.put(getKey("shippers_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "shippers" using primary key columns
        */

        public shippers getShippersByPk() {
            return (shippers) get("shippers_by_pk");
        }

        public subscription_root setShippersByPk(shippers arg) {
            optimisticData.put(getKey("shippers_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "suppliers"
        */

        public List<suppliers> getSuppliers() {
            return (List<suppliers>) get("suppliers");
        }

        public subscription_root setSuppliers(List<suppliers> arg) {
            optimisticData.put(getKey("suppliers"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "suppliers"
        */

        public suppliers_aggregate getSuppliersAggregate() {
            return (suppliers_aggregate) get("suppliers_aggregate");
        }

        public subscription_root setSuppliersAggregate(suppliers_aggregate arg) {
            optimisticData.put(getKey("suppliers_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "suppliers" using primary key columns
        */

        public suppliers getSuppliersByPk() {
            return (suppliers) get("suppliers_by_pk");
        }

        public subscription_root setSuppliersByPk(suppliers arg) {
            optimisticData.put(getKey("suppliers_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "territories"
        */

        public List<territories> getTerritories() {
            return (List<territories>) get("territories");
        }

        public subscription_root setTerritories(List<territories> arg) {
            optimisticData.put(getKey("territories"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "territories"
        */

        public territories_aggregate getTerritoriesAggregate() {
            return (territories_aggregate) get("territories_aggregate");
        }

        public subscription_root setTerritoriesAggregate(territories_aggregate arg) {
            optimisticData.put(getKey("territories_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "territories" using primary key columns
        */

        public territories getTerritoriesByPk() {
            return (territories) get("territories_by_pk");
        }

        public subscription_root setTerritoriesByPk(territories arg) {
            optimisticData.put(getKey("territories_by_pk"), arg);
            return this;
        }

        /**
        * fetch data from the table: "us_states"
        */

        public List<us_states> getUsStates() {
            return (List<us_states>) get("us_states");
        }

        public subscription_root setUsStates(List<us_states> arg) {
            optimisticData.put(getKey("us_states"), arg);
            return this;
        }

        /**
        * fetch aggregated fields from the table: "us_states"
        */

        public us_states_aggregate getUsStatesAggregate() {
            return (us_states_aggregate) get("us_states_aggregate");
        }

        public subscription_root setUsStatesAggregate(us_states_aggregate arg) {
            optimisticData.put(getKey("us_states_aggregate"), arg);
            return this;
        }

        /**
        * fetch data from the table: "us_states" using primary key columns
        */

        public us_states getUsStatesByPk() {
            return (us_states) get("us_states_by_pk");
        }

        public subscription_root setUsStatesByPk(us_states arg) {
            optimisticData.put(getKey("us_states_by_pk"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "categories": return true;

                case "categories_aggregate": return true;

                case "categories_by_pk": return true;

                case "customer_customer_demo": return true;

                case "customer_customer_demo_aggregate": return true;

                case "customer_customer_demo_by_pk": return true;

                case "customer_demographics": return true;

                case "customer_demographics_aggregate": return true;

                case "customer_demographics_by_pk": return true;

                case "customers": return true;

                case "customers_aggregate": return true;

                case "customers_by_pk": return true;

                case "employee_territories": return true;

                case "employee_territories_aggregate": return true;

                case "employee_territories_by_pk": return true;

                case "employees": return true;

                case "employees_aggregate": return true;

                case "employees_by_pk": return true;

                case "order_details": return true;

                case "order_details_aggregate": return true;

                case "order_details_by_pk": return true;

                case "orders": return true;

                case "orders_aggregate": return true;

                case "orders_by_pk": return true;

                case "products": return true;

                case "products_aggregate": return true;

                case "products_by_pk": return true;

                case "region": return true;

                case "region_aggregate": return true;

                case "region_by_pk": return true;

                case "shippers": return true;

                case "shippers_aggregate": return true;

                case "shippers_by_pk": return true;

                case "suppliers": return true;

                case "suppliers_aggregate": return true;

                case "suppliers_by_pk": return true;

                case "territories": return true;

                case "territories_aggregate": return true;

                case "territories_by_pk": return true;

                case "us_states": return true;

                case "us_states_aggregate": return true;

                case "us_states_by_pk": return true;

                default: return false;
            }
        }
    }

    public interface suppliersQueryDefinition {
        void define(suppliersQuery _queryBuilder);
    }

    /**
    * columns and relationships of "suppliers"
    */
    public static class suppliersQuery extends Query<suppliersQuery> {
        suppliersQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliersQuery address() {
            startField("address");

            return this;
        }

        public suppliersQuery city() {
            startField("city");

            return this;
        }

        public suppliersQuery companyName() {
            startField("company_name");

            return this;
        }

        public suppliersQuery contactName() {
            startField("contact_name");

            return this;
        }

        public suppliersQuery contactTitle() {
            startField("contact_title");

            return this;
        }

        public suppliersQuery country() {
            startField("country");

            return this;
        }

        public suppliersQuery fax() {
            startField("fax");

            return this;
        }

        public suppliersQuery homepage() {
            startField("homepage");

            return this;
        }

        public suppliersQuery phone() {
            startField("phone");

            return this;
        }

        public suppliersQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public suppliersQuery region() {
            startField("region");

            return this;
        }

        public suppliersQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * columns and relationships of "suppliers"
    */
    public static class suppliers extends AbstractResponse<suppliers> {
        public suppliers() {
        }

        public suppliers(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "company_name": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "contact_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "fax": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "homepage": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public suppliers setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public suppliers setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public suppliers setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getContactName() {
            return (String) get("contact_name");
        }

        public suppliers setContactName(String arg) {
            optimisticData.put(getKey("contact_name"), arg);
            return this;
        }

        public String getContactTitle() {
            return (String) get("contact_title");
        }

        public suppliers setContactTitle(String arg) {
            optimisticData.put(getKey("contact_title"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public suppliers setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public String getFax() {
            return (String) get("fax");
        }

        public suppliers setFax(String arg) {
            optimisticData.put(getKey("fax"), arg);
            return this;
        }

        public String getHomepage() {
            return (String) get("homepage");
        }

        public suppliers setHomepage(String arg) {
            optimisticData.put(getKey("homepage"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public suppliers setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public suppliers setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public suppliers setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public suppliers setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "city": return false;

                case "company_name": return false;

                case "contact_name": return false;

                case "contact_title": return false;

                case "country": return false;

                case "fax": return false;

                case "homepage": return false;

                case "phone": return false;

                case "postal_code": return false;

                case "region": return false;

                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public interface suppliers_aggregateQueryDefinition {
        void define(suppliers_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "suppliers"
    */
    public static class suppliers_aggregateQuery extends Query<suppliers_aggregateQuery> {
        suppliers_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_aggregateQuery aggregate(suppliers_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregateQuery nodes(suppliersQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new suppliersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "suppliers"
    */
    public static class suppliers_aggregate extends AbstractResponse<suppliers_aggregate> {
        public suppliers_aggregate() {
        }

        public suppliers_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        suppliers_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<suppliers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new suppliers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_aggregate";
        }

        public suppliers_aggregate_fields getAggregate() {
            return (suppliers_aggregate_fields) get("aggregate");
        }

        public suppliers_aggregate setAggregate(suppliers_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<suppliers> getNodes() {
            return (List<suppliers>) get("nodes");
        }

        public suppliers_aggregate setNodes(List<suppliers> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface suppliers_aggregate_fieldsQueryDefinition {
        void define(suppliers_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "suppliers"
    */
    public static class suppliers_aggregate_fieldsQuery extends Query<suppliers_aggregate_fieldsQuery> {
        suppliers_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_aggregate_fieldsQuery avg(suppliers_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<suppliers_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (suppliers_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public suppliers_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public suppliers_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public suppliers_aggregate_fieldsQuery max(suppliers_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery min(suppliers_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery stddev(suppliers_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery stddevPop(suppliers_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery stddevSamp(suppliers_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery sum(suppliers_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery varPop(suppliers_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery varSamp(suppliers_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public suppliers_aggregate_fieldsQuery variance(suppliers_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new suppliers_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "suppliers"
    */
    public static class suppliers_aggregate_fields extends AbstractResponse<suppliers_aggregate_fields> {
        public suppliers_aggregate_fields() {
        }

        public suppliers_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        suppliers_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        suppliers_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        suppliers_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        suppliers_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        suppliers_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        suppliers_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        suppliers_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        suppliers_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        suppliers_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        suppliers_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new suppliers_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_aggregate_fields";
        }

        public suppliers_avg_fields getAvg() {
            return (suppliers_avg_fields) get("avg");
        }

        public suppliers_aggregate_fields setAvg(suppliers_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public suppliers_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public suppliers_max_fields getMax() {
            return (suppliers_max_fields) get("max");
        }

        public suppliers_aggregate_fields setMax(suppliers_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public suppliers_min_fields getMin() {
            return (suppliers_min_fields) get("min");
        }

        public suppliers_aggregate_fields setMin(suppliers_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public suppliers_stddev_fields getStddev() {
            return (suppliers_stddev_fields) get("stddev");
        }

        public suppliers_aggregate_fields setStddev(suppliers_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public suppliers_stddev_pop_fields getStddevPop() {
            return (suppliers_stddev_pop_fields) get("stddev_pop");
        }

        public suppliers_aggregate_fields setStddevPop(suppliers_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public suppliers_stddev_samp_fields getStddevSamp() {
            return (suppliers_stddev_samp_fields) get("stddev_samp");
        }

        public suppliers_aggregate_fields setStddevSamp(suppliers_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public suppliers_sum_fields getSum() {
            return (suppliers_sum_fields) get("sum");
        }

        public suppliers_aggregate_fields setSum(suppliers_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public suppliers_var_pop_fields getVarPop() {
            return (suppliers_var_pop_fields) get("var_pop");
        }

        public suppliers_aggregate_fields setVarPop(suppliers_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public suppliers_var_samp_fields getVarSamp() {
            return (suppliers_var_samp_fields) get("var_samp");
        }

        public suppliers_aggregate_fields setVarSamp(suppliers_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public suppliers_variance_fields getVariance() {
            return (suppliers_variance_fields) get("variance");
        }

        public suppliers_aggregate_fields setVariance(suppliers_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class suppliers_aggregate_order_by implements Serializable {
        private suppliers_avg_order_by avg;

        private order_by count;

        private suppliers_max_order_by max;

        private suppliers_min_order_by min;

        private suppliers_stddev_order_by stddev;

        private suppliers_stddev_pop_order_by stddevPop;

        private suppliers_stddev_samp_order_by stddevSamp;

        private suppliers_sum_order_by sum;

        private suppliers_var_pop_order_by varPop;

        private suppliers_var_samp_order_by varSamp;

        private suppliers_variance_order_by variance;

        public suppliers_avg_order_by getAvg() {
            return avg;
        }

        public suppliers_aggregate_order_by setAvg(suppliers_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public suppliers_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public suppliers_max_order_by getMax() {
            return max;
        }

        public suppliers_aggregate_order_by setMax(suppliers_max_order_by max) {
            this.max = max;
            return this;
        }

        public suppliers_min_order_by getMin() {
            return min;
        }

        public suppliers_aggregate_order_by setMin(suppliers_min_order_by min) {
            this.min = min;
            return this;
        }

        public suppliers_stddev_order_by getStddev() {
            return stddev;
        }

        public suppliers_aggregate_order_by setStddev(suppliers_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public suppliers_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public suppliers_aggregate_order_by setStddevPop(suppliers_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public suppliers_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public suppliers_aggregate_order_by setStddevSamp(suppliers_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public suppliers_sum_order_by getSum() {
            return sum;
        }

        public suppliers_aggregate_order_by setSum(suppliers_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public suppliers_var_pop_order_by getVarPop() {
            return varPop;
        }

        public suppliers_aggregate_order_by setVarPop(suppliers_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public suppliers_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public suppliers_aggregate_order_by setVarSamp(suppliers_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public suppliers_variance_order_by getVariance() {
            return variance;
        }

        public suppliers_aggregate_order_by setVariance(suppliers_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class suppliers_arr_rel_insert_input implements Serializable {
        private List<suppliers_insert_input> data;

        private suppliers_on_conflict onConflict;

        public suppliers_arr_rel_insert_input(List<suppliers_insert_input> data) {
            this.data = data;
        }

        public List<suppliers_insert_input> getData() {
            return data;
        }

        public suppliers_arr_rel_insert_input setData(List<suppliers_insert_input> data) {
            this.data = data;
            return this;
        }

        public suppliers_on_conflict getOnConflict() {
            return onConflict;
        }

        public suppliers_arr_rel_insert_input setOnConflict(suppliers_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (suppliers_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_avg_fieldsQueryDefinition {
        void define(suppliers_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class suppliers_avg_fieldsQuery extends Query<suppliers_avg_fieldsQuery> {
        suppliers_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_avg_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class suppliers_avg_fields extends AbstractResponse<suppliers_avg_fields> {
        public suppliers_avg_fields() {
        }

        public suppliers_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_avg_fields";
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public suppliers_avg_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_avg_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_avg_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class suppliers_bool_exp implements Serializable {
        private List<suppliers_bool_exp> And;

        private suppliers_bool_exp Not;

        private List<suppliers_bool_exp> Or;

        private varchar_comparison_exp address;

        private varchar_comparison_exp city;

        private varchar_comparison_exp companyName;

        private varchar_comparison_exp contactName;

        private varchar_comparison_exp contactTitle;

        private varchar_comparison_exp country;

        private varchar_comparison_exp fax;

        private text_comparison_exp homepage;

        private varchar_comparison_exp phone;

        private varchar_comparison_exp postalCode;

        private varchar_comparison_exp region;

        private Int_comparison_exp supplierId;

        public List<suppliers_bool_exp> getAnd() {
            return And;
        }

        public suppliers_bool_exp setAnd(List<suppliers_bool_exp> And) {
            this.And = And;
            return this;
        }

        public suppliers_bool_exp getNot() {
            return Not;
        }

        public suppliers_bool_exp setNot(suppliers_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<suppliers_bool_exp> getOr() {
            return Or;
        }

        public suppliers_bool_exp setOr(List<suppliers_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public varchar_comparison_exp getAddress() {
            return address;
        }

        public suppliers_bool_exp setAddress(varchar_comparison_exp address) {
            this.address = address;
            return this;
        }

        public varchar_comparison_exp getCity() {
            return city;
        }

        public suppliers_bool_exp setCity(varchar_comparison_exp city) {
            this.city = city;
            return this;
        }

        public varchar_comparison_exp getCompanyName() {
            return companyName;
        }

        public suppliers_bool_exp setCompanyName(varchar_comparison_exp companyName) {
            this.companyName = companyName;
            return this;
        }

        public varchar_comparison_exp getContactName() {
            return contactName;
        }

        public suppliers_bool_exp setContactName(varchar_comparison_exp contactName) {
            this.contactName = contactName;
            return this;
        }

        public varchar_comparison_exp getContactTitle() {
            return contactTitle;
        }

        public suppliers_bool_exp setContactTitle(varchar_comparison_exp contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public varchar_comparison_exp getCountry() {
            return country;
        }

        public suppliers_bool_exp setCountry(varchar_comparison_exp country) {
            this.country = country;
            return this;
        }

        public varchar_comparison_exp getFax() {
            return fax;
        }

        public suppliers_bool_exp setFax(varchar_comparison_exp fax) {
            this.fax = fax;
            return this;
        }

        public text_comparison_exp getHomepage() {
            return homepage;
        }

        public suppliers_bool_exp setHomepage(text_comparison_exp homepage) {
            this.homepage = homepage;
            return this;
        }

        public varchar_comparison_exp getPhone() {
            return phone;
        }

        public suppliers_bool_exp setPhone(varchar_comparison_exp phone) {
            this.phone = phone;
            return this;
        }

        public varchar_comparison_exp getPostalCode() {
            return postalCode;
        }

        public suppliers_bool_exp setPostalCode(varchar_comparison_exp postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public varchar_comparison_exp getRegion() {
            return region;
        }

        public suppliers_bool_exp setRegion(varchar_comparison_exp region) {
            this.region = region;
            return this;
        }

        public Int_comparison_exp getSupplierId() {
            return supplierId;
        }

        public suppliers_bool_exp setSupplierId(Int_comparison_exp supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (suppliers_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (suppliers_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                address.appendTo(_queryBuilder);
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                city.appendTo(_queryBuilder);
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                companyName.appendTo(_queryBuilder);
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                contactName.appendTo(_queryBuilder);
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                contactTitle.appendTo(_queryBuilder);
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                country.appendTo(_queryBuilder);
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                fax.appendTo(_queryBuilder);
            }

            if (homepage != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("homepage:");
                homepage.appendTo(_queryBuilder);
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                phone.appendTo(_queryBuilder);
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                postalCode.appendTo(_queryBuilder);
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                region.appendTo(_queryBuilder);
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                supplierId.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "suppliers"
    */
    public enum suppliers_constraint {
        PK_SUPPLIERS,

        UNKNOWN_VALUE;

        public static suppliers_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_suppliers": {
                    return PK_SUPPLIERS;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_SUPPLIERS: {
                    return "pk_suppliers";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class suppliers_inc_input implements Serializable {
        private Integer supplierId;

        public Integer getSupplierId() {
            return supplierId;
        }

        public suppliers_inc_input setSupplierId(Integer supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId);
            }

            _queryBuilder.append('}');
        }
    }

    public static class suppliers_insert_input implements Serializable {
        private String address;

        private String city;

        private String companyName;

        private String contactName;

        private String contactTitle;

        private String country;

        private String fax;

        private String homepage;

        private String phone;

        private String postalCode;

        private String region;

        private Integer supplierId;

        public String getAddress() {
            return address;
        }

        public suppliers_insert_input setAddress(String address) {
            this.address = address;
            return this;
        }

        public String getCity() {
            return city;
        }

        public suppliers_insert_input setCity(String city) {
            this.city = city;
            return this;
        }

        public String getCompanyName() {
            return companyName;
        }

        public suppliers_insert_input setCompanyName(String companyName) {
            this.companyName = companyName;
            return this;
        }

        public String getContactName() {
            return contactName;
        }

        public suppliers_insert_input setContactName(String contactName) {
            this.contactName = contactName;
            return this;
        }

        public String getContactTitle() {
            return contactTitle;
        }

        public suppliers_insert_input setContactTitle(String contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public String getCountry() {
            return country;
        }

        public suppliers_insert_input setCountry(String country) {
            this.country = country;
            return this;
        }

        public String getFax() {
            return fax;
        }

        public suppliers_insert_input setFax(String fax) {
            this.fax = fax;
            return this;
        }

        public String getHomepage() {
            return homepage;
        }

        public suppliers_insert_input setHomepage(String homepage) {
            this.homepage = homepage;
            return this;
        }

        public String getPhone() {
            return phone;
        }

        public suppliers_insert_input setPhone(String phone) {
            this.phone = phone;
            return this;
        }

        public String getPostalCode() {
            return postalCode;
        }

        public suppliers_insert_input setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public String getRegion() {
            return region;
        }

        public suppliers_insert_input setRegion(String region) {
            this.region = region;
            return this;
        }

        public Integer getSupplierId() {
            return supplierId;
        }

        public suppliers_insert_input setSupplierId(Integer supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                Query.appendQuotedString(_queryBuilder, address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                Query.appendQuotedString(_queryBuilder, city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                Query.appendQuotedString(_queryBuilder, companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                Query.appendQuotedString(_queryBuilder, contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                Query.appendQuotedString(_queryBuilder, contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                Query.appendQuotedString(_queryBuilder, country.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                Query.appendQuotedString(_queryBuilder, fax.toString());
            }

            if (homepage != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("homepage:");
                Query.appendQuotedString(_queryBuilder, homepage.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                Query.appendQuotedString(_queryBuilder, phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                Query.appendQuotedString(_queryBuilder, postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                Query.appendQuotedString(_queryBuilder, region.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId);
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_max_fieldsQueryDefinition {
        void define(suppliers_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class suppliers_max_fieldsQuery extends Query<suppliers_max_fieldsQuery> {
        suppliers_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_max_fieldsQuery address() {
            startField("address");

            return this;
        }

        public suppliers_max_fieldsQuery city() {
            startField("city");

            return this;
        }

        public suppliers_max_fieldsQuery companyName() {
            startField("company_name");

            return this;
        }

        public suppliers_max_fieldsQuery contactName() {
            startField("contact_name");

            return this;
        }

        public suppliers_max_fieldsQuery contactTitle() {
            startField("contact_title");

            return this;
        }

        public suppliers_max_fieldsQuery country() {
            startField("country");

            return this;
        }

        public suppliers_max_fieldsQuery fax() {
            startField("fax");

            return this;
        }

        public suppliers_max_fieldsQuery homepage() {
            startField("homepage");

            return this;
        }

        public suppliers_max_fieldsQuery phone() {
            startField("phone");

            return this;
        }

        public suppliers_max_fieldsQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public suppliers_max_fieldsQuery region() {
            startField("region");

            return this;
        }

        public suppliers_max_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class suppliers_max_fields extends AbstractResponse<suppliers_max_fields> {
        public suppliers_max_fields() {
        }

        public suppliers_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "company_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "fax": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "homepage": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_max_fields";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public suppliers_max_fields setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public suppliers_max_fields setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public suppliers_max_fields setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getContactName() {
            return (String) get("contact_name");
        }

        public suppliers_max_fields setContactName(String arg) {
            optimisticData.put(getKey("contact_name"), arg);
            return this;
        }

        public String getContactTitle() {
            return (String) get("contact_title");
        }

        public suppliers_max_fields setContactTitle(String arg) {
            optimisticData.put(getKey("contact_title"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public suppliers_max_fields setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public String getFax() {
            return (String) get("fax");
        }

        public suppliers_max_fields setFax(String arg) {
            optimisticData.put(getKey("fax"), arg);
            return this;
        }

        public String getHomepage() {
            return (String) get("homepage");
        }

        public suppliers_max_fields setHomepage(String arg) {
            optimisticData.put(getKey("homepage"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public suppliers_max_fields setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public suppliers_max_fields setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public suppliers_max_fields setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public suppliers_max_fields setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "city": return false;

                case "company_name": return false;

                case "contact_name": return false;

                case "contact_title": return false;

                case "country": return false;

                case "fax": return false;

                case "homepage": return false;

                case "phone": return false;

                case "postal_code": return false;

                case "region": return false;

                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_max_order_by implements Serializable {
        private order_by address;

        private order_by city;

        private order_by companyName;

        private order_by contactName;

        private order_by contactTitle;

        private order_by country;

        private order_by fax;

        private order_by homepage;

        private order_by phone;

        private order_by postalCode;

        private order_by region;

        private order_by supplierId;

        public order_by getAddress() {
            return address;
        }

        public suppliers_max_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public suppliers_max_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCompanyName() {
            return companyName;
        }

        public suppliers_max_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getContactName() {
            return contactName;
        }

        public suppliers_max_order_by setContactName(order_by contactName) {
            this.contactName = contactName;
            return this;
        }

        public order_by getContactTitle() {
            return contactTitle;
        }

        public suppliers_max_order_by setContactTitle(order_by contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public suppliers_max_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getFax() {
            return fax;
        }

        public suppliers_max_order_by setFax(order_by fax) {
            this.fax = fax;
            return this;
        }

        public order_by getHomepage() {
            return homepage;
        }

        public suppliers_max_order_by setHomepage(order_by homepage) {
            this.homepage = homepage;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public suppliers_max_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public suppliers_max_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public suppliers_max_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_max_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                _queryBuilder.append(contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                _queryBuilder.append(contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                _queryBuilder.append(fax.toString());
            }

            if (homepage != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("homepage:");
                _queryBuilder.append(homepage.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_min_fieldsQueryDefinition {
        void define(suppliers_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class suppliers_min_fieldsQuery extends Query<suppliers_min_fieldsQuery> {
        suppliers_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_min_fieldsQuery address() {
            startField("address");

            return this;
        }

        public suppliers_min_fieldsQuery city() {
            startField("city");

            return this;
        }

        public suppliers_min_fieldsQuery companyName() {
            startField("company_name");

            return this;
        }

        public suppliers_min_fieldsQuery contactName() {
            startField("contact_name");

            return this;
        }

        public suppliers_min_fieldsQuery contactTitle() {
            startField("contact_title");

            return this;
        }

        public suppliers_min_fieldsQuery country() {
            startField("country");

            return this;
        }

        public suppliers_min_fieldsQuery fax() {
            startField("fax");

            return this;
        }

        public suppliers_min_fieldsQuery homepage() {
            startField("homepage");

            return this;
        }

        public suppliers_min_fieldsQuery phone() {
            startField("phone");

            return this;
        }

        public suppliers_min_fieldsQuery postalCode() {
            startField("postal_code");

            return this;
        }

        public suppliers_min_fieldsQuery region() {
            startField("region");

            return this;
        }

        public suppliers_min_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class suppliers_min_fields extends AbstractResponse<suppliers_min_fields> {
        public suppliers_min_fields() {
        }

        public suppliers_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "address": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "city": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "company_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "contact_title": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "country": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "fax": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "homepage": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "phone": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "postal_code": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "supplier_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_min_fields";
        }

        public String getAddress() {
            return (String) get("address");
        }

        public suppliers_min_fields setAddress(String arg) {
            optimisticData.put(getKey("address"), arg);
            return this;
        }

        public String getCity() {
            return (String) get("city");
        }

        public suppliers_min_fields setCity(String arg) {
            optimisticData.put(getKey("city"), arg);
            return this;
        }

        public String getCompanyName() {
            return (String) get("company_name");
        }

        public suppliers_min_fields setCompanyName(String arg) {
            optimisticData.put(getKey("company_name"), arg);
            return this;
        }

        public String getContactName() {
            return (String) get("contact_name");
        }

        public suppliers_min_fields setContactName(String arg) {
            optimisticData.put(getKey("contact_name"), arg);
            return this;
        }

        public String getContactTitle() {
            return (String) get("contact_title");
        }

        public suppliers_min_fields setContactTitle(String arg) {
            optimisticData.put(getKey("contact_title"), arg);
            return this;
        }

        public String getCountry() {
            return (String) get("country");
        }

        public suppliers_min_fields setCountry(String arg) {
            optimisticData.put(getKey("country"), arg);
            return this;
        }

        public String getFax() {
            return (String) get("fax");
        }

        public suppliers_min_fields setFax(String arg) {
            optimisticData.put(getKey("fax"), arg);
            return this;
        }

        public String getHomepage() {
            return (String) get("homepage");
        }

        public suppliers_min_fields setHomepage(String arg) {
            optimisticData.put(getKey("homepage"), arg);
            return this;
        }

        public String getPhone() {
            return (String) get("phone");
        }

        public suppliers_min_fields setPhone(String arg) {
            optimisticData.put(getKey("phone"), arg);
            return this;
        }

        public String getPostalCode() {
            return (String) get("postal_code");
        }

        public suppliers_min_fields setPostalCode(String arg) {
            optimisticData.put(getKey("postal_code"), arg);
            return this;
        }

        public String getRegion() {
            return (String) get("region");
        }

        public suppliers_min_fields setRegion(String arg) {
            optimisticData.put(getKey("region"), arg);
            return this;
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public suppliers_min_fields setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "address": return false;

                case "city": return false;

                case "company_name": return false;

                case "contact_name": return false;

                case "contact_title": return false;

                case "country": return false;

                case "fax": return false;

                case "homepage": return false;

                case "phone": return false;

                case "postal_code": return false;

                case "region": return false;

                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_min_order_by implements Serializable {
        private order_by address;

        private order_by city;

        private order_by companyName;

        private order_by contactName;

        private order_by contactTitle;

        private order_by country;

        private order_by fax;

        private order_by homepage;

        private order_by phone;

        private order_by postalCode;

        private order_by region;

        private order_by supplierId;

        public order_by getAddress() {
            return address;
        }

        public suppliers_min_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public suppliers_min_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCompanyName() {
            return companyName;
        }

        public suppliers_min_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getContactName() {
            return contactName;
        }

        public suppliers_min_order_by setContactName(order_by contactName) {
            this.contactName = contactName;
            return this;
        }

        public order_by getContactTitle() {
            return contactTitle;
        }

        public suppliers_min_order_by setContactTitle(order_by contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public suppliers_min_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getFax() {
            return fax;
        }

        public suppliers_min_order_by setFax(order_by fax) {
            this.fax = fax;
            return this;
        }

        public order_by getHomepage() {
            return homepage;
        }

        public suppliers_min_order_by setHomepage(order_by homepage) {
            this.homepage = homepage;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public suppliers_min_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public suppliers_min_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public suppliers_min_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_min_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                _queryBuilder.append(contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                _queryBuilder.append(contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                _queryBuilder.append(fax.toString());
            }

            if (homepage != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("homepage:");
                _queryBuilder.append(homepage.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_mutation_responseQueryDefinition {
        void define(suppliers_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "suppliers"
    */
    public static class suppliers_mutation_responseQuery extends Query<suppliers_mutation_responseQuery> {
        suppliers_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public suppliers_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public suppliers_mutation_responseQuery returning(suppliersQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new suppliersQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "suppliers"
    */
    public static class suppliers_mutation_response extends AbstractResponse<suppliers_mutation_response> {
        public suppliers_mutation_response() {
        }

        public suppliers_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<suppliers> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new suppliers(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public suppliers_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<suppliers> getReturning() {
            return (List<suppliers>) get("returning");
        }

        public suppliers_mutation_response setReturning(List<suppliers> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class suppliers_obj_rel_insert_input implements Serializable {
        private suppliers_insert_input data;

        private suppliers_on_conflict onConflict;

        public suppliers_obj_rel_insert_input(suppliers_insert_input data) {
            this.data = data;
        }

        public suppliers_insert_input getData() {
            return data;
        }

        public suppliers_obj_rel_insert_input setData(suppliers_insert_input data) {
            this.data = data;
            return this;
        }

        public suppliers_on_conflict getOnConflict() {
            return onConflict;
        }

        public suppliers_obj_rel_insert_input setOnConflict(suppliers_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class suppliers_on_conflict implements Serializable {
        private suppliers_constraint constraint;

        private List<suppliers_update_column> updateColumns;

        public suppliers_on_conflict(suppliers_constraint constraint, List<suppliers_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public suppliers_constraint getConstraint() {
            return constraint;
        }

        public suppliers_on_conflict setConstraint(suppliers_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<suppliers_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public suppliers_on_conflict setUpdateColumns(List<suppliers_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (suppliers_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class suppliers_order_by implements Serializable {
        private order_by address;

        private order_by city;

        private order_by companyName;

        private order_by contactName;

        private order_by contactTitle;

        private order_by country;

        private order_by fax;

        private order_by homepage;

        private order_by phone;

        private order_by postalCode;

        private order_by region;

        private order_by supplierId;

        public order_by getAddress() {
            return address;
        }

        public suppliers_order_by setAddress(order_by address) {
            this.address = address;
            return this;
        }

        public order_by getCity() {
            return city;
        }

        public suppliers_order_by setCity(order_by city) {
            this.city = city;
            return this;
        }

        public order_by getCompanyName() {
            return companyName;
        }

        public suppliers_order_by setCompanyName(order_by companyName) {
            this.companyName = companyName;
            return this;
        }

        public order_by getContactName() {
            return contactName;
        }

        public suppliers_order_by setContactName(order_by contactName) {
            this.contactName = contactName;
            return this;
        }

        public order_by getContactTitle() {
            return contactTitle;
        }

        public suppliers_order_by setContactTitle(order_by contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public order_by getCountry() {
            return country;
        }

        public suppliers_order_by setCountry(order_by country) {
            this.country = country;
            return this;
        }

        public order_by getFax() {
            return fax;
        }

        public suppliers_order_by setFax(order_by fax) {
            this.fax = fax;
            return this;
        }

        public order_by getHomepage() {
            return homepage;
        }

        public suppliers_order_by setHomepage(order_by homepage) {
            this.homepage = homepage;
            return this;
        }

        public order_by getPhone() {
            return phone;
        }

        public suppliers_order_by setPhone(order_by phone) {
            this.phone = phone;
            return this;
        }

        public order_by getPostalCode() {
            return postalCode;
        }

        public suppliers_order_by setPostalCode(order_by postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public order_by getRegion() {
            return region;
        }

        public suppliers_order_by setRegion(order_by region) {
            this.region = region;
            return this;
        }

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                _queryBuilder.append(address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                _queryBuilder.append(city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                _queryBuilder.append(companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                _queryBuilder.append(contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                _queryBuilder.append(contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                _queryBuilder.append(country.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                _queryBuilder.append(fax.toString());
            }

            if (homepage != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("homepage:");
                _queryBuilder.append(homepage.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                _queryBuilder.append(phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                _queryBuilder.append(postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                _queryBuilder.append(region.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "suppliers"
    */
    public enum suppliers_select_column {
        ADDRESS,

        CITY,

        COMPANY_NAME,

        CONTACT_NAME,

        CONTACT_TITLE,

        COUNTRY,

        FAX,

        HOMEPAGE,

        PHONE,

        POSTAL_CODE,

        REGION,

        SUPPLIER_ID,

        UNKNOWN_VALUE;

        public static suppliers_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "address": {
                    return ADDRESS;
                }

                case "city": {
                    return CITY;
                }

                case "company_name": {
                    return COMPANY_NAME;
                }

                case "contact_name": {
                    return CONTACT_NAME;
                }

                case "contact_title": {
                    return CONTACT_TITLE;
                }

                case "country": {
                    return COUNTRY;
                }

                case "fax": {
                    return FAX;
                }

                case "homepage": {
                    return HOMEPAGE;
                }

                case "phone": {
                    return PHONE;
                }

                case "postal_code": {
                    return POSTAL_CODE;
                }

                case "region": {
                    return REGION;
                }

                case "supplier_id": {
                    return SUPPLIER_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ADDRESS: {
                    return "address";
                }

                case CITY: {
                    return "city";
                }

                case COMPANY_NAME: {
                    return "company_name";
                }

                case CONTACT_NAME: {
                    return "contact_name";
                }

                case CONTACT_TITLE: {
                    return "contact_title";
                }

                case COUNTRY: {
                    return "country";
                }

                case FAX: {
                    return "fax";
                }

                case HOMEPAGE: {
                    return "homepage";
                }

                case PHONE: {
                    return "phone";
                }

                case POSTAL_CODE: {
                    return "postal_code";
                }

                case REGION: {
                    return "region";
                }

                case SUPPLIER_ID: {
                    return "supplier_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class suppliers_set_input implements Serializable {
        private String address;

        private String city;

        private String companyName;

        private String contactName;

        private String contactTitle;

        private String country;

        private String fax;

        private String homepage;

        private String phone;

        private String postalCode;

        private String region;

        private Integer supplierId;

        public String getAddress() {
            return address;
        }

        public suppliers_set_input setAddress(String address) {
            this.address = address;
            return this;
        }

        public String getCity() {
            return city;
        }

        public suppliers_set_input setCity(String city) {
            this.city = city;
            return this;
        }

        public String getCompanyName() {
            return companyName;
        }

        public suppliers_set_input setCompanyName(String companyName) {
            this.companyName = companyName;
            return this;
        }

        public String getContactName() {
            return contactName;
        }

        public suppliers_set_input setContactName(String contactName) {
            this.contactName = contactName;
            return this;
        }

        public String getContactTitle() {
            return contactTitle;
        }

        public suppliers_set_input setContactTitle(String contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public String getCountry() {
            return country;
        }

        public suppliers_set_input setCountry(String country) {
            this.country = country;
            return this;
        }

        public String getFax() {
            return fax;
        }

        public suppliers_set_input setFax(String fax) {
            this.fax = fax;
            return this;
        }

        public String getHomepage() {
            return homepage;
        }

        public suppliers_set_input setHomepage(String homepage) {
            this.homepage = homepage;
            return this;
        }

        public String getPhone() {
            return phone;
        }

        public suppliers_set_input setPhone(String phone) {
            this.phone = phone;
            return this;
        }

        public String getPostalCode() {
            return postalCode;
        }

        public suppliers_set_input setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public String getRegion() {
            return region;
        }

        public suppliers_set_input setRegion(String region) {
            this.region = region;
            return this;
        }

        public Integer getSupplierId() {
            return supplierId;
        }

        public suppliers_set_input setSupplierId(Integer supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (address != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("address:");
                Query.appendQuotedString(_queryBuilder, address.toString());
            }

            if (city != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("city:");
                Query.appendQuotedString(_queryBuilder, city.toString());
            }

            if (companyName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("company_name:");
                Query.appendQuotedString(_queryBuilder, companyName.toString());
            }

            if (contactName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_name:");
                Query.appendQuotedString(_queryBuilder, contactName.toString());
            }

            if (contactTitle != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("contact_title:");
                Query.appendQuotedString(_queryBuilder, contactTitle.toString());
            }

            if (country != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("country:");
                Query.appendQuotedString(_queryBuilder, country.toString());
            }

            if (fax != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("fax:");
                Query.appendQuotedString(_queryBuilder, fax.toString());
            }

            if (homepage != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("homepage:");
                Query.appendQuotedString(_queryBuilder, homepage.toString());
            }

            if (phone != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("phone:");
                Query.appendQuotedString(_queryBuilder, phone.toString());
            }

            if (postalCode != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("postal_code:");
                Query.appendQuotedString(_queryBuilder, postalCode.toString());
            }

            if (region != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region:");
                Query.appendQuotedString(_queryBuilder, region.toString());
            }

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId);
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_stddev_fieldsQueryDefinition {
        void define(suppliers_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class suppliers_stddev_fieldsQuery extends Query<suppliers_stddev_fieldsQuery> {
        suppliers_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_stddev_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class suppliers_stddev_fields extends AbstractResponse<suppliers_stddev_fields> {
        public suppliers_stddev_fields() {
        }

        public suppliers_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_stddev_fields";
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public suppliers_stddev_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_stddev_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_stddev_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_stddev_pop_fieldsQueryDefinition {
        void define(suppliers_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class suppliers_stddev_pop_fieldsQuery extends Query<suppliers_stddev_pop_fieldsQuery> {
        suppliers_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_stddev_pop_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class suppliers_stddev_pop_fields extends AbstractResponse<suppliers_stddev_pop_fields> {
        public suppliers_stddev_pop_fields() {
        }

        public suppliers_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_stddev_pop_fields";
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public suppliers_stddev_pop_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_stddev_pop_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_stddev_pop_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_stddev_samp_fieldsQueryDefinition {
        void define(suppliers_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class suppliers_stddev_samp_fieldsQuery extends Query<suppliers_stddev_samp_fieldsQuery> {
        suppliers_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_stddev_samp_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class suppliers_stddev_samp_fields extends AbstractResponse<suppliers_stddev_samp_fields> {
        public suppliers_stddev_samp_fields() {
        }

        public suppliers_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_stddev_samp_fields";
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public suppliers_stddev_samp_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_stddev_samp_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_stddev_samp_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_sum_fieldsQueryDefinition {
        void define(suppliers_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class suppliers_sum_fieldsQuery extends Query<suppliers_sum_fieldsQuery> {
        suppliers_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_sum_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class suppliers_sum_fields extends AbstractResponse<suppliers_sum_fields> {
        public suppliers_sum_fields() {
        }

        public suppliers_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_sum_fields";
        }

        public Integer getSupplierId() {
            return (Integer) get("supplier_id");
        }

        public suppliers_sum_fields setSupplierId(Integer arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_sum_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_sum_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "suppliers"
    */
    public enum suppliers_update_column {
        ADDRESS,

        CITY,

        COMPANY_NAME,

        CONTACT_NAME,

        CONTACT_TITLE,

        COUNTRY,

        FAX,

        HOMEPAGE,

        PHONE,

        POSTAL_CODE,

        REGION,

        SUPPLIER_ID,

        UNKNOWN_VALUE;

        public static suppliers_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "address": {
                    return ADDRESS;
                }

                case "city": {
                    return CITY;
                }

                case "company_name": {
                    return COMPANY_NAME;
                }

                case "contact_name": {
                    return CONTACT_NAME;
                }

                case "contact_title": {
                    return CONTACT_TITLE;
                }

                case "country": {
                    return COUNTRY;
                }

                case "fax": {
                    return FAX;
                }

                case "homepage": {
                    return HOMEPAGE;
                }

                case "phone": {
                    return PHONE;
                }

                case "postal_code": {
                    return POSTAL_CODE;
                }

                case "region": {
                    return REGION;
                }

                case "supplier_id": {
                    return SUPPLIER_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case ADDRESS: {
                    return "address";
                }

                case CITY: {
                    return "city";
                }

                case COMPANY_NAME: {
                    return "company_name";
                }

                case CONTACT_NAME: {
                    return "contact_name";
                }

                case CONTACT_TITLE: {
                    return "contact_title";
                }

                case COUNTRY: {
                    return "country";
                }

                case FAX: {
                    return "fax";
                }

                case HOMEPAGE: {
                    return "homepage";
                }

                case PHONE: {
                    return "phone";
                }

                case POSTAL_CODE: {
                    return "postal_code";
                }

                case REGION: {
                    return "region";
                }

                case SUPPLIER_ID: {
                    return "supplier_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface suppliers_var_pop_fieldsQueryDefinition {
        void define(suppliers_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class suppliers_var_pop_fieldsQuery extends Query<suppliers_var_pop_fieldsQuery> {
        suppliers_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_var_pop_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class suppliers_var_pop_fields extends AbstractResponse<suppliers_var_pop_fields> {
        public suppliers_var_pop_fields() {
        }

        public suppliers_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_var_pop_fields";
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public suppliers_var_pop_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_var_pop_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_var_pop_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_var_samp_fieldsQueryDefinition {
        void define(suppliers_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class suppliers_var_samp_fieldsQuery extends Query<suppliers_var_samp_fieldsQuery> {
        suppliers_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_var_samp_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class suppliers_var_samp_fields extends AbstractResponse<suppliers_var_samp_fields> {
        public suppliers_var_samp_fields() {
        }

        public suppliers_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_var_samp_fields";
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public suppliers_var_samp_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_var_samp_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_var_samp_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface suppliers_variance_fieldsQueryDefinition {
        void define(suppliers_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class suppliers_variance_fieldsQuery extends Query<suppliers_variance_fieldsQuery> {
        suppliers_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public suppliers_variance_fieldsQuery supplierId() {
            startField("supplier_id");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class suppliers_variance_fields extends AbstractResponse<suppliers_variance_fields> {
        public suppliers_variance_fields() {
        }

        public suppliers_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "supplier_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "suppliers_variance_fields";
        }

        public Double getSupplierId() {
            return (Double) get("supplier_id");
        }

        public suppliers_variance_fields setSupplierId(Double arg) {
            optimisticData.put(getKey("supplier_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "supplier_id": return false;

                default: return false;
            }
        }
    }

    public static class suppliers_variance_order_by implements Serializable {
        private order_by supplierId;

        public order_by getSupplierId() {
            return supplierId;
        }

        public suppliers_variance_order_by setSupplierId(order_by supplierId) {
            this.supplierId = supplierId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (supplierId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("supplier_id:");
                _queryBuilder.append(supplierId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territoriesQueryDefinition {
        void define(territoriesQuery _queryBuilder);
    }

    /**
    * columns and relationships of "territories"
    */
    public static class territoriesQuery extends Query<territoriesQuery> {
        territoriesQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territoriesQuery regionId() {
            startField("region_id");

            return this;
        }

        public territoriesQuery territoryDescription() {
            startField("territory_description");

            return this;
        }

        public territoriesQuery territoryId() {
            startField("territory_id");

            return this;
        }
    }

    /**
    * columns and relationships of "territories"
    */
    public static class territories extends AbstractResponse<territories> {
        public territories() {
        }

        public territories(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "territory_description": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "territory_id": {
                        responseData.put(key, jsonAsString(field.getValue(), key));

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories";
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public territories setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public String getTerritoryDescription() {
            return (String) get("territory_description");
        }

        public territories setTerritoryDescription(String arg) {
            optimisticData.put(getKey("territory_description"), arg);
            return this;
        }

        public String getTerritoryId() {
            return (String) get("territory_id");
        }

        public territories setTerritoryId(String arg) {
            optimisticData.put(getKey("territory_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                case "territory_description": return false;

                case "territory_id": return false;

                default: return false;
            }
        }
    }

    public interface territories_aggregateQueryDefinition {
        void define(territories_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "territories"
    */
    public static class territories_aggregateQuery extends Query<territories_aggregateQuery> {
        territories_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_aggregateQuery aggregate(territories_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new territories_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregateQuery nodes(territoriesQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "territories"
    */
    public static class territories_aggregate extends AbstractResponse<territories_aggregate> {
        public territories_aggregate() {
        }

        public territories_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        territories_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_aggregate";
        }

        public territories_aggregate_fields getAggregate() {
            return (territories_aggregate_fields) get("aggregate");
        }

        public territories_aggregate setAggregate(territories_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<territories> getNodes() {
            return (List<territories>) get("nodes");
        }

        public territories_aggregate setNodes(List<territories> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface territories_aggregate_fieldsQueryDefinition {
        void define(territories_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "territories"
    */
    public static class territories_aggregate_fieldsQuery extends Query<territories_aggregate_fieldsQuery> {
        territories_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_aggregate_fieldsQuery avg(territories_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new territories_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<territories_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (territories_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public territories_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public territories_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public territories_aggregate_fieldsQuery max(territories_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new territories_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery min(territories_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new territories_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery stddev(territories_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new territories_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery stddevPop(territories_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new territories_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery stddevSamp(territories_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new territories_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery sum(territories_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new territories_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery varPop(territories_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new territories_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery varSamp(territories_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new territories_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public territories_aggregate_fieldsQuery variance(territories_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new territories_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "territories"
    */
    public static class territories_aggregate_fields extends AbstractResponse<territories_aggregate_fields> {
        public territories_aggregate_fields() {
        }

        public territories_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        territories_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        territories_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        territories_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        territories_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        territories_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        territories_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        territories_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        territories_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        territories_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        territories_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new territories_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_aggregate_fields";
        }

        public territories_avg_fields getAvg() {
            return (territories_avg_fields) get("avg");
        }

        public territories_aggregate_fields setAvg(territories_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public territories_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public territories_max_fields getMax() {
            return (territories_max_fields) get("max");
        }

        public territories_aggregate_fields setMax(territories_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public territories_min_fields getMin() {
            return (territories_min_fields) get("min");
        }

        public territories_aggregate_fields setMin(territories_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public territories_stddev_fields getStddev() {
            return (territories_stddev_fields) get("stddev");
        }

        public territories_aggregate_fields setStddev(territories_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public territories_stddev_pop_fields getStddevPop() {
            return (territories_stddev_pop_fields) get("stddev_pop");
        }

        public territories_aggregate_fields setStddevPop(territories_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public territories_stddev_samp_fields getStddevSamp() {
            return (territories_stddev_samp_fields) get("stddev_samp");
        }

        public territories_aggregate_fields setStddevSamp(territories_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public territories_sum_fields getSum() {
            return (territories_sum_fields) get("sum");
        }

        public territories_aggregate_fields setSum(territories_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public territories_var_pop_fields getVarPop() {
            return (territories_var_pop_fields) get("var_pop");
        }

        public territories_aggregate_fields setVarPop(territories_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public territories_var_samp_fields getVarSamp() {
            return (territories_var_samp_fields) get("var_samp");
        }

        public territories_aggregate_fields setVarSamp(territories_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public territories_variance_fields getVariance() {
            return (territories_variance_fields) get("variance");
        }

        public territories_aggregate_fields setVariance(territories_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class territories_aggregate_order_by implements Serializable {
        private territories_avg_order_by avg;

        private order_by count;

        private territories_max_order_by max;

        private territories_min_order_by min;

        private territories_stddev_order_by stddev;

        private territories_stddev_pop_order_by stddevPop;

        private territories_stddev_samp_order_by stddevSamp;

        private territories_sum_order_by sum;

        private territories_var_pop_order_by varPop;

        private territories_var_samp_order_by varSamp;

        private territories_variance_order_by variance;

        public territories_avg_order_by getAvg() {
            return avg;
        }

        public territories_aggregate_order_by setAvg(territories_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public territories_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public territories_max_order_by getMax() {
            return max;
        }

        public territories_aggregate_order_by setMax(territories_max_order_by max) {
            this.max = max;
            return this;
        }

        public territories_min_order_by getMin() {
            return min;
        }

        public territories_aggregate_order_by setMin(territories_min_order_by min) {
            this.min = min;
            return this;
        }

        public territories_stddev_order_by getStddev() {
            return stddev;
        }

        public territories_aggregate_order_by setStddev(territories_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public territories_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public territories_aggregate_order_by setStddevPop(territories_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public territories_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public territories_aggregate_order_by setStddevSamp(territories_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public territories_sum_order_by getSum() {
            return sum;
        }

        public territories_aggregate_order_by setSum(territories_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public territories_var_pop_order_by getVarPop() {
            return varPop;
        }

        public territories_aggregate_order_by setVarPop(territories_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public territories_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public territories_aggregate_order_by setVarSamp(territories_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public territories_variance_order_by getVariance() {
            return variance;
        }

        public territories_aggregate_order_by setVariance(territories_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class territories_arr_rel_insert_input implements Serializable {
        private List<territories_insert_input> data;

        private territories_on_conflict onConflict;

        public territories_arr_rel_insert_input(List<territories_insert_input> data) {
            this.data = data;
        }

        public List<territories_insert_input> getData() {
            return data;
        }

        public territories_arr_rel_insert_input setData(List<territories_insert_input> data) {
            this.data = data;
            return this;
        }

        public territories_on_conflict getOnConflict() {
            return onConflict;
        }

        public territories_arr_rel_insert_input setOnConflict(territories_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (territories_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_avg_fieldsQueryDefinition {
        void define(territories_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class territories_avg_fieldsQuery extends Query<territories_avg_fieldsQuery> {
        territories_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_avg_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class territories_avg_fields extends AbstractResponse<territories_avg_fields> {
        public territories_avg_fields() {
        }

        public territories_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_avg_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public territories_avg_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_avg_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_avg_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class territories_bool_exp implements Serializable {
        private List<territories_bool_exp> And;

        private territories_bool_exp Not;

        private List<territories_bool_exp> Or;

        private Int_comparison_exp regionId;

        private bpchar_comparison_exp territoryDescription;

        private varchar_comparison_exp territoryId;

        public List<territories_bool_exp> getAnd() {
            return And;
        }

        public territories_bool_exp setAnd(List<territories_bool_exp> And) {
            this.And = And;
            return this;
        }

        public territories_bool_exp getNot() {
            return Not;
        }

        public territories_bool_exp setNot(territories_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<territories_bool_exp> getOr() {
            return Or;
        }

        public territories_bool_exp setOr(List<territories_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public Int_comparison_exp getRegionId() {
            return regionId;
        }

        public territories_bool_exp setRegionId(Int_comparison_exp regionId) {
            this.regionId = regionId;
            return this;
        }

        public bpchar_comparison_exp getTerritoryDescription() {
            return territoryDescription;
        }

        public territories_bool_exp setTerritoryDescription(bpchar_comparison_exp territoryDescription) {
            this.territoryDescription = territoryDescription;
            return this;
        }

        public varchar_comparison_exp getTerritoryId() {
            return territoryId;
        }

        public territories_bool_exp setTerritoryId(varchar_comparison_exp territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (territories_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (territories_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                regionId.appendTo(_queryBuilder);
            }

            if (territoryDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_description:");
                territoryDescription.appendTo(_queryBuilder);
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                territoryId.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "territories"
    */
    public enum territories_constraint {
        PK_TERRITORIES,

        UNKNOWN_VALUE;

        public static territories_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_territories": {
                    return PK_TERRITORIES;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_TERRITORIES: {
                    return "pk_territories";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class territories_inc_input implements Serializable {
        private Integer regionId;

        public Integer getRegionId() {
            return regionId;
        }

        public territories_inc_input setRegionId(Integer regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId);
            }

            _queryBuilder.append('}');
        }
    }

    public static class territories_insert_input implements Serializable {
        private Integer regionId;

        private String territoryDescription;

        private String territoryId;

        public Integer getRegionId() {
            return regionId;
        }

        public territories_insert_input setRegionId(Integer regionId) {
            this.regionId = regionId;
            return this;
        }

        public String getTerritoryDescription() {
            return territoryDescription;
        }

        public territories_insert_input setTerritoryDescription(String territoryDescription) {
            this.territoryDescription = territoryDescription;
            return this;
        }

        public String getTerritoryId() {
            return territoryId;
        }

        public territories_insert_input setTerritoryId(String territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId);
            }

            if (territoryDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_description:");
                Query.appendQuotedString(_queryBuilder, territoryDescription.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                Query.appendQuotedString(_queryBuilder, territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_max_fieldsQueryDefinition {
        void define(territories_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class territories_max_fieldsQuery extends Query<territories_max_fieldsQuery> {
        territories_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_max_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }

        public territories_max_fieldsQuery territoryId() {
            startField("territory_id");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class territories_max_fields extends AbstractResponse<territories_max_fields> {
        public territories_max_fields() {
        }

        public territories_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "territory_id": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_max_fields";
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public territories_max_fields setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public String getTerritoryId() {
            return (String) get("territory_id");
        }

        public territories_max_fields setTerritoryId(String arg) {
            optimisticData.put(getKey("territory_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                case "territory_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_max_order_by implements Serializable {
        private order_by regionId;

        private order_by territoryId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_max_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public order_by getTerritoryId() {
            return territoryId;
        }

        public territories_max_order_by setTerritoryId(order_by territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                _queryBuilder.append(territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_min_fieldsQueryDefinition {
        void define(territories_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class territories_min_fieldsQuery extends Query<territories_min_fieldsQuery> {
        territories_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_min_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }

        public territories_min_fieldsQuery territoryId() {
            startField("territory_id");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class territories_min_fields extends AbstractResponse<territories_min_fields> {
        public territories_min_fields() {
        }

        public territories_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "territory_id": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_min_fields";
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public territories_min_fields setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public String getTerritoryId() {
            return (String) get("territory_id");
        }

        public territories_min_fields setTerritoryId(String arg) {
            optimisticData.put(getKey("territory_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                case "territory_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_min_order_by implements Serializable {
        private order_by regionId;

        private order_by territoryId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_min_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public order_by getTerritoryId() {
            return territoryId;
        }

        public territories_min_order_by setTerritoryId(order_by territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                _queryBuilder.append(territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_mutation_responseQueryDefinition {
        void define(territories_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "territories"
    */
    public static class territories_mutation_responseQuery extends Query<territories_mutation_responseQuery> {
        territories_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public territories_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public territories_mutation_responseQuery returning(territoriesQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new territoriesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "territories"
    */
    public static class territories_mutation_response extends AbstractResponse<territories_mutation_response> {
        public territories_mutation_response() {
        }

        public territories_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<territories> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new territories(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public territories_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<territories> getReturning() {
            return (List<territories>) get("returning");
        }

        public territories_mutation_response setReturning(List<territories> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class territories_obj_rel_insert_input implements Serializable {
        private territories_insert_input data;

        private territories_on_conflict onConflict;

        public territories_obj_rel_insert_input(territories_insert_input data) {
            this.data = data;
        }

        public territories_insert_input getData() {
            return data;
        }

        public territories_obj_rel_insert_input setData(territories_insert_input data) {
            this.data = data;
            return this;
        }

        public territories_on_conflict getOnConflict() {
            return onConflict;
        }

        public territories_obj_rel_insert_input setOnConflict(territories_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class territories_on_conflict implements Serializable {
        private territories_constraint constraint;

        private List<territories_update_column> updateColumns;

        public territories_on_conflict(territories_constraint constraint, List<territories_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public territories_constraint getConstraint() {
            return constraint;
        }

        public territories_on_conflict setConstraint(territories_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<territories_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public territories_on_conflict setUpdateColumns(List<territories_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (territories_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class territories_order_by implements Serializable {
        private order_by regionId;

        private order_by territoryDescription;

        private order_by territoryId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public order_by getTerritoryDescription() {
            return territoryDescription;
        }

        public territories_order_by setTerritoryDescription(order_by territoryDescription) {
            this.territoryDescription = territoryDescription;
            return this;
        }

        public order_by getTerritoryId() {
            return territoryId;
        }

        public territories_order_by setTerritoryId(order_by territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            if (territoryDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_description:");
                _queryBuilder.append(territoryDescription.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                _queryBuilder.append(territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "territories"
    */
    public enum territories_select_column {
        REGION_ID,

        TERRITORY_DESCRIPTION,

        TERRITORY_ID,

        UNKNOWN_VALUE;

        public static territories_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "region_id": {
                    return REGION_ID;
                }

                case "territory_description": {
                    return TERRITORY_DESCRIPTION;
                }

                case "territory_id": {
                    return TERRITORY_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case REGION_ID: {
                    return "region_id";
                }

                case TERRITORY_DESCRIPTION: {
                    return "territory_description";
                }

                case TERRITORY_ID: {
                    return "territory_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class territories_set_input implements Serializable {
        private Integer regionId;

        private String territoryDescription;

        private String territoryId;

        public Integer getRegionId() {
            return regionId;
        }

        public territories_set_input setRegionId(Integer regionId) {
            this.regionId = regionId;
            return this;
        }

        public String getTerritoryDescription() {
            return territoryDescription;
        }

        public territories_set_input setTerritoryDescription(String territoryDescription) {
            this.territoryDescription = territoryDescription;
            return this;
        }

        public String getTerritoryId() {
            return territoryId;
        }

        public territories_set_input setTerritoryId(String territoryId) {
            this.territoryId = territoryId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId);
            }

            if (territoryDescription != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_description:");
                Query.appendQuotedString(_queryBuilder, territoryDescription.toString());
            }

            if (territoryId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("territory_id:");
                Query.appendQuotedString(_queryBuilder, territoryId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_stddev_fieldsQueryDefinition {
        void define(territories_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class territories_stddev_fieldsQuery extends Query<territories_stddev_fieldsQuery> {
        territories_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_stddev_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class territories_stddev_fields extends AbstractResponse<territories_stddev_fields> {
        public territories_stddev_fields() {
        }

        public territories_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_stddev_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public territories_stddev_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_stddev_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_stddev_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_stddev_pop_fieldsQueryDefinition {
        void define(territories_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class territories_stddev_pop_fieldsQuery extends Query<territories_stddev_pop_fieldsQuery> {
        territories_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_stddev_pop_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class territories_stddev_pop_fields extends AbstractResponse<territories_stddev_pop_fields> {
        public territories_stddev_pop_fields() {
        }

        public territories_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_stddev_pop_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public territories_stddev_pop_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_stddev_pop_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_stddev_pop_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_stddev_samp_fieldsQueryDefinition {
        void define(territories_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class territories_stddev_samp_fieldsQuery extends Query<territories_stddev_samp_fieldsQuery> {
        territories_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_stddev_samp_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class territories_stddev_samp_fields extends AbstractResponse<territories_stddev_samp_fields> {
        public territories_stddev_samp_fields() {
        }

        public territories_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_stddev_samp_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public territories_stddev_samp_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_stddev_samp_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_stddev_samp_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_sum_fieldsQueryDefinition {
        void define(territories_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class territories_sum_fieldsQuery extends Query<territories_sum_fieldsQuery> {
        territories_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_sum_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class territories_sum_fields extends AbstractResponse<territories_sum_fields> {
        public territories_sum_fields() {
        }

        public territories_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_sum_fields";
        }

        public Integer getRegionId() {
            return (Integer) get("region_id");
        }

        public territories_sum_fields setRegionId(Integer arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_sum_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_sum_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "territories"
    */
    public enum territories_update_column {
        REGION_ID,

        TERRITORY_DESCRIPTION,

        TERRITORY_ID,

        UNKNOWN_VALUE;

        public static territories_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "region_id": {
                    return REGION_ID;
                }

                case "territory_description": {
                    return TERRITORY_DESCRIPTION;
                }

                case "territory_id": {
                    return TERRITORY_ID;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case REGION_ID: {
                    return "region_id";
                }

                case TERRITORY_DESCRIPTION: {
                    return "territory_description";
                }

                case TERRITORY_ID: {
                    return "territory_id";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface territories_var_pop_fieldsQueryDefinition {
        void define(territories_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class territories_var_pop_fieldsQuery extends Query<territories_var_pop_fieldsQuery> {
        territories_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_var_pop_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class territories_var_pop_fields extends AbstractResponse<territories_var_pop_fields> {
        public territories_var_pop_fields() {
        }

        public territories_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_var_pop_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public territories_var_pop_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_var_pop_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_var_pop_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_var_samp_fieldsQueryDefinition {
        void define(territories_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class territories_var_samp_fieldsQuery extends Query<territories_var_samp_fieldsQuery> {
        territories_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_var_samp_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class territories_var_samp_fields extends AbstractResponse<territories_var_samp_fields> {
        public territories_var_samp_fields() {
        }

        public territories_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_var_samp_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public territories_var_samp_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_var_samp_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_var_samp_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface territories_variance_fieldsQueryDefinition {
        void define(territories_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class territories_variance_fieldsQuery extends Query<territories_variance_fieldsQuery> {
        territories_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public territories_variance_fieldsQuery regionId() {
            startField("region_id");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class territories_variance_fields extends AbstractResponse<territories_variance_fields> {
        public territories_variance_fields() {
        }

        public territories_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "region_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "territories_variance_fields";
        }

        public Double getRegionId() {
            return (Double) get("region_id");
        }

        public territories_variance_fields setRegionId(Double arg) {
            optimisticData.put(getKey("region_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "region_id": return false;

                default: return false;
            }
        }
    }

    public static class territories_variance_order_by implements Serializable {
        private order_by regionId;

        public order_by getRegionId() {
            return regionId;
        }

        public territories_variance_order_by setRegionId(order_by regionId) {
            this.regionId = regionId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (regionId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("region_id:");
                _queryBuilder.append(regionId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class text_comparison_exp implements Serializable {
        private String Eq;

        private String Gt;

        private String Gte;

        private String Ilike;

        private List<String> In;

        private Boolean IsNull;

        private String Like;

        private String Lt;

        private String Lte;

        private String Neq;

        private String Nilike;

        private List<String> Nin;

        private String Nlike;

        private String Nsimilar;

        private String Similar;

        public String getEq() {
            return Eq;
        }

        public text_comparison_exp setEq(String Eq) {
            this.Eq = Eq;
            return this;
        }

        public String getGt() {
            return Gt;
        }

        public text_comparison_exp setGt(String Gt) {
            this.Gt = Gt;
            return this;
        }

        public String getGte() {
            return Gte;
        }

        public text_comparison_exp setGte(String Gte) {
            this.Gte = Gte;
            return this;
        }

        public String getIlike() {
            return Ilike;
        }

        public text_comparison_exp setIlike(String Ilike) {
            this.Ilike = Ilike;
            return this;
        }

        public List<String> getIn() {
            return In;
        }

        public text_comparison_exp setIn(List<String> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public text_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public String getLike() {
            return Like;
        }

        public text_comparison_exp setLike(String Like) {
            this.Like = Like;
            return this;
        }

        public String getLt() {
            return Lt;
        }

        public text_comparison_exp setLt(String Lt) {
            this.Lt = Lt;
            return this;
        }

        public String getLte() {
            return Lte;
        }

        public text_comparison_exp setLte(String Lte) {
            this.Lte = Lte;
            return this;
        }

        public String getNeq() {
            return Neq;
        }

        public text_comparison_exp setNeq(String Neq) {
            this.Neq = Neq;
            return this;
        }

        public String getNilike() {
            return Nilike;
        }

        public text_comparison_exp setNilike(String Nilike) {
            this.Nilike = Nilike;
            return this;
        }

        public List<String> getNin() {
            return Nin;
        }

        public text_comparison_exp setNin(List<String> Nin) {
            this.Nin = Nin;
            return this;
        }

        public String getNlike() {
            return Nlike;
        }

        public text_comparison_exp setNlike(String Nlike) {
            this.Nlike = Nlike;
            return this;
        }

        public String getNsimilar() {
            return Nsimilar;
        }

        public text_comparison_exp setNsimilar(String Nsimilar) {
            this.Nsimilar = Nsimilar;
            return this;
        }

        public String getSimilar() {
            return Similar;
        }

        public text_comparison_exp setSimilar(String Similar) {
            this.Similar = Similar;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                Query.appendQuotedString(_queryBuilder, Eq.toString());
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                Query.appendQuotedString(_queryBuilder, Gt.toString());
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                Query.appendQuotedString(_queryBuilder, Gte.toString());
            }

            if (Ilike != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_ilike:");
                Query.appendQuotedString(_queryBuilder, Ilike.toString());
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Like != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_like:");
                Query.appendQuotedString(_queryBuilder, Like.toString());
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                Query.appendQuotedString(_queryBuilder, Lt.toString());
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                Query.appendQuotedString(_queryBuilder, Lte.toString());
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                Query.appendQuotedString(_queryBuilder, Neq.toString());
            }

            if (Nilike != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nilike:");
                Query.appendQuotedString(_queryBuilder, Nilike.toString());
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            if (Nlike != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nlike:");
                Query.appendQuotedString(_queryBuilder, Nlike.toString());
            }

            if (Nsimilar != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nsimilar:");
                Query.appendQuotedString(_queryBuilder, Nsimilar.toString());
            }

            if (Similar != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_similar:");
                Query.appendQuotedString(_queryBuilder, Similar.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_statesQueryDefinition {
        void define(us_statesQuery _queryBuilder);
    }

    /**
    * columns and relationships of "us_states"
    */
    public static class us_statesQuery extends Query<us_statesQuery> {
        us_statesQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_statesQuery stateAbbr() {
            startField("state_abbr");

            return this;
        }

        public us_statesQuery stateId() {
            startField("state_id");

            return this;
        }

        public us_statesQuery stateName() {
            startField("state_name");

            return this;
        }

        public us_statesQuery stateRegion() {
            startField("state_region");

            return this;
        }
    }

    /**
    * columns and relationships of "us_states"
    */
    public static class us_states extends AbstractResponse<us_states> {
        public us_states() {
        }

        public us_states(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_abbr": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_id": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "state_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states";
        }

        public String getStateAbbr() {
            return (String) get("state_abbr");
        }

        public us_states setStateAbbr(String arg) {
            optimisticData.put(getKey("state_abbr"), arg);
            return this;
        }

        public Integer getStateId() {
            return (Integer) get("state_id");
        }

        public us_states setStateId(Integer arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public String getStateName() {
            return (String) get("state_name");
        }

        public us_states setStateName(String arg) {
            optimisticData.put(getKey("state_name"), arg);
            return this;
        }

        public String getStateRegion() {
            return (String) get("state_region");
        }

        public us_states setStateRegion(String arg) {
            optimisticData.put(getKey("state_region"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_abbr": return false;

                case "state_id": return false;

                case "state_name": return false;

                case "state_region": return false;

                default: return false;
            }
        }
    }

    public interface us_states_aggregateQueryDefinition {
        void define(us_states_aggregateQuery _queryBuilder);
    }

    /**
    * aggregated selection of "us_states"
    */
    public static class us_states_aggregateQuery extends Query<us_states_aggregateQuery> {
        us_states_aggregateQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_aggregateQuery aggregate(us_states_aggregate_fieldsQueryDefinition queryDef) {
            startField("aggregate");

            _queryBuilder.append('{');
            queryDef.define(new us_states_aggregate_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregateQuery nodes(us_statesQueryDefinition queryDef) {
            startField("nodes");

            _queryBuilder.append('{');
            queryDef.define(new us_statesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregated selection of "us_states"
    */
    public static class us_states_aggregate extends AbstractResponse<us_states_aggregate> {
        public us_states_aggregate() {
        }

        public us_states_aggregate(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "aggregate": {
                        us_states_aggregate_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_aggregate_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "nodes": {
                        List<us_states> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new us_states(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_aggregate";
        }

        public us_states_aggregate_fields getAggregate() {
            return (us_states_aggregate_fields) get("aggregate");
        }

        public us_states_aggregate setAggregate(us_states_aggregate_fields arg) {
            optimisticData.put(getKey("aggregate"), arg);
            return this;
        }

        public List<us_states> getNodes() {
            return (List<us_states>) get("nodes");
        }

        public us_states_aggregate setNodes(List<us_states> arg) {
            optimisticData.put(getKey("nodes"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "aggregate": return true;

                case "nodes": return true;

                default: return false;
            }
        }
    }

    public interface us_states_aggregate_fieldsQueryDefinition {
        void define(us_states_aggregate_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate fields of "us_states"
    */
    public static class us_states_aggregate_fieldsQuery extends Query<us_states_aggregate_fieldsQuery> {
        us_states_aggregate_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_aggregate_fieldsQuery avg(us_states_avg_fieldsQueryDefinition queryDef) {
            startField("avg");

            _queryBuilder.append('{');
            queryDef.define(new us_states_avg_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public class CountArguments extends Arguments {
            CountArguments(StringBuilder _queryBuilder) {
                super(_queryBuilder, true);
            }

            public CountArguments columns(List<us_states_select_column> value) {
                if (value != null) {
                    startArgument("columns");
                    _queryBuilder.append('[');

                    String listSeperator1 = "";
                    for (us_states_select_column item1 : value) {
                        _queryBuilder.append(listSeperator1);
                        listSeperator1 = ",";
                        _queryBuilder.append(item1.toString());
                    }
                    _queryBuilder.append(']');
                }
                return this;
            }

            public CountArguments distinct(Boolean value) {
                if (value != null) {
                    startArgument("distinct");
                    _queryBuilder.append(value);
                }
                return this;
            }
        }

        public interface CountArgumentsDefinition {
            void define(CountArguments args);
        }

        public us_states_aggregate_fieldsQuery count() {
            return count(args -> {});
        }

        public us_states_aggregate_fieldsQuery count(CountArgumentsDefinition argsDef) {
            startField("count");

            CountArguments args = new CountArguments(_queryBuilder);
            argsDef.define(args);
            CountArguments.end(args);

            return this;
        }

        public us_states_aggregate_fieldsQuery max(us_states_max_fieldsQueryDefinition queryDef) {
            startField("max");

            _queryBuilder.append('{');
            queryDef.define(new us_states_max_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery min(us_states_min_fieldsQueryDefinition queryDef) {
            startField("min");

            _queryBuilder.append('{');
            queryDef.define(new us_states_min_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery stddev(us_states_stddev_fieldsQueryDefinition queryDef) {
            startField("stddev");

            _queryBuilder.append('{');
            queryDef.define(new us_states_stddev_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery stddevPop(us_states_stddev_pop_fieldsQueryDefinition queryDef) {
            startField("stddev_pop");

            _queryBuilder.append('{');
            queryDef.define(new us_states_stddev_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery stddevSamp(us_states_stddev_samp_fieldsQueryDefinition queryDef) {
            startField("stddev_samp");

            _queryBuilder.append('{');
            queryDef.define(new us_states_stddev_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery sum(us_states_sum_fieldsQueryDefinition queryDef) {
            startField("sum");

            _queryBuilder.append('{');
            queryDef.define(new us_states_sum_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery varPop(us_states_var_pop_fieldsQueryDefinition queryDef) {
            startField("var_pop");

            _queryBuilder.append('{');
            queryDef.define(new us_states_var_pop_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery varSamp(us_states_var_samp_fieldsQueryDefinition queryDef) {
            startField("var_samp");

            _queryBuilder.append('{');
            queryDef.define(new us_states_var_samp_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }

        public us_states_aggregate_fieldsQuery variance(us_states_variance_fieldsQueryDefinition queryDef) {
            startField("variance");

            _queryBuilder.append('{');
            queryDef.define(new us_states_variance_fieldsQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * aggregate fields of "us_states"
    */
    public static class us_states_aggregate_fields extends AbstractResponse<us_states_aggregate_fields> {
        public us_states_aggregate_fields() {
        }

        public us_states_aggregate_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "avg": {
                        us_states_avg_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_avg_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "count": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "max": {
                        us_states_max_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_max_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "min": {
                        us_states_min_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_min_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev": {
                        us_states_stddev_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_stddev_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_pop": {
                        us_states_stddev_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_stddev_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "stddev_samp": {
                        us_states_stddev_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_stddev_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "sum": {
                        us_states_sum_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_sum_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_pop": {
                        us_states_var_pop_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_var_pop_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "var_samp": {
                        us_states_var_samp_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_var_samp_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "variance": {
                        us_states_variance_fields optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = new us_states_variance_fields(jsonAsObject(field.getValue(), key));
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_aggregate_fields";
        }

        public us_states_avg_fields getAvg() {
            return (us_states_avg_fields) get("avg");
        }

        public us_states_aggregate_fields setAvg(us_states_avg_fields arg) {
            optimisticData.put(getKey("avg"), arg);
            return this;
        }

        public Integer getCount() {
            return (Integer) get("count");
        }

        public us_states_aggregate_fields setCount(Integer arg) {
            optimisticData.put(getKey("count"), arg);
            return this;
        }

        public us_states_max_fields getMax() {
            return (us_states_max_fields) get("max");
        }

        public us_states_aggregate_fields setMax(us_states_max_fields arg) {
            optimisticData.put(getKey("max"), arg);
            return this;
        }

        public us_states_min_fields getMin() {
            return (us_states_min_fields) get("min");
        }

        public us_states_aggregate_fields setMin(us_states_min_fields arg) {
            optimisticData.put(getKey("min"), arg);
            return this;
        }

        public us_states_stddev_fields getStddev() {
            return (us_states_stddev_fields) get("stddev");
        }

        public us_states_aggregate_fields setStddev(us_states_stddev_fields arg) {
            optimisticData.put(getKey("stddev"), arg);
            return this;
        }

        public us_states_stddev_pop_fields getStddevPop() {
            return (us_states_stddev_pop_fields) get("stddev_pop");
        }

        public us_states_aggregate_fields setStddevPop(us_states_stddev_pop_fields arg) {
            optimisticData.put(getKey("stddev_pop"), arg);
            return this;
        }

        public us_states_stddev_samp_fields getStddevSamp() {
            return (us_states_stddev_samp_fields) get("stddev_samp");
        }

        public us_states_aggregate_fields setStddevSamp(us_states_stddev_samp_fields arg) {
            optimisticData.put(getKey("stddev_samp"), arg);
            return this;
        }

        public us_states_sum_fields getSum() {
            return (us_states_sum_fields) get("sum");
        }

        public us_states_aggregate_fields setSum(us_states_sum_fields arg) {
            optimisticData.put(getKey("sum"), arg);
            return this;
        }

        public us_states_var_pop_fields getVarPop() {
            return (us_states_var_pop_fields) get("var_pop");
        }

        public us_states_aggregate_fields setVarPop(us_states_var_pop_fields arg) {
            optimisticData.put(getKey("var_pop"), arg);
            return this;
        }

        public us_states_var_samp_fields getVarSamp() {
            return (us_states_var_samp_fields) get("var_samp");
        }

        public us_states_aggregate_fields setVarSamp(us_states_var_samp_fields arg) {
            optimisticData.put(getKey("var_samp"), arg);
            return this;
        }

        public us_states_variance_fields getVariance() {
            return (us_states_variance_fields) get("variance");
        }

        public us_states_aggregate_fields setVariance(us_states_variance_fields arg) {
            optimisticData.put(getKey("variance"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "avg": return true;

                case "count": return false;

                case "max": return true;

                case "min": return true;

                case "stddev": return true;

                case "stddev_pop": return true;

                case "stddev_samp": return true;

                case "sum": return true;

                case "var_pop": return true;

                case "var_samp": return true;

                case "variance": return true;

                default: return false;
            }
        }
    }

    public static class us_states_aggregate_order_by implements Serializable {
        private us_states_avg_order_by avg;

        private order_by count;

        private us_states_max_order_by max;

        private us_states_min_order_by min;

        private us_states_stddev_order_by stddev;

        private us_states_stddev_pop_order_by stddevPop;

        private us_states_stddev_samp_order_by stddevSamp;

        private us_states_sum_order_by sum;

        private us_states_var_pop_order_by varPop;

        private us_states_var_samp_order_by varSamp;

        private us_states_variance_order_by variance;

        public us_states_avg_order_by getAvg() {
            return avg;
        }

        public us_states_aggregate_order_by setAvg(us_states_avg_order_by avg) {
            this.avg = avg;
            return this;
        }

        public order_by getCount() {
            return count;
        }

        public us_states_aggregate_order_by setCount(order_by count) {
            this.count = count;
            return this;
        }

        public us_states_max_order_by getMax() {
            return max;
        }

        public us_states_aggregate_order_by setMax(us_states_max_order_by max) {
            this.max = max;
            return this;
        }

        public us_states_min_order_by getMin() {
            return min;
        }

        public us_states_aggregate_order_by setMin(us_states_min_order_by min) {
            this.min = min;
            return this;
        }

        public us_states_stddev_order_by getStddev() {
            return stddev;
        }

        public us_states_aggregate_order_by setStddev(us_states_stddev_order_by stddev) {
            this.stddev = stddev;
            return this;
        }

        public us_states_stddev_pop_order_by getStddevPop() {
            return stddevPop;
        }

        public us_states_aggregate_order_by setStddevPop(us_states_stddev_pop_order_by stddevPop) {
            this.stddevPop = stddevPop;
            return this;
        }

        public us_states_stddev_samp_order_by getStddevSamp() {
            return stddevSamp;
        }

        public us_states_aggregate_order_by setStddevSamp(us_states_stddev_samp_order_by stddevSamp) {
            this.stddevSamp = stddevSamp;
            return this;
        }

        public us_states_sum_order_by getSum() {
            return sum;
        }

        public us_states_aggregate_order_by setSum(us_states_sum_order_by sum) {
            this.sum = sum;
            return this;
        }

        public us_states_var_pop_order_by getVarPop() {
            return varPop;
        }

        public us_states_aggregate_order_by setVarPop(us_states_var_pop_order_by varPop) {
            this.varPop = varPop;
            return this;
        }

        public us_states_var_samp_order_by getVarSamp() {
            return varSamp;
        }

        public us_states_aggregate_order_by setVarSamp(us_states_var_samp_order_by varSamp) {
            this.varSamp = varSamp;
            return this;
        }

        public us_states_variance_order_by getVariance() {
            return variance;
        }

        public us_states_aggregate_order_by setVariance(us_states_variance_order_by variance) {
            this.variance = variance;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (avg != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("avg:");
                avg.appendTo(_queryBuilder);
            }

            if (count != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("count:");
                _queryBuilder.append(count.toString());
            }

            if (max != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("max:");
                max.appendTo(_queryBuilder);
            }

            if (min != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("min:");
                min.appendTo(_queryBuilder);
            }

            if (stddev != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev:");
                stddev.appendTo(_queryBuilder);
            }

            if (stddevPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_pop:");
                stddevPop.appendTo(_queryBuilder);
            }

            if (stddevSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("stddev_samp:");
                stddevSamp.appendTo(_queryBuilder);
            }

            if (sum != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("sum:");
                sum.appendTo(_queryBuilder);
            }

            if (varPop != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_pop:");
                varPop.appendTo(_queryBuilder);
            }

            if (varSamp != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("var_samp:");
                varSamp.appendTo(_queryBuilder);
            }

            if (variance != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("variance:");
                variance.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class us_states_arr_rel_insert_input implements Serializable {
        private List<us_states_insert_input> data;

        private us_states_on_conflict onConflict;

        public us_states_arr_rel_insert_input(List<us_states_insert_input> data) {
            this.data = data;
        }

        public List<us_states_insert_input> getData() {
            return data;
        }

        public us_states_arr_rel_insert_input setData(List<us_states_insert_input> data) {
            this.data = data;
            return this;
        }

        public us_states_on_conflict getOnConflict() {
            return onConflict;
        }

        public us_states_arr_rel_insert_input setOnConflict(us_states_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (us_states_insert_input item1 : data) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                item1.appendTo(_queryBuilder);
            }
            _queryBuilder.append(']');

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_avg_fieldsQueryDefinition {
        void define(us_states_avg_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate avg on columns
    */
    public static class us_states_avg_fieldsQuery extends Query<us_states_avg_fieldsQuery> {
        us_states_avg_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_avg_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate avg on columns
    */
    public static class us_states_avg_fields extends AbstractResponse<us_states_avg_fields> {
        public us_states_avg_fields() {
        }

        public us_states_avg_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_avg_fields";
        }

        public Double getStateId() {
            return (Double) get("state_id");
        }

        public us_states_avg_fields setStateId(Double arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_avg_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_avg_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class us_states_bool_exp implements Serializable {
        private List<us_states_bool_exp> And;

        private us_states_bool_exp Not;

        private List<us_states_bool_exp> Or;

        private varchar_comparison_exp stateAbbr;

        private Int_comparison_exp stateId;

        private varchar_comparison_exp stateName;

        private varchar_comparison_exp stateRegion;

        public List<us_states_bool_exp> getAnd() {
            return And;
        }

        public us_states_bool_exp setAnd(List<us_states_bool_exp> And) {
            this.And = And;
            return this;
        }

        public us_states_bool_exp getNot() {
            return Not;
        }

        public us_states_bool_exp setNot(us_states_bool_exp Not) {
            this.Not = Not;
            return this;
        }

        public List<us_states_bool_exp> getOr() {
            return Or;
        }

        public us_states_bool_exp setOr(List<us_states_bool_exp> Or) {
            this.Or = Or;
            return this;
        }

        public varchar_comparison_exp getStateAbbr() {
            return stateAbbr;
        }

        public us_states_bool_exp setStateAbbr(varchar_comparison_exp stateAbbr) {
            this.stateAbbr = stateAbbr;
            return this;
        }

        public Int_comparison_exp getStateId() {
            return stateId;
        }

        public us_states_bool_exp setStateId(Int_comparison_exp stateId) {
            this.stateId = stateId;
            return this;
        }

        public varchar_comparison_exp getStateName() {
            return stateName;
        }

        public us_states_bool_exp setStateName(varchar_comparison_exp stateName) {
            this.stateName = stateName;
            return this;
        }

        public varchar_comparison_exp getStateRegion() {
            return stateRegion;
        }

        public us_states_bool_exp setStateRegion(varchar_comparison_exp stateRegion) {
            this.stateRegion = stateRegion;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (And != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_and:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (us_states_bool_exp item1 : And) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (Not != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_not:");
                Not.appendTo(_queryBuilder);
            }

            if (Or != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_or:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (us_states_bool_exp item1 : Or) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    item1.appendTo(_queryBuilder);
                }
                _queryBuilder.append(']');
            }

            if (stateAbbr != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_abbr:");
                stateAbbr.appendTo(_queryBuilder);
            }

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                stateId.appendTo(_queryBuilder);
            }

            if (stateName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_name:");
                stateName.appendTo(_queryBuilder);
            }

            if (stateRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_region:");
                stateRegion.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * unique or primary key constraints on table "us_states"
    */
    public enum us_states_constraint {
        PK_USSTATES,

        UNKNOWN_VALUE;

        public static us_states_constraint fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "pk_usstates": {
                    return PK_USSTATES;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case PK_USSTATES: {
                    return "pk_usstates";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class us_states_inc_input implements Serializable {
        private Integer stateId;

        public Integer getStateId() {
            return stateId;
        }

        public us_states_inc_input setStateId(Integer stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId);
            }

            _queryBuilder.append('}');
        }
    }

    public static class us_states_insert_input implements Serializable {
        private String stateAbbr;

        private Integer stateId;

        private String stateName;

        private String stateRegion;

        public String getStateAbbr() {
            return stateAbbr;
        }

        public us_states_insert_input setStateAbbr(String stateAbbr) {
            this.stateAbbr = stateAbbr;
            return this;
        }

        public Integer getStateId() {
            return stateId;
        }

        public us_states_insert_input setStateId(Integer stateId) {
            this.stateId = stateId;
            return this;
        }

        public String getStateName() {
            return stateName;
        }

        public us_states_insert_input setStateName(String stateName) {
            this.stateName = stateName;
            return this;
        }

        public String getStateRegion() {
            return stateRegion;
        }

        public us_states_insert_input setStateRegion(String stateRegion) {
            this.stateRegion = stateRegion;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateAbbr != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_abbr:");
                Query.appendQuotedString(_queryBuilder, stateAbbr.toString());
            }

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId);
            }

            if (stateName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_name:");
                Query.appendQuotedString(_queryBuilder, stateName.toString());
            }

            if (stateRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_region:");
                Query.appendQuotedString(_queryBuilder, stateRegion.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_max_fieldsQueryDefinition {
        void define(us_states_max_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate max on columns
    */
    public static class us_states_max_fieldsQuery extends Query<us_states_max_fieldsQuery> {
        us_states_max_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_max_fieldsQuery stateAbbr() {
            startField("state_abbr");

            return this;
        }

        public us_states_max_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }

        public us_states_max_fieldsQuery stateName() {
            startField("state_name");

            return this;
        }

        public us_states_max_fieldsQuery stateRegion() {
            startField("state_region");

            return this;
        }
    }

    /**
    * aggregate max on columns
    */
    public static class us_states_max_fields extends AbstractResponse<us_states_max_fields> {
        public us_states_max_fields() {
        }

        public us_states_max_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_abbr": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_max_fields";
        }

        public String getStateAbbr() {
            return (String) get("state_abbr");
        }

        public us_states_max_fields setStateAbbr(String arg) {
            optimisticData.put(getKey("state_abbr"), arg);
            return this;
        }

        public Integer getStateId() {
            return (Integer) get("state_id");
        }

        public us_states_max_fields setStateId(Integer arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public String getStateName() {
            return (String) get("state_name");
        }

        public us_states_max_fields setStateName(String arg) {
            optimisticData.put(getKey("state_name"), arg);
            return this;
        }

        public String getStateRegion() {
            return (String) get("state_region");
        }

        public us_states_max_fields setStateRegion(String arg) {
            optimisticData.put(getKey("state_region"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_abbr": return false;

                case "state_id": return false;

                case "state_name": return false;

                case "state_region": return false;

                default: return false;
            }
        }
    }

    public static class us_states_max_order_by implements Serializable {
        private order_by stateAbbr;

        private order_by stateId;

        private order_by stateName;

        private order_by stateRegion;

        public order_by getStateAbbr() {
            return stateAbbr;
        }

        public us_states_max_order_by setStateAbbr(order_by stateAbbr) {
            this.stateAbbr = stateAbbr;
            return this;
        }

        public order_by getStateId() {
            return stateId;
        }

        public us_states_max_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public order_by getStateName() {
            return stateName;
        }

        public us_states_max_order_by setStateName(order_by stateName) {
            this.stateName = stateName;
            return this;
        }

        public order_by getStateRegion() {
            return stateRegion;
        }

        public us_states_max_order_by setStateRegion(order_by stateRegion) {
            this.stateRegion = stateRegion;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateAbbr != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_abbr:");
                _queryBuilder.append(stateAbbr.toString());
            }

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            if (stateName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_name:");
                _queryBuilder.append(stateName.toString());
            }

            if (stateRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_region:");
                _queryBuilder.append(stateRegion.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_min_fieldsQueryDefinition {
        void define(us_states_min_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate min on columns
    */
    public static class us_states_min_fieldsQuery extends Query<us_states_min_fieldsQuery> {
        us_states_min_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_min_fieldsQuery stateAbbr() {
            startField("state_abbr");

            return this;
        }

        public us_states_min_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }

        public us_states_min_fieldsQuery stateName() {
            startField("state_name");

            return this;
        }

        public us_states_min_fieldsQuery stateRegion() {
            startField("state_region");

            return this;
        }
    }

    /**
    * aggregate min on columns
    */
    public static class us_states_min_fields extends AbstractResponse<us_states_min_fields> {
        public us_states_min_fields() {
        }

        public us_states_min_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_abbr": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_name": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "state_region": {
                        String optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsString(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_min_fields";
        }

        public String getStateAbbr() {
            return (String) get("state_abbr");
        }

        public us_states_min_fields setStateAbbr(String arg) {
            optimisticData.put(getKey("state_abbr"), arg);
            return this;
        }

        public Integer getStateId() {
            return (Integer) get("state_id");
        }

        public us_states_min_fields setStateId(Integer arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public String getStateName() {
            return (String) get("state_name");
        }

        public us_states_min_fields setStateName(String arg) {
            optimisticData.put(getKey("state_name"), arg);
            return this;
        }

        public String getStateRegion() {
            return (String) get("state_region");
        }

        public us_states_min_fields setStateRegion(String arg) {
            optimisticData.put(getKey("state_region"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_abbr": return false;

                case "state_id": return false;

                case "state_name": return false;

                case "state_region": return false;

                default: return false;
            }
        }
    }

    public static class us_states_min_order_by implements Serializable {
        private order_by stateAbbr;

        private order_by stateId;

        private order_by stateName;

        private order_by stateRegion;

        public order_by getStateAbbr() {
            return stateAbbr;
        }

        public us_states_min_order_by setStateAbbr(order_by stateAbbr) {
            this.stateAbbr = stateAbbr;
            return this;
        }

        public order_by getStateId() {
            return stateId;
        }

        public us_states_min_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public order_by getStateName() {
            return stateName;
        }

        public us_states_min_order_by setStateName(order_by stateName) {
            this.stateName = stateName;
            return this;
        }

        public order_by getStateRegion() {
            return stateRegion;
        }

        public us_states_min_order_by setStateRegion(order_by stateRegion) {
            this.stateRegion = stateRegion;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateAbbr != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_abbr:");
                _queryBuilder.append(stateAbbr.toString());
            }

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            if (stateName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_name:");
                _queryBuilder.append(stateName.toString());
            }

            if (stateRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_region:");
                _queryBuilder.append(stateRegion.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_mutation_responseQueryDefinition {
        void define(us_states_mutation_responseQuery _queryBuilder);
    }

    /**
    * response of any mutation on the table "us_states"
    */
    public static class us_states_mutation_responseQuery extends Query<us_states_mutation_responseQuery> {
        us_states_mutation_responseQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        /**
        * number of affected rows by the mutation
        */
        public us_states_mutation_responseQuery affectedRows() {
            startField("affected_rows");

            return this;
        }

        /**
        * data of the affected rows by the mutation
        */
        public us_states_mutation_responseQuery returning(us_statesQueryDefinition queryDef) {
            startField("returning");

            _queryBuilder.append('{');
            queryDef.define(new us_statesQuery(_queryBuilder));
            _queryBuilder.append('}');

            return this;
        }
    }

    /**
    * response of any mutation on the table "us_states"
    */
    public static class us_states_mutation_response extends AbstractResponse<us_states_mutation_response> {
        public us_states_mutation_response() {
        }

        public us_states_mutation_response(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "affected_rows": {
                        responseData.put(key, jsonAsInteger(field.getValue(), key));

                        break;
                    }

                    case "returning": {
                        List<us_states> list1 = new ArrayList<>();
                        for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
                            list1.add(new us_states(jsonAsObject(element1, key)));
                        }

                        responseData.put(key, list1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_mutation_response";
        }

        /**
        * number of affected rows by the mutation
        */

        public Integer getAffectedRows() {
            return (Integer) get("affected_rows");
        }

        public us_states_mutation_response setAffectedRows(Integer arg) {
            optimisticData.put(getKey("affected_rows"), arg);
            return this;
        }

        /**
        * data of the affected rows by the mutation
        */

        public List<us_states> getReturning() {
            return (List<us_states>) get("returning");
        }

        public us_states_mutation_response setReturning(List<us_states> arg) {
            optimisticData.put(getKey("returning"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "affected_rows": return false;

                case "returning": return true;

                default: return false;
            }
        }
    }

    public static class us_states_obj_rel_insert_input implements Serializable {
        private us_states_insert_input data;

        private us_states_on_conflict onConflict;

        public us_states_obj_rel_insert_input(us_states_insert_input data) {
            this.data = data;
        }

        public us_states_insert_input getData() {
            return data;
        }

        public us_states_obj_rel_insert_input setData(us_states_insert_input data) {
            this.data = data;
            return this;
        }

        public us_states_on_conflict getOnConflict() {
            return onConflict;
        }

        public us_states_obj_rel_insert_input setOnConflict(us_states_on_conflict onConflict) {
            this.onConflict = onConflict;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("data:");
            data.appendTo(_queryBuilder);

            if (onConflict != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("on_conflict:");
                onConflict.appendTo(_queryBuilder);
            }

            _queryBuilder.append('}');
        }
    }

    public static class us_states_on_conflict implements Serializable {
        private us_states_constraint constraint;

        private List<us_states_update_column> updateColumns;

        public us_states_on_conflict(us_states_constraint constraint, List<us_states_update_column> updateColumns) {
            this.constraint = constraint;

            this.updateColumns = updateColumns;
        }

        public us_states_constraint getConstraint() {
            return constraint;
        }

        public us_states_on_conflict setConstraint(us_states_constraint constraint) {
            this.constraint = constraint;
            return this;
        }

        public List<us_states_update_column> getUpdateColumns() {
            return updateColumns;
        }

        public us_states_on_conflict setUpdateColumns(List<us_states_update_column> updateColumns) {
            this.updateColumns = updateColumns;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("constraint:");
            _queryBuilder.append(constraint.toString());

            _queryBuilder.append(separator);
            separator = ",";
            _queryBuilder.append("update_columns:");
            _queryBuilder.append('[');

            String listSeperator1 = "";
            for (us_states_update_column item1 : updateColumns) {
                _queryBuilder.append(listSeperator1);
                listSeperator1 = ",";
                _queryBuilder.append(item1.toString());
            }
            _queryBuilder.append(']');

            _queryBuilder.append('}');
        }
    }

    public static class us_states_order_by implements Serializable {
        private order_by stateAbbr;

        private order_by stateId;

        private order_by stateName;

        private order_by stateRegion;

        public order_by getStateAbbr() {
            return stateAbbr;
        }

        public us_states_order_by setStateAbbr(order_by stateAbbr) {
            this.stateAbbr = stateAbbr;
            return this;
        }

        public order_by getStateId() {
            return stateId;
        }

        public us_states_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public order_by getStateName() {
            return stateName;
        }

        public us_states_order_by setStateName(order_by stateName) {
            this.stateName = stateName;
            return this;
        }

        public order_by getStateRegion() {
            return stateRegion;
        }

        public us_states_order_by setStateRegion(order_by stateRegion) {
            this.stateRegion = stateRegion;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateAbbr != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_abbr:");
                _queryBuilder.append(stateAbbr.toString());
            }

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            if (stateName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_name:");
                _queryBuilder.append(stateName.toString());
            }

            if (stateRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_region:");
                _queryBuilder.append(stateRegion.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * select columns of table "us_states"
    */
    public enum us_states_select_column {
        STATE_ABBR,

        STATE_ID,

        STATE_NAME,

        STATE_REGION,

        UNKNOWN_VALUE;

        public static us_states_select_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "state_abbr": {
                    return STATE_ABBR;
                }

                case "state_id": {
                    return STATE_ID;
                }

                case "state_name": {
                    return STATE_NAME;
                }

                case "state_region": {
                    return STATE_REGION;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case STATE_ABBR: {
                    return "state_abbr";
                }

                case STATE_ID: {
                    return "state_id";
                }

                case STATE_NAME: {
                    return "state_name";
                }

                case STATE_REGION: {
                    return "state_region";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public static class us_states_set_input implements Serializable {
        private String stateAbbr;

        private Integer stateId;

        private String stateName;

        private String stateRegion;

        public String getStateAbbr() {
            return stateAbbr;
        }

        public us_states_set_input setStateAbbr(String stateAbbr) {
            this.stateAbbr = stateAbbr;
            return this;
        }

        public Integer getStateId() {
            return stateId;
        }

        public us_states_set_input setStateId(Integer stateId) {
            this.stateId = stateId;
            return this;
        }

        public String getStateName() {
            return stateName;
        }

        public us_states_set_input setStateName(String stateName) {
            this.stateName = stateName;
            return this;
        }

        public String getStateRegion() {
            return stateRegion;
        }

        public us_states_set_input setStateRegion(String stateRegion) {
            this.stateRegion = stateRegion;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateAbbr != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_abbr:");
                Query.appendQuotedString(_queryBuilder, stateAbbr.toString());
            }

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId);
            }

            if (stateName != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_name:");
                Query.appendQuotedString(_queryBuilder, stateName.toString());
            }

            if (stateRegion != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_region:");
                Query.appendQuotedString(_queryBuilder, stateRegion.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_stddev_fieldsQueryDefinition {
        void define(us_states_stddev_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev on columns
    */
    public static class us_states_stddev_fieldsQuery extends Query<us_states_stddev_fieldsQuery> {
        us_states_stddev_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_stddev_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate stddev on columns
    */
    public static class us_states_stddev_fields extends AbstractResponse<us_states_stddev_fields> {
        public us_states_stddev_fields() {
        }

        public us_states_stddev_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_stddev_fields";
        }

        public Double getStateId() {
            return (Double) get("state_id");
        }

        public us_states_stddev_fields setStateId(Double arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_stddev_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_stddev_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_stddev_pop_fieldsQueryDefinition {
        void define(us_states_stddev_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class us_states_stddev_pop_fieldsQuery extends Query<us_states_stddev_pop_fieldsQuery> {
        us_states_stddev_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_stddev_pop_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate stddev_pop on columns
    */
    public static class us_states_stddev_pop_fields extends AbstractResponse<us_states_stddev_pop_fields> {
        public us_states_stddev_pop_fields() {
        }

        public us_states_stddev_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_stddev_pop_fields";
        }

        public Double getStateId() {
            return (Double) get("state_id");
        }

        public us_states_stddev_pop_fields setStateId(Double arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_stddev_pop_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_stddev_pop_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_stddev_samp_fieldsQueryDefinition {
        void define(us_states_stddev_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class us_states_stddev_samp_fieldsQuery extends Query<us_states_stddev_samp_fieldsQuery> {
        us_states_stddev_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_stddev_samp_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate stddev_samp on columns
    */
    public static class us_states_stddev_samp_fields extends AbstractResponse<us_states_stddev_samp_fields> {
        public us_states_stddev_samp_fields() {
        }

        public us_states_stddev_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_stddev_samp_fields";
        }

        public Double getStateId() {
            return (Double) get("state_id");
        }

        public us_states_stddev_samp_fields setStateId(Double arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_stddev_samp_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_stddev_samp_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_sum_fieldsQueryDefinition {
        void define(us_states_sum_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate sum on columns
    */
    public static class us_states_sum_fieldsQuery extends Query<us_states_sum_fieldsQuery> {
        us_states_sum_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_sum_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate sum on columns
    */
    public static class us_states_sum_fields extends AbstractResponse<us_states_sum_fields> {
        public us_states_sum_fields() {
        }

        public us_states_sum_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Integer optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsInteger(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_sum_fields";
        }

        public Integer getStateId() {
            return (Integer) get("state_id");
        }

        public us_states_sum_fields setStateId(Integer arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_sum_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_sum_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    /**
    * update columns of table "us_states"
    */
    public enum us_states_update_column {
        STATE_ABBR,

        STATE_ID,

        STATE_NAME,

        STATE_REGION,

        UNKNOWN_VALUE;

        public static us_states_update_column fromGraphQl(String value) {
            if (value == null) {
                return null;
            }

            switch (value) {
                case "state_abbr": {
                    return STATE_ABBR;
                }

                case "state_id": {
                    return STATE_ID;
                }

                case "state_name": {
                    return STATE_NAME;
                }

                case "state_region": {
                    return STATE_REGION;
                }

                default: {
                    return UNKNOWN_VALUE;
                }
            }
        }
        public String toString() {
            switch (this) {
                case STATE_ABBR: {
                    return "state_abbr";
                }

                case STATE_ID: {
                    return "state_id";
                }

                case STATE_NAME: {
                    return "state_name";
                }

                case STATE_REGION: {
                    return "state_region";
                }

                default: {
                    return "";
                }
            }
        }
    }

    public interface us_states_var_pop_fieldsQueryDefinition {
        void define(us_states_var_pop_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_pop on columns
    */
    public static class us_states_var_pop_fieldsQuery extends Query<us_states_var_pop_fieldsQuery> {
        us_states_var_pop_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_var_pop_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate var_pop on columns
    */
    public static class us_states_var_pop_fields extends AbstractResponse<us_states_var_pop_fields> {
        public us_states_var_pop_fields() {
        }

        public us_states_var_pop_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_var_pop_fields";
        }

        public Double getStateId() {
            return (Double) get("state_id");
        }

        public us_states_var_pop_fields setStateId(Double arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_var_pop_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_var_pop_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_var_samp_fieldsQueryDefinition {
        void define(us_states_var_samp_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate var_samp on columns
    */
    public static class us_states_var_samp_fieldsQuery extends Query<us_states_var_samp_fieldsQuery> {
        us_states_var_samp_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_var_samp_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate var_samp on columns
    */
    public static class us_states_var_samp_fields extends AbstractResponse<us_states_var_samp_fields> {
        public us_states_var_samp_fields() {
        }

        public us_states_var_samp_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_var_samp_fields";
        }

        public Double getStateId() {
            return (Double) get("state_id");
        }

        public us_states_var_samp_fields setStateId(Double arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_var_samp_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_var_samp_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public interface us_states_variance_fieldsQueryDefinition {
        void define(us_states_variance_fieldsQuery _queryBuilder);
    }

    /**
    * aggregate variance on columns
    */
    public static class us_states_variance_fieldsQuery extends Query<us_states_variance_fieldsQuery> {
        us_states_variance_fieldsQuery(StringBuilder _queryBuilder) {
            super(_queryBuilder);
        }

        public us_states_variance_fieldsQuery stateId() {
            startField("state_id");

            return this;
        }
    }

    /**
    * aggregate variance on columns
    */
    public static class us_states_variance_fields extends AbstractResponse<us_states_variance_fields> {
        public us_states_variance_fields() {
        }

        public us_states_variance_fields(JsonObject fields) throws SchemaViolationError {
            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
                String key = field.getKey();
                String fieldName = getFieldName(key);
                switch (fieldName) {
                    case "state_id": {
                        Double optional1 = null;
                        if (!field.getValue().isJsonNull()) {
                            optional1 = jsonAsDouble(field.getValue(), key);
                        }

                        responseData.put(key, optional1);

                        break;
                    }

                    case "__typename": {
                        responseData.put(key, jsonAsString(field.getValue(), key));
                        break;
                    }
                    default: {
                        throw new SchemaViolationError(this, key, field.getValue());
                    }
                }
            }
        }

        public String getGraphQlTypeName() {
            return "us_states_variance_fields";
        }

        public Double getStateId() {
            return (Double) get("state_id");
        }

        public us_states_variance_fields setStateId(Double arg) {
            optimisticData.put(getKey("state_id"), arg);
            return this;
        }

        public boolean unwrapsToObject(String key) {
            switch (getFieldName(key)) {
                case "state_id": return false;

                default: return false;
            }
        }
    }

    public static class us_states_variance_order_by implements Serializable {
        private order_by stateId;

        public order_by getStateId() {
            return stateId;
        }

        public us_states_variance_order_by setStateId(order_by stateId) {
            this.stateId = stateId;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (stateId != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("state_id:");
                _queryBuilder.append(stateId.toString());
            }

            _queryBuilder.append('}');
        }
    }

    public static class varchar_comparison_exp implements Serializable {
        private String Eq;

        private String Gt;

        private String Gte;

        private String Ilike;

        private List<String> In;

        private Boolean IsNull;

        private String Like;

        private String Lt;

        private String Lte;

        private String Neq;

        private String Nilike;

        private List<String> Nin;

        private String Nlike;

        private String Nsimilar;

        private String Similar;

        public String getEq() {
            return Eq;
        }

        public varchar_comparison_exp setEq(String Eq) {
            this.Eq = Eq;
            return this;
        }

        public String getGt() {
            return Gt;
        }

        public varchar_comparison_exp setGt(String Gt) {
            this.Gt = Gt;
            return this;
        }

        public String getGte() {
            return Gte;
        }

        public varchar_comparison_exp setGte(String Gte) {
            this.Gte = Gte;
            return this;
        }

        public String getIlike() {
            return Ilike;
        }

        public varchar_comparison_exp setIlike(String Ilike) {
            this.Ilike = Ilike;
            return this;
        }

        public List<String> getIn() {
            return In;
        }

        public varchar_comparison_exp setIn(List<String> In) {
            this.In = In;
            return this;
        }

        public Boolean getIsNull() {
            return IsNull;
        }

        public varchar_comparison_exp setIsNull(Boolean IsNull) {
            this.IsNull = IsNull;
            return this;
        }

        public String getLike() {
            return Like;
        }

        public varchar_comparison_exp setLike(String Like) {
            this.Like = Like;
            return this;
        }

        public String getLt() {
            return Lt;
        }

        public varchar_comparison_exp setLt(String Lt) {
            this.Lt = Lt;
            return this;
        }

        public String getLte() {
            return Lte;
        }

        public varchar_comparison_exp setLte(String Lte) {
            this.Lte = Lte;
            return this;
        }

        public String getNeq() {
            return Neq;
        }

        public varchar_comparison_exp setNeq(String Neq) {
            this.Neq = Neq;
            return this;
        }

        public String getNilike() {
            return Nilike;
        }

        public varchar_comparison_exp setNilike(String Nilike) {
            this.Nilike = Nilike;
            return this;
        }

        public List<String> getNin() {
            return Nin;
        }

        public varchar_comparison_exp setNin(List<String> Nin) {
            this.Nin = Nin;
            return this;
        }

        public String getNlike() {
            return Nlike;
        }

        public varchar_comparison_exp setNlike(String Nlike) {
            this.Nlike = Nlike;
            return this;
        }

        public String getNsimilar() {
            return Nsimilar;
        }

        public varchar_comparison_exp setNsimilar(String Nsimilar) {
            this.Nsimilar = Nsimilar;
            return this;
        }

        public String getSimilar() {
            return Similar;
        }

        public varchar_comparison_exp setSimilar(String Similar) {
            this.Similar = Similar;
            return this;
        }

        public void appendTo(StringBuilder _queryBuilder) {
            String separator = "";
            _queryBuilder.append('{');

            if (Eq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_eq:");
                Query.appendQuotedString(_queryBuilder, Eq.toString());
            }

            if (Gt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gt:");
                Query.appendQuotedString(_queryBuilder, Gt.toString());
            }

            if (Gte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_gte:");
                Query.appendQuotedString(_queryBuilder, Gte.toString());
            }

            if (Ilike != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_ilike:");
                Query.appendQuotedString(_queryBuilder, Ilike.toString());
            }

            if (In != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_in:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : In) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            if (IsNull != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_is_null:");
                _queryBuilder.append(IsNull);
            }

            if (Like != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_like:");
                Query.appendQuotedString(_queryBuilder, Like.toString());
            }

            if (Lt != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lt:");
                Query.appendQuotedString(_queryBuilder, Lt.toString());
            }

            if (Lte != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_lte:");
                Query.appendQuotedString(_queryBuilder, Lte.toString());
            }

            if (Neq != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_neq:");
                Query.appendQuotedString(_queryBuilder, Neq.toString());
            }

            if (Nilike != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nilike:");
                Query.appendQuotedString(_queryBuilder, Nilike.toString());
            }

            if (Nin != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nin:");
                _queryBuilder.append('[');

                String listSeperator1 = "";
                for (String item1 : Nin) {
                    _queryBuilder.append(listSeperator1);
                    listSeperator1 = ",";
                    Query.appendQuotedString(_queryBuilder, item1.toString());
                }
                _queryBuilder.append(']');
            }

            if (Nlike != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nlike:");
                Query.appendQuotedString(_queryBuilder, Nlike.toString());
            }

            if (Nsimilar != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_nsimilar:");
                Query.appendQuotedString(_queryBuilder, Nsimilar.toString());
            }

            if (Similar != null) {
                _queryBuilder.append(separator);
                separator = ",";
                _queryBuilder.append("_similar:");
                Query.appendQuotedString(_queryBuilder, Similar.toString());
            }

            _queryBuilder.append('}');
        }
    }
}
